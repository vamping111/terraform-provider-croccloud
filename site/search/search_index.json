{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"aws Provider # Schema # Optional # access_key (String) The access key for API operations. You can retrieve this from the 'Security & Credentials' section of the AWS console. allowed_account_ids (Set of String) assume_role (Block List, Max: 1) (see below for nested schema ) assume_role_with_web_identity (Block List, Max: 1) (see below for nested schema ) custom_ca_bundle (String) File containing custom root and intermediate certificates. Can also be configured using the AWS_CA_BUNDLE environment variable. (Setting ca_bundle in the shared config file is not supported.) default_tags (Block List, Max: 1) Configuration block with settings to default resource tags across all resources. (see below for nested schema ) ec2_metadata_service_endpoint (String) Address of the EC2 metadata service endpoint to use. Can also be configured using the AWS_EC2_METADATA_SERVICE_ENDPOINT environment variable. ec2_metadata_service_endpoint_mode (String) Protocol to use with EC2 metadata service endpoint.Valid values are IPv4 and IPv6 . Can also be configured using the AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE environment variable. endpoints (Block Set) (see below for nested schema ) forbidden_account_ids (Set of String) http_proxy (String) The address of an HTTP proxy to use when accessing the AWS API. Can also be configured using the HTTP_PROXY or HTTPS_PROXY environment variables. ignore_tags (Block List, Max: 1) Configuration block with settings to ignore resource tags across all resources. (see below for nested schema ) insecure (Boolean) Explicitly allow the provider to perform \"insecure\" SSL requests. If omitted, default value is false max_retries (Number) The maximum number of times an AWS API request is being executed. If the API request still fails, an error is thrown. profile (String) The profile for API operations. If not set, the default profile created with aws configure will be used. region (String) The region where AWS operations will take place. Examples are us-east-1, us-west-2, etc. s3_force_path_style (Boolean, Deprecated) Set this to true to enable the request to use path-style addressing, i.e., https://s3.amazonaws.com/BUCKET/KEY. By default, the S3 client will use virtual hosted bucket addressing when possible (https://BUCKET.s3.amazonaws.com/KEY). Specific to the Amazon S3 service. s3_use_path_style (Boolean) Set this to true to enable the request to use path-style addressing, i.e., https://s3.amazonaws.com/BUCKET/KEY. By default, the S3 client will use virtual hosted bucket addressing when possible (https://BUCKET.s3.amazonaws.com/KEY). Specific to the Amazon S3 service. secret_key (String) The secret key for API operations. You can retrieve this from the 'Security & Credentials' section of the AWS console. shared_config_files (List of String) List of paths to shared config files. If not set, defaults to [~/.aws/config]. shared_credentials_file (String, Deprecated) The path to the shared credentials file. If not set, defaults to ~/.aws/credentials. shared_credentials_files (List of String) List of paths to shared credentials files. If not set, defaults to [~/.aws/credentials]. skip_credentials_validation (Boolean) Skip the credentials validation via STS API. Used for AWS API implementations that do not have STS available/implemented. skip_get_ec2_platforms (Boolean) Skip getting the supported EC2 platforms. Used by users that don't have ec2:DescribeAccountAttributes permissions. skip_metadata_api_check (String) Skip the AWS Metadata API check. Used for AWS API implementations that do not have a metadata api endpoint. skip_region_validation (Boolean) Skip static validation of region name. Used by users of alternative AWS-like APIs or users w/ access to regions that are not public (yet). skip_requesting_account_id (Boolean) Skip requesting the account ID. Used for AWS API implementations that do not have IAM/STS API and/or metadata API. sts_region (String) The region where AWS STS operations will take place. Examples are us-east-1 and us-west-2. token (String) session token. A session token is only required if you are using temporary security credentials. use_dualstack_endpoint (Boolean) Resolve an endpoint with DualStack capability use_fips_endpoint (Boolean) Resolve an endpoint with FIPS capability Nested Schema for assume_role # Optional: duration (String) The duration, between 15 minutes and 12 hours, of the role session. Valid time units are ns, us (or \u00b5s), ms, s, h, or m. duration_seconds (Number, Deprecated) The duration, in seconds, of the role session. external_id (String) A unique identifier that might be required when you assume a role in another account. policy (String) IAM Policy JSON describing further restricting permissions for the IAM Role being assumed. policy_arns (Set of String) Amazon Resource Names (ARNs) of IAM Policies describing further restricting permissions for the IAM Role being assumed. role_arn (String) Amazon Resource Name (ARN) of an IAM Role to assume prior to making API calls. session_name (String) An identifier for the assumed role session. tags (Map of String) Assume role session tags. transitive_tag_keys (Set of String) Assume role session tag keys to pass to any subsequent sessions. Nested Schema for assume_role_with_web_identity # Optional: duration (String) The duration, between 15 minutes and 12 hours, of the role session. Valid time units are ns, us (or \u00b5s), ms, s, h, or m. policy (String) IAM Policy JSON describing further restricting permissions for the IAM Role being assumed. policy_arns (Set of String) Amazon Resource Names (ARNs) of IAM Policies describing further restricting permissions for the IAM Role being assumed. role_arn (String) Amazon Resource Name (ARN) of an IAM Role to assume prior to making API calls. session_name (String) An identifier for the assumed role session. web_identity_token (String) web_identity_token_file (String) Nested Schema for default_tags # Optional: tags (Map of String) Resource tags to default across all resources Nested Schema for endpoints # Optional: accessanalyzer (String) Use this to override the default service endpoint URL account (String) Use this to override the default service endpoint URL acm (String) Use this to override the default service endpoint URL acmpca (String) Use this to override the default service endpoint URL alexaforbusiness (String) Use this to override the default service endpoint URL amg (String) Use this to override the default service endpoint URL amp (String) Use this to override the default service endpoint URL amplify (String) Use this to override the default service endpoint URL amplifybackend (String) Use this to override the default service endpoint URL amplifyuibuilder (String) Use this to override the default service endpoint URL apigateway (String) Use this to override the default service endpoint URL apigatewaymanagementapi (String) Use this to override the default service endpoint URL apigatewayv2 (String) Use this to override the default service endpoint URL appautoscaling (String) Use this to override the default service endpoint URL appconfig (String) Use this to override the default service endpoint URL appconfigdata (String) Use this to override the default service endpoint URL appflow (String) Use this to override the default service endpoint URL appintegrations (String) Use this to override the default service endpoint URL appintegrationsservice (String) Use this to override the default service endpoint URL applicationautoscaling (String) Use this to override the default service endpoint URL applicationcostprofiler (String) Use this to override the default service endpoint URL applicationdiscovery (String) Use this to override the default service endpoint URL applicationdiscoveryservice (String) Use this to override the default service endpoint URL applicationinsights (String) Use this to override the default service endpoint URL appmesh (String) Use this to override the default service endpoint URL appregistry (String) Use this to override the default service endpoint URL apprunner (String) Use this to override the default service endpoint URL appstream (String) Use this to override the default service endpoint URL appsync (String) Use this to override the default service endpoint URL athena (String) Use this to override the default service endpoint URL auditmanager (String) Use this to override the default service endpoint URL augmentedairuntime (String) Use this to override the default service endpoint URL autoscaling (String) Use this to override the default service endpoint URL autoscalingplans (String) Use this to override the default service endpoint URL backup (String) Use this to override the default service endpoint URL backupgateway (String) Use this to override the default service endpoint URL batch (String) Use this to override the default service endpoint URL billingconductor (String) Use this to override the default service endpoint URL braket (String) Use this to override the default service endpoint URL budgets (String) Use this to override the default service endpoint URL ce (String) Use this to override the default service endpoint URL chime (String) Use this to override the default service endpoint URL chimesdkidentity (String) Use this to override the default service endpoint URL chimesdkmeetings (String) Use this to override the default service endpoint URL chimesdkmessaging (String) Use this to override the default service endpoint URL cloud9 (String) Use this to override the default service endpoint URL cloudcontrol (String) Use this to override the default service endpoint URL cloudcontrolapi (String) Use this to override the default service endpoint URL clouddirectory (String) Use this to override the default service endpoint URL cloudformation (String) Use this to override the default service endpoint URL cloudfront (String) Use this to override the default service endpoint URL cloudhsm (String) Use this to override the default service endpoint URL cloudhsmv2 (String) Use this to override the default service endpoint URL cloudsearch (String) Use this to override the default service endpoint URL cloudsearchdomain (String) Use this to override the default service endpoint URL cloudtrail (String) Use this to override the default service endpoint URL cloudwatch (String) Use this to override the default service endpoint URL cloudwatchevents (String) Use this to override the default service endpoint URL cloudwatchevidently (String) Use this to override the default service endpoint URL cloudwatchlogs (String) Use this to override the default service endpoint URL cloudwatchrum (String) Use this to override the default service endpoint URL codeartifact (String) Use this to override the default service endpoint URL codebuild (String) Use this to override the default service endpoint URL codecommit (String) Use this to override the default service endpoint URL codedeploy (String) Use this to override the default service endpoint URL codeguruprofiler (String) Use this to override the default service endpoint URL codegurureviewer (String) Use this to override the default service endpoint URL codepipeline (String) Use this to override the default service endpoint URL codestar (String) Use this to override the default service endpoint URL codestarconnections (String) Use this to override the default service endpoint URL codestarnotifications (String) Use this to override the default service endpoint URL cognitoidentity (String) Use this to override the default service endpoint URL cognitoidentityprovider (String) Use this to override the default service endpoint URL cognitoidp (String) Use this to override the default service endpoint URL cognitosync (String) Use this to override the default service endpoint URL comprehend (String) Use this to override the default service endpoint URL comprehendmedical (String) Use this to override the default service endpoint URL computeoptimizer (String) Use this to override the default service endpoint URL config (String) Use this to override the default service endpoint URL configservice (String) Use this to override the default service endpoint URL connect (String) Use this to override the default service endpoint URL connectcontactlens (String) Use this to override the default service endpoint URL connectparticipant (String) Use this to override the default service endpoint URL connectwisdomservice (String) Use this to override the default service endpoint URL costandusagereportservice (String) Use this to override the default service endpoint URL costexplorer (String) Use this to override the default service endpoint URL cur (String) Use this to override the default service endpoint URL customerprofiles (String) Use this to override the default service endpoint URL databasemigration (String) Use this to override the default service endpoint URL databasemigrationservice (String) Use this to override the default service endpoint URL databrew (String) Use this to override the default service endpoint URL dataexchange (String) Use this to override the default service endpoint URL datapipeline (String) Use this to override the default service endpoint URL datasync (String) Use this to override the default service endpoint URL dax (String) Use this to override the default service endpoint URL deploy (String) Use this to override the default service endpoint URL detective (String) Use this to override the default service endpoint URL devicefarm (String) Use this to override the default service endpoint URL devopsguru (String) Use this to override the default service endpoint URL directconnect (String) Use this to override the default service endpoint URL directoryservice (String) Use this to override the default service endpoint URL discovery (String) Use this to override the default service endpoint URL dlm (String) Use this to override the default service endpoint URL dms (String) Use this to override the default service endpoint URL docdb (String) Use this to override the default service endpoint URL drs (String) Use this to override the default service endpoint URL ds (String) Use this to override the default service endpoint URL dynamodb (String) Use this to override the default service endpoint URL dynamodbstreams (String) Use this to override the default service endpoint URL ebs (String) Use this to override the default service endpoint URL ec2 (String) Use this to override the default service endpoint URL ec2instanceconnect (String) Use this to override the default service endpoint URL ecr (String) Use this to override the default service endpoint URL ecrpublic (String) Use this to override the default service endpoint URL ecs (String) Use this to override the default service endpoint URL efs (String) Use this to override the default service endpoint URL eks (String) Use this to override the default service endpoint URL elasticache (String) Use this to override the default service endpoint URL elasticbeanstalk (String) Use this to override the default service endpoint URL elasticinference (String) Use this to override the default service endpoint URL elasticloadbalancing (String) Use this to override the default service endpoint URL elasticloadbalancingv2 (String) Use this to override the default service endpoint URL elasticsearch (String) Use this to override the default service endpoint URL elasticsearchservice (String) Use this to override the default service endpoint URL elastictranscoder (String) Use this to override the default service endpoint URL elb (String) Use this to override the default service endpoint URL elbv2 (String) Use this to override the default service endpoint URL emr (String) Use this to override the default service endpoint URL emrcontainers (String) Use this to override the default service endpoint URL es (String) Use this to override the default service endpoint URL eventbridge (String) Use this to override the default service endpoint URL events (String) Use this to override the default service endpoint URL evidently (String) Use this to override the default service endpoint URL finspace (String) Use this to override the default service endpoint URL finspacedata (String) Use this to override the default service endpoint URL firehose (String) Use this to override the default service endpoint URL fis (String) Use this to override the default service endpoint URL fms (String) Use this to override the default service endpoint URL forecast (String) Use this to override the default service endpoint URL forecastquery (String) Use this to override the default service endpoint URL forecastqueryservice (String) Use this to override the default service endpoint URL forecastservice (String) Use this to override the default service endpoint URL frauddetector (String) Use this to override the default service endpoint URL fsx (String) Use this to override the default service endpoint URL gamelift (String) Use this to override the default service endpoint URL glacier (String) Use this to override the default service endpoint URL globalaccelerator (String) Use this to override the default service endpoint URL glue (String) Use this to override the default service endpoint URL gluedatabrew (String) Use this to override the default service endpoint URL grafana (String) Use this to override the default service endpoint URL greengrass (String) Use this to override the default service endpoint URL greengrassv2 (String) Use this to override the default service endpoint URL groundstation (String) Use this to override the default service endpoint URL guardduty (String) Use this to override the default service endpoint URL health (String) Use this to override the default service endpoint URL healthlake (String) Use this to override the default service endpoint URL honeycode (String) Use this to override the default service endpoint URL iam (String) Use this to override the default service endpoint URL identitystore (String) Use this to override the default service endpoint URL imagebuilder (String) Use this to override the default service endpoint URL inspector (String) Use this to override the default service endpoint URL inspector2 (String) Use this to override the default service endpoint URL iot (String) Use this to override the default service endpoint URL iot1clickdevices (String) Use this to override the default service endpoint URL iot1clickdevicesservice (String) Use this to override the default service endpoint URL iot1clickprojects (String) Use this to override the default service endpoint URL iotanalytics (String) Use this to override the default service endpoint URL iotdata (String) Use this to override the default service endpoint URL iotdataplane (String) Use this to override the default service endpoint URL iotdeviceadvisor (String) Use this to override the default service endpoint URL iotevents (String) Use this to override the default service endpoint URL ioteventsdata (String) Use this to override the default service endpoint URL iotfleethub (String) Use this to override the default service endpoint URL iotjobsdata (String) Use this to override the default service endpoint URL iotjobsdataplane (String) Use this to override the default service endpoint URL iotsecuretunneling (String) Use this to override the default service endpoint URL iotsitewise (String) Use this to override the default service endpoint URL iotthingsgraph (String) Use this to override the default service endpoint URL iottwinmaker (String) Use this to override the default service endpoint URL iotwireless (String) Use this to override the default service endpoint URL ivs (String) Use this to override the default service endpoint URL kafka (String) Use this to override the default service endpoint URL kafkaconnect (String) Use this to override the default service endpoint URL kendra (String) Use this to override the default service endpoint URL keyspaces (String) Use this to override the default service endpoint URL kinesis (String) Use this to override the default service endpoint URL kinesisanalytics (String) Use this to override the default service endpoint URL kinesisanalyticsv2 (String) Use this to override the default service endpoint URL kinesisvideo (String) Use this to override the default service endpoint URL kinesisvideoarchivedmedia (String) Use this to override the default service endpoint URL kinesisvideomedia (String) Use this to override the default service endpoint URL kinesisvideosignaling (String) Use this to override the default service endpoint URL kinesisvideosignalingchannels (String) Use this to override the default service endpoint URL kms (String) Use this to override the default service endpoint URL lakeformation (String) Use this to override the default service endpoint URL lambda (String) Use this to override the default service endpoint URL lexmodelbuilding (String) Use this to override the default service endpoint URL lexmodelbuildingservice (String) Use this to override the default service endpoint URL lexmodels (String) Use this to override the default service endpoint URL lexmodelsv2 (String) Use this to override the default service endpoint URL lexruntime (String) Use this to override the default service endpoint URL lexruntimeservice (String) Use this to override the default service endpoint URL lexruntimev2 (String) Use this to override the default service endpoint URL lexv2models (String) Use this to override the default service endpoint URL lexv2runtime (String) Use this to override the default service endpoint URL licensemanager (String) Use this to override the default service endpoint URL lightsail (String) Use this to override the default service endpoint URL location (String) Use this to override the default service endpoint URL locationservice (String) Use this to override the default service endpoint URL logs (String) Use this to override the default service endpoint URL lookoutequipment (String) Use this to override the default service endpoint URL lookoutforvision (String) Use this to override the default service endpoint URL lookoutmetrics (String) Use this to override the default service endpoint URL lookoutvision (String) Use this to override the default service endpoint URL machinelearning (String) Use this to override the default service endpoint URL macie (String) Use this to override the default service endpoint URL macie2 (String) Use this to override the default service endpoint URL managedblockchain (String) Use this to override the default service endpoint URL managedgrafana (String) Use this to override the default service endpoint URL marketplacecatalog (String) Use this to override the default service endpoint URL marketplacecommerceanalytics (String) Use this to override the default service endpoint URL marketplaceentitlement (String) Use this to override the default service endpoint URL marketplaceentitlementservice (String) Use this to override the default service endpoint URL marketplacemetering (String) Use this to override the default service endpoint URL mediaconnect (String) Use this to override the default service endpoint URL mediaconvert (String) Use this to override the default service endpoint URL medialive (String) Use this to override the default service endpoint URL mediapackage (String) Use this to override the default service endpoint URL mediapackagevod (String) Use this to override the default service endpoint URL mediastore (String) Use this to override the default service endpoint URL mediastoredata (String) Use this to override the default service endpoint URL mediatailor (String) Use this to override the default service endpoint URL memorydb (String) Use this to override the default service endpoint URL meteringmarketplace (String) Use this to override the default service endpoint URL mgh (String) Use this to override the default service endpoint URL mgn (String) Use this to override the default service endpoint URL migrationhub (String) Use this to override the default service endpoint URL migrationhubconfig (String) Use this to override the default service endpoint URL migrationhubrefactorspaces (String) Use this to override the default service endpoint URL migrationhubstrategy (String) Use this to override the default service endpoint URL migrationhubstrategyrecommendations (String) Use this to override the default service endpoint URL mobile (String) Use this to override the default service endpoint URL mq (String) Use this to override the default service endpoint URL mturk (String) Use this to override the default service endpoint URL mwaa (String) Use this to override the default service endpoint URL neptune (String) Use this to override the default service endpoint URL networkfirewall (String) Use this to override the default service endpoint URL networkmanager (String) Use this to override the default service endpoint URL nimble (String) Use this to override the default service endpoint URL nimblestudio (String) Use this to override the default service endpoint URL opensearch (String) Use this to override the default service endpoint URL opensearchservice (String) Use this to override the default service endpoint URL opsworks (String) Use this to override the default service endpoint URL opsworkscm (String) Use this to override the default service endpoint URL organizations (String) Use this to override the default service endpoint URL outposts (String) Use this to override the default service endpoint URL paas (String) Use this to override the default service endpoint URL panorama (String) Use this to override the default service endpoint URL personalize (String) Use this to override the default service endpoint URL personalizeevents (String) Use this to override the default service endpoint URL personalizeruntime (String) Use this to override the default service endpoint URL pi (String) Use this to override the default service endpoint URL pinpoint (String) Use this to override the default service endpoint URL pinpointemail (String) Use this to override the default service endpoint URL pinpointsmsvoice (String) Use this to override the default service endpoint URL polly (String) Use this to override the default service endpoint URL pricing (String) Use this to override the default service endpoint URL prometheus (String) Use this to override the default service endpoint URL prometheusservice (String) Use this to override the default service endpoint URL proton (String) Use this to override the default service endpoint URL qldb (String) Use this to override the default service endpoint URL qldbsession (String) Use this to override the default service endpoint URL quicksight (String) Use this to override the default service endpoint URL ram (String) Use this to override the default service endpoint URL rbin (String) Use this to override the default service endpoint URL rds (String) Use this to override the default service endpoint URL rdsdata (String) Use this to override the default service endpoint URL rdsdataservice (String) Use this to override the default service endpoint URL recyclebin (String) Use this to override the default service endpoint URL redshift (String) Use this to override the default service endpoint URL redshiftdata (String) Use this to override the default service endpoint URL redshiftdataapiservice (String) Use this to override the default service endpoint URL rekognition (String) Use this to override the default service endpoint URL resiliencehub (String) Use this to override the default service endpoint URL resourcegroups (String) Use this to override the default service endpoint URL resourcegroupstagging (String) Use this to override the default service endpoint URL resourcegroupstaggingapi (String) Use this to override the default service endpoint URL robomaker (String) Use this to override the default service endpoint URL route53 (String) Use this to override the default service endpoint URL route53domains (String) Use this to override the default service endpoint URL route53recoverycluster (String) Use this to override the default service endpoint URL route53recoverycontrolconfig (String) Use this to override the default service endpoint URL route53recoveryreadiness (String) Use this to override the default service endpoint URL route53resolver (String) Use this to override the default service endpoint URL rum (String) Use this to override the default service endpoint URL s3 (String) Use this to override the default service endpoint URL s3api (String) Use this to override the default service endpoint URL s3control (String) Use this to override the default service endpoint URL s3outposts (String) Use this to override the default service endpoint URL sagemaker (String) Use this to override the default service endpoint URL sagemakera2iruntime (String) Use this to override the default service endpoint URL sagemakeredge (String) Use this to override the default service endpoint URL sagemakeredgemanager (String) Use this to override the default service endpoint URL sagemakerfeaturestoreruntime (String) Use this to override the default service endpoint URL sagemakerruntime (String) Use this to override the default service endpoint URL savingsplans (String) Use this to override the default service endpoint URL schemas (String) Use this to override the default service endpoint URL sdb (String) Use this to override the default service endpoint URL secretsmanager (String) Use this to override the default service endpoint URL securityhub (String) Use this to override the default service endpoint URL serverlessapplicationrepository (String) Use this to override the default service endpoint URL serverlessapprepo (String) Use this to override the default service endpoint URL serverlessrepo (String) Use this to override the default service endpoint URL servicecatalog (String) Use this to override the default service endpoint URL servicecatalogappregistry (String) Use this to override the default service endpoint URL servicediscovery (String) Use this to override the default service endpoint URL servicequotas (String) Use this to override the default service endpoint URL ses (String) Use this to override the default service endpoint URL sesv2 (String) Use this to override the default service endpoint URL sfn (String) Use this to override the default service endpoint URL shield (String) Use this to override the default service endpoint URL signer (String) Use this to override the default service endpoint URL simpledb (String) Use this to override the default service endpoint URL sms (String) Use this to override the default service endpoint URL snowball (String) Use this to override the default service endpoint URL snowdevicemanagement (String) Use this to override the default service endpoint URL sns (String) Use this to override the default service endpoint URL sqs (String) Use this to override the default service endpoint URL ssm (String) Use this to override the default service endpoint URL ssmcontacts (String) Use this to override the default service endpoint URL ssmincidents (String) Use this to override the default service endpoint URL sso (String) Use this to override the default service endpoint URL ssoadmin (String) Use this to override the default service endpoint URL ssooidc (String) Use this to override the default service endpoint URL stepfunctions (String) Use this to override the default service endpoint URL storagegateway (String) Use this to override the default service endpoint URL sts (String) Use this to override the default service endpoint URL support (String) Use this to override the default service endpoint URL swf (String) Use this to override the default service endpoint URL synthetics (String) Use this to override the default service endpoint URL textract (String) Use this to override the default service endpoint URL timestreamquery (String) Use this to override the default service endpoint URL timestreamwrite (String) Use this to override the default service endpoint URL transcribe (String) Use this to override the default service endpoint URL transcribeservice (String) Use this to override the default service endpoint URL transcribestreaming (String) Use this to override the default service endpoint URL transcribestreamingservice (String) Use this to override the default service endpoint URL transfer (String) Use this to override the default service endpoint URL translate (String) Use this to override the default service endpoint URL voiceid (String) Use this to override the default service endpoint URL waf (String) Use this to override the default service endpoint URL wafregional (String) Use this to override the default service endpoint URL wafv2 (String) Use this to override the default service endpoint URL wellarchitected (String) Use this to override the default service endpoint URL wisdom (String) Use this to override the default service endpoint URL workdocs (String) Use this to override the default service endpoint URL worklink (String) Use this to override the default service endpoint URL workmail (String) Use this to override the default service endpoint URL workmailmessageflow (String) Use this to override the default service endpoint URL workspaces (String) Use this to override the default service endpoint URL workspacesweb (String) Use this to override the default service endpoint URL xray (String) Use this to override the default service endpoint URL Nested Schema for ignore_tags # Optional: key_prefixes (Set of String) Resource tag key prefixes to ignore across all resources. keys (Set of String) Resource tag keys to ignore across all resources.","title":"aws Provider"},{"location":"#aws-provider","text":"","title":"aws Provider"},{"location":"#schema","text":"","title":"Schema"},{"location":"#optional","text":"access_key (String) The access key for API operations. You can retrieve this from the 'Security & Credentials' section of the AWS console. allowed_account_ids (Set of String) assume_role (Block List, Max: 1) (see below for nested schema ) assume_role_with_web_identity (Block List, Max: 1) (see below for nested schema ) custom_ca_bundle (String) File containing custom root and intermediate certificates. Can also be configured using the AWS_CA_BUNDLE environment variable. (Setting ca_bundle in the shared config file is not supported.) default_tags (Block List, Max: 1) Configuration block with settings to default resource tags across all resources. (see below for nested schema ) ec2_metadata_service_endpoint (String) Address of the EC2 metadata service endpoint to use. Can also be configured using the AWS_EC2_METADATA_SERVICE_ENDPOINT environment variable. ec2_metadata_service_endpoint_mode (String) Protocol to use with EC2 metadata service endpoint.Valid values are IPv4 and IPv6 . Can also be configured using the AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE environment variable. endpoints (Block Set) (see below for nested schema ) forbidden_account_ids (Set of String) http_proxy (String) The address of an HTTP proxy to use when accessing the AWS API. Can also be configured using the HTTP_PROXY or HTTPS_PROXY environment variables. ignore_tags (Block List, Max: 1) Configuration block with settings to ignore resource tags across all resources. (see below for nested schema ) insecure (Boolean) Explicitly allow the provider to perform \"insecure\" SSL requests. If omitted, default value is false max_retries (Number) The maximum number of times an AWS API request is being executed. If the API request still fails, an error is thrown. profile (String) The profile for API operations. If not set, the default profile created with aws configure will be used. region (String) The region where AWS operations will take place. Examples are us-east-1, us-west-2, etc. s3_force_path_style (Boolean, Deprecated) Set this to true to enable the request to use path-style addressing, i.e., https://s3.amazonaws.com/BUCKET/KEY. By default, the S3 client will use virtual hosted bucket addressing when possible (https://BUCKET.s3.amazonaws.com/KEY). Specific to the Amazon S3 service. s3_use_path_style (Boolean) Set this to true to enable the request to use path-style addressing, i.e., https://s3.amazonaws.com/BUCKET/KEY. By default, the S3 client will use virtual hosted bucket addressing when possible (https://BUCKET.s3.amazonaws.com/KEY). Specific to the Amazon S3 service. secret_key (String) The secret key for API operations. You can retrieve this from the 'Security & Credentials' section of the AWS console. shared_config_files (List of String) List of paths to shared config files. If not set, defaults to [~/.aws/config]. shared_credentials_file (String, Deprecated) The path to the shared credentials file. If not set, defaults to ~/.aws/credentials. shared_credentials_files (List of String) List of paths to shared credentials files. If not set, defaults to [~/.aws/credentials]. skip_credentials_validation (Boolean) Skip the credentials validation via STS API. Used for AWS API implementations that do not have STS available/implemented. skip_get_ec2_platforms (Boolean) Skip getting the supported EC2 platforms. Used by users that don't have ec2:DescribeAccountAttributes permissions. skip_metadata_api_check (String) Skip the AWS Metadata API check. Used for AWS API implementations that do not have a metadata api endpoint. skip_region_validation (Boolean) Skip static validation of region name. Used by users of alternative AWS-like APIs or users w/ access to regions that are not public (yet). skip_requesting_account_id (Boolean) Skip requesting the account ID. Used for AWS API implementations that do not have IAM/STS API and/or metadata API. sts_region (String) The region where AWS STS operations will take place. Examples are us-east-1 and us-west-2. token (String) session token. A session token is only required if you are using temporary security credentials. use_dualstack_endpoint (Boolean) Resolve an endpoint with DualStack capability use_fips_endpoint (Boolean) Resolve an endpoint with FIPS capability","title":"Optional"},{"location":"#nested-schema-for-assume_role","text":"Optional: duration (String) The duration, between 15 minutes and 12 hours, of the role session. Valid time units are ns, us (or \u00b5s), ms, s, h, or m. duration_seconds (Number, Deprecated) The duration, in seconds, of the role session. external_id (String) A unique identifier that might be required when you assume a role in another account. policy (String) IAM Policy JSON describing further restricting permissions for the IAM Role being assumed. policy_arns (Set of String) Amazon Resource Names (ARNs) of IAM Policies describing further restricting permissions for the IAM Role being assumed. role_arn (String) Amazon Resource Name (ARN) of an IAM Role to assume prior to making API calls. session_name (String) An identifier for the assumed role session. tags (Map of String) Assume role session tags. transitive_tag_keys (Set of String) Assume role session tag keys to pass to any subsequent sessions.","title":"Nested Schema for assume_role"},{"location":"#nested-schema-for-assume_role_with_web_identity","text":"Optional: duration (String) The duration, between 15 minutes and 12 hours, of the role session. Valid time units are ns, us (or \u00b5s), ms, s, h, or m. policy (String) IAM Policy JSON describing further restricting permissions for the IAM Role being assumed. policy_arns (Set of String) Amazon Resource Names (ARNs) of IAM Policies describing further restricting permissions for the IAM Role being assumed. role_arn (String) Amazon Resource Name (ARN) of an IAM Role to assume prior to making API calls. session_name (String) An identifier for the assumed role session. web_identity_token (String) web_identity_token_file (String)","title":"Nested Schema for assume_role_with_web_identity"},{"location":"#nested-schema-for-default_tags","text":"Optional: tags (Map of String) Resource tags to default across all resources","title":"Nested Schema for default_tags"},{"location":"#nested-schema-for-endpoints","text":"Optional: accessanalyzer (String) Use this to override the default service endpoint URL account (String) Use this to override the default service endpoint URL acm (String) Use this to override the default service endpoint URL acmpca (String) Use this to override the default service endpoint URL alexaforbusiness (String) Use this to override the default service endpoint URL amg (String) Use this to override the default service endpoint URL amp (String) Use this to override the default service endpoint URL amplify (String) Use this to override the default service endpoint URL amplifybackend (String) Use this to override the default service endpoint URL amplifyuibuilder (String) Use this to override the default service endpoint URL apigateway (String) Use this to override the default service endpoint URL apigatewaymanagementapi (String) Use this to override the default service endpoint URL apigatewayv2 (String) Use this to override the default service endpoint URL appautoscaling (String) Use this to override the default service endpoint URL appconfig (String) Use this to override the default service endpoint URL appconfigdata (String) Use this to override the default service endpoint URL appflow (String) Use this to override the default service endpoint URL appintegrations (String) Use this to override the default service endpoint URL appintegrationsservice (String) Use this to override the default service endpoint URL applicationautoscaling (String) Use this to override the default service endpoint URL applicationcostprofiler (String) Use this to override the default service endpoint URL applicationdiscovery (String) Use this to override the default service endpoint URL applicationdiscoveryservice (String) Use this to override the default service endpoint URL applicationinsights (String) Use this to override the default service endpoint URL appmesh (String) Use this to override the default service endpoint URL appregistry (String) Use this to override the default service endpoint URL apprunner (String) Use this to override the default service endpoint URL appstream (String) Use this to override the default service endpoint URL appsync (String) Use this to override the default service endpoint URL athena (String) Use this to override the default service endpoint URL auditmanager (String) Use this to override the default service endpoint URL augmentedairuntime (String) Use this to override the default service endpoint URL autoscaling (String) Use this to override the default service endpoint URL autoscalingplans (String) Use this to override the default service endpoint URL backup (String) Use this to override the default service endpoint URL backupgateway (String) Use this to override the default service endpoint URL batch (String) Use this to override the default service endpoint URL billingconductor (String) Use this to override the default service endpoint URL braket (String) Use this to override the default service endpoint URL budgets (String) Use this to override the default service endpoint URL ce (String) Use this to override the default service endpoint URL chime (String) Use this to override the default service endpoint URL chimesdkidentity (String) Use this to override the default service endpoint URL chimesdkmeetings (String) Use this to override the default service endpoint URL chimesdkmessaging (String) Use this to override the default service endpoint URL cloud9 (String) Use this to override the default service endpoint URL cloudcontrol (String) Use this to override the default service endpoint URL cloudcontrolapi (String) Use this to override the default service endpoint URL clouddirectory (String) Use this to override the default service endpoint URL cloudformation (String) Use this to override the default service endpoint URL cloudfront (String) Use this to override the default service endpoint URL cloudhsm (String) Use this to override the default service endpoint URL cloudhsmv2 (String) Use this to override the default service endpoint URL cloudsearch (String) Use this to override the default service endpoint URL cloudsearchdomain (String) Use this to override the default service endpoint URL cloudtrail (String) Use this to override the default service endpoint URL cloudwatch (String) Use this to override the default service endpoint URL cloudwatchevents (String) Use this to override the default service endpoint URL cloudwatchevidently (String) Use this to override the default service endpoint URL cloudwatchlogs (String) Use this to override the default service endpoint URL cloudwatchrum (String) Use this to override the default service endpoint URL codeartifact (String) Use this to override the default service endpoint URL codebuild (String) Use this to override the default service endpoint URL codecommit (String) Use this to override the default service endpoint URL codedeploy (String) Use this to override the default service endpoint URL codeguruprofiler (String) Use this to override the default service endpoint URL codegurureviewer (String) Use this to override the default service endpoint URL codepipeline (String) Use this to override the default service endpoint URL codestar (String) Use this to override the default service endpoint URL codestarconnections (String) Use this to override the default service endpoint URL codestarnotifications (String) Use this to override the default service endpoint URL cognitoidentity (String) Use this to override the default service endpoint URL cognitoidentityprovider (String) Use this to override the default service endpoint URL cognitoidp (String) Use this to override the default service endpoint URL cognitosync (String) Use this to override the default service endpoint URL comprehend (String) Use this to override the default service endpoint URL comprehendmedical (String) Use this to override the default service endpoint URL computeoptimizer (String) Use this to override the default service endpoint URL config (String) Use this to override the default service endpoint URL configservice (String) Use this to override the default service endpoint URL connect (String) Use this to override the default service endpoint URL connectcontactlens (String) Use this to override the default service endpoint URL connectparticipant (String) Use this to override the default service endpoint URL connectwisdomservice (String) Use this to override the default service endpoint URL costandusagereportservice (String) Use this to override the default service endpoint URL costexplorer (String) Use this to override the default service endpoint URL cur (String) Use this to override the default service endpoint URL customerprofiles (String) Use this to override the default service endpoint URL databasemigration (String) Use this to override the default service endpoint URL databasemigrationservice (String) Use this to override the default service endpoint URL databrew (String) Use this to override the default service endpoint URL dataexchange (String) Use this to override the default service endpoint URL datapipeline (String) Use this to override the default service endpoint URL datasync (String) Use this to override the default service endpoint URL dax (String) Use this to override the default service endpoint URL deploy (String) Use this to override the default service endpoint URL detective (String) Use this to override the default service endpoint URL devicefarm (String) Use this to override the default service endpoint URL devopsguru (String) Use this to override the default service endpoint URL directconnect (String) Use this to override the default service endpoint URL directoryservice (String) Use this to override the default service endpoint URL discovery (String) Use this to override the default service endpoint URL dlm (String) Use this to override the default service endpoint URL dms (String) Use this to override the default service endpoint URL docdb (String) Use this to override the default service endpoint URL drs (String) Use this to override the default service endpoint URL ds (String) Use this to override the default service endpoint URL dynamodb (String) Use this to override the default service endpoint URL dynamodbstreams (String) Use this to override the default service endpoint URL ebs (String) Use this to override the default service endpoint URL ec2 (String) Use this to override the default service endpoint URL ec2instanceconnect (String) Use this to override the default service endpoint URL ecr (String) Use this to override the default service endpoint URL ecrpublic (String) Use this to override the default service endpoint URL ecs (String) Use this to override the default service endpoint URL efs (String) Use this to override the default service endpoint URL eks (String) Use this to override the default service endpoint URL elasticache (String) Use this to override the default service endpoint URL elasticbeanstalk (String) Use this to override the default service endpoint URL elasticinference (String) Use this to override the default service endpoint URL elasticloadbalancing (String) Use this to override the default service endpoint URL elasticloadbalancingv2 (String) Use this to override the default service endpoint URL elasticsearch (String) Use this to override the default service endpoint URL elasticsearchservice (String) Use this to override the default service endpoint URL elastictranscoder (String) Use this to override the default service endpoint URL elb (String) Use this to override the default service endpoint URL elbv2 (String) Use this to override the default service endpoint URL emr (String) Use this to override the default service endpoint URL emrcontainers (String) Use this to override the default service endpoint URL es (String) Use this to override the default service endpoint URL eventbridge (String) Use this to override the default service endpoint URL events (String) Use this to override the default service endpoint URL evidently (String) Use this to override the default service endpoint URL finspace (String) Use this to override the default service endpoint URL finspacedata (String) Use this to override the default service endpoint URL firehose (String) Use this to override the default service endpoint URL fis (String) Use this to override the default service endpoint URL fms (String) Use this to override the default service endpoint URL forecast (String) Use this to override the default service endpoint URL forecastquery (String) Use this to override the default service endpoint URL forecastqueryservice (String) Use this to override the default service endpoint URL forecastservice (String) Use this to override the default service endpoint URL frauddetector (String) Use this to override the default service endpoint URL fsx (String) Use this to override the default service endpoint URL gamelift (String) Use this to override the default service endpoint URL glacier (String) Use this to override the default service endpoint URL globalaccelerator (String) Use this to override the default service endpoint URL glue (String) Use this to override the default service endpoint URL gluedatabrew (String) Use this to override the default service endpoint URL grafana (String) Use this to override the default service endpoint URL greengrass (String) Use this to override the default service endpoint URL greengrassv2 (String) Use this to override the default service endpoint URL groundstation (String) Use this to override the default service endpoint URL guardduty (String) Use this to override the default service endpoint URL health (String) Use this to override the default service endpoint URL healthlake (String) Use this to override the default service endpoint URL honeycode (String) Use this to override the default service endpoint URL iam (String) Use this to override the default service endpoint URL identitystore (String) Use this to override the default service endpoint URL imagebuilder (String) Use this to override the default service endpoint URL inspector (String) Use this to override the default service endpoint URL inspector2 (String) Use this to override the default service endpoint URL iot (String) Use this to override the default service endpoint URL iot1clickdevices (String) Use this to override the default service endpoint URL iot1clickdevicesservice (String) Use this to override the default service endpoint URL iot1clickprojects (String) Use this to override the default service endpoint URL iotanalytics (String) Use this to override the default service endpoint URL iotdata (String) Use this to override the default service endpoint URL iotdataplane (String) Use this to override the default service endpoint URL iotdeviceadvisor (String) Use this to override the default service endpoint URL iotevents (String) Use this to override the default service endpoint URL ioteventsdata (String) Use this to override the default service endpoint URL iotfleethub (String) Use this to override the default service endpoint URL iotjobsdata (String) Use this to override the default service endpoint URL iotjobsdataplane (String) Use this to override the default service endpoint URL iotsecuretunneling (String) Use this to override the default service endpoint URL iotsitewise (String) Use this to override the default service endpoint URL iotthingsgraph (String) Use this to override the default service endpoint URL iottwinmaker (String) Use this to override the default service endpoint URL iotwireless (String) Use this to override the default service endpoint URL ivs (String) Use this to override the default service endpoint URL kafka (String) Use this to override the default service endpoint URL kafkaconnect (String) Use this to override the default service endpoint URL kendra (String) Use this to override the default service endpoint URL keyspaces (String) Use this to override the default service endpoint URL kinesis (String) Use this to override the default service endpoint URL kinesisanalytics (String) Use this to override the default service endpoint URL kinesisanalyticsv2 (String) Use this to override the default service endpoint URL kinesisvideo (String) Use this to override the default service endpoint URL kinesisvideoarchivedmedia (String) Use this to override the default service endpoint URL kinesisvideomedia (String) Use this to override the default service endpoint URL kinesisvideosignaling (String) Use this to override the default service endpoint URL kinesisvideosignalingchannels (String) Use this to override the default service endpoint URL kms (String) Use this to override the default service endpoint URL lakeformation (String) Use this to override the default service endpoint URL lambda (String) Use this to override the default service endpoint URL lexmodelbuilding (String) Use this to override the default service endpoint URL lexmodelbuildingservice (String) Use this to override the default service endpoint URL lexmodels (String) Use this to override the default service endpoint URL lexmodelsv2 (String) Use this to override the default service endpoint URL lexruntime (String) Use this to override the default service endpoint URL lexruntimeservice (String) Use this to override the default service endpoint URL lexruntimev2 (String) Use this to override the default service endpoint URL lexv2models (String) Use this to override the default service endpoint URL lexv2runtime (String) Use this to override the default service endpoint URL licensemanager (String) Use this to override the default service endpoint URL lightsail (String) Use this to override the default service endpoint URL location (String) Use this to override the default service endpoint URL locationservice (String) Use this to override the default service endpoint URL logs (String) Use this to override the default service endpoint URL lookoutequipment (String) Use this to override the default service endpoint URL lookoutforvision (String) Use this to override the default service endpoint URL lookoutmetrics (String) Use this to override the default service endpoint URL lookoutvision (String) Use this to override the default service endpoint URL machinelearning (String) Use this to override the default service endpoint URL macie (String) Use this to override the default service endpoint URL macie2 (String) Use this to override the default service endpoint URL managedblockchain (String) Use this to override the default service endpoint URL managedgrafana (String) Use this to override the default service endpoint URL marketplacecatalog (String) Use this to override the default service endpoint URL marketplacecommerceanalytics (String) Use this to override the default service endpoint URL marketplaceentitlement (String) Use this to override the default service endpoint URL marketplaceentitlementservice (String) Use this to override the default service endpoint URL marketplacemetering (String) Use this to override the default service endpoint URL mediaconnect (String) Use this to override the default service endpoint URL mediaconvert (String) Use this to override the default service endpoint URL medialive (String) Use this to override the default service endpoint URL mediapackage (String) Use this to override the default service endpoint URL mediapackagevod (String) Use this to override the default service endpoint URL mediastore (String) Use this to override the default service endpoint URL mediastoredata (String) Use this to override the default service endpoint URL mediatailor (String) Use this to override the default service endpoint URL memorydb (String) Use this to override the default service endpoint URL meteringmarketplace (String) Use this to override the default service endpoint URL mgh (String) Use this to override the default service endpoint URL mgn (String) Use this to override the default service endpoint URL migrationhub (String) Use this to override the default service endpoint URL migrationhubconfig (String) Use this to override the default service endpoint URL migrationhubrefactorspaces (String) Use this to override the default service endpoint URL migrationhubstrategy (String) Use this to override the default service endpoint URL migrationhubstrategyrecommendations (String) Use this to override the default service endpoint URL mobile (String) Use this to override the default service endpoint URL mq (String) Use this to override the default service endpoint URL mturk (String) Use this to override the default service endpoint URL mwaa (String) Use this to override the default service endpoint URL neptune (String) Use this to override the default service endpoint URL networkfirewall (String) Use this to override the default service endpoint URL networkmanager (String) Use this to override the default service endpoint URL nimble (String) Use this to override the default service endpoint URL nimblestudio (String) Use this to override the default service endpoint URL opensearch (String) Use this to override the default service endpoint URL opensearchservice (String) Use this to override the default service endpoint URL opsworks (String) Use this to override the default service endpoint URL opsworkscm (String) Use this to override the default service endpoint URL organizations (String) Use this to override the default service endpoint URL outposts (String) Use this to override the default service endpoint URL paas (String) Use this to override the default service endpoint URL panorama (String) Use this to override the default service endpoint URL personalize (String) Use this to override the default service endpoint URL personalizeevents (String) Use this to override the default service endpoint URL personalizeruntime (String) Use this to override the default service endpoint URL pi (String) Use this to override the default service endpoint URL pinpoint (String) Use this to override the default service endpoint URL pinpointemail (String) Use this to override the default service endpoint URL pinpointsmsvoice (String) Use this to override the default service endpoint URL polly (String) Use this to override the default service endpoint URL pricing (String) Use this to override the default service endpoint URL prometheus (String) Use this to override the default service endpoint URL prometheusservice (String) Use this to override the default service endpoint URL proton (String) Use this to override the default service endpoint URL qldb (String) Use this to override the default service endpoint URL qldbsession (String) Use this to override the default service endpoint URL quicksight (String) Use this to override the default service endpoint URL ram (String) Use this to override the default service endpoint URL rbin (String) Use this to override the default service endpoint URL rds (String) Use this to override the default service endpoint URL rdsdata (String) Use this to override the default service endpoint URL rdsdataservice (String) Use this to override the default service endpoint URL recyclebin (String) Use this to override the default service endpoint URL redshift (String) Use this to override the default service endpoint URL redshiftdata (String) Use this to override the default service endpoint URL redshiftdataapiservice (String) Use this to override the default service endpoint URL rekognition (String) Use this to override the default service endpoint URL resiliencehub (String) Use this to override the default service endpoint URL resourcegroups (String) Use this to override the default service endpoint URL resourcegroupstagging (String) Use this to override the default service endpoint URL resourcegroupstaggingapi (String) Use this to override the default service endpoint URL robomaker (String) Use this to override the default service endpoint URL route53 (String) Use this to override the default service endpoint URL route53domains (String) Use this to override the default service endpoint URL route53recoverycluster (String) Use this to override the default service endpoint URL route53recoverycontrolconfig (String) Use this to override the default service endpoint URL route53recoveryreadiness (String) Use this to override the default service endpoint URL route53resolver (String) Use this to override the default service endpoint URL rum (String) Use this to override the default service endpoint URL s3 (String) Use this to override the default service endpoint URL s3api (String) Use this to override the default service endpoint URL s3control (String) Use this to override the default service endpoint URL s3outposts (String) Use this to override the default service endpoint URL sagemaker (String) Use this to override the default service endpoint URL sagemakera2iruntime (String) Use this to override the default service endpoint URL sagemakeredge (String) Use this to override the default service endpoint URL sagemakeredgemanager (String) Use this to override the default service endpoint URL sagemakerfeaturestoreruntime (String) Use this to override the default service endpoint URL sagemakerruntime (String) Use this to override the default service endpoint URL savingsplans (String) Use this to override the default service endpoint URL schemas (String) Use this to override the default service endpoint URL sdb (String) Use this to override the default service endpoint URL secretsmanager (String) Use this to override the default service endpoint URL securityhub (String) Use this to override the default service endpoint URL serverlessapplicationrepository (String) Use this to override the default service endpoint URL serverlessapprepo (String) Use this to override the default service endpoint URL serverlessrepo (String) Use this to override the default service endpoint URL servicecatalog (String) Use this to override the default service endpoint URL servicecatalogappregistry (String) Use this to override the default service endpoint URL servicediscovery (String) Use this to override the default service endpoint URL servicequotas (String) Use this to override the default service endpoint URL ses (String) Use this to override the default service endpoint URL sesv2 (String) Use this to override the default service endpoint URL sfn (String) Use this to override the default service endpoint URL shield (String) Use this to override the default service endpoint URL signer (String) Use this to override the default service endpoint URL simpledb (String) Use this to override the default service endpoint URL sms (String) Use this to override the default service endpoint URL snowball (String) Use this to override the default service endpoint URL snowdevicemanagement (String) Use this to override the default service endpoint URL sns (String) Use this to override the default service endpoint URL sqs (String) Use this to override the default service endpoint URL ssm (String) Use this to override the default service endpoint URL ssmcontacts (String) Use this to override the default service endpoint URL ssmincidents (String) Use this to override the default service endpoint URL sso (String) Use this to override the default service endpoint URL ssoadmin (String) Use this to override the default service endpoint URL ssooidc (String) Use this to override the default service endpoint URL stepfunctions (String) Use this to override the default service endpoint URL storagegateway (String) Use this to override the default service endpoint URL sts (String) Use this to override the default service endpoint URL support (String) Use this to override the default service endpoint URL swf (String) Use this to override the default service endpoint URL synthetics (String) Use this to override the default service endpoint URL textract (String) Use this to override the default service endpoint URL timestreamquery (String) Use this to override the default service endpoint URL timestreamwrite (String) Use this to override the default service endpoint URL transcribe (String) Use this to override the default service endpoint URL transcribeservice (String) Use this to override the default service endpoint URL transcribestreaming (String) Use this to override the default service endpoint URL transcribestreamingservice (String) Use this to override the default service endpoint URL transfer (String) Use this to override the default service endpoint URL translate (String) Use this to override the default service endpoint URL voiceid (String) Use this to override the default service endpoint URL waf (String) Use this to override the default service endpoint URL wafregional (String) Use this to override the default service endpoint URL wafv2 (String) Use this to override the default service endpoint URL wellarchitected (String) Use this to override the default service endpoint URL wisdom (String) Use this to override the default service endpoint URL workdocs (String) Use this to override the default service endpoint URL worklink (String) Use this to override the default service endpoint URL workmail (String) Use this to override the default service endpoint URL workmailmessageflow (String) Use this to override the default service endpoint URL workspaces (String) Use this to override the default service endpoint URL workspacesweb (String) Use this to override the default service endpoint URL xray (String) Use this to override the default service endpoint URL","title":"Nested Schema for endpoints"},{"location":"#nested-schema-for-ignore_tags","text":"Optional: key_prefixes (Set of String) Resource tag key prefixes to ignore across all resources. keys (Set of String) Resource tag keys to ignore across all resources.","title":"Nested Schema for ignore_tags"},{"location":"c2/","text":"Terraform Rockit Cloud Provider # \u0410\u0434\u0430\u043f\u0442\u0430\u0446\u0438\u044f Terraform AWS Provider \u043e\u0442 HashiCorp \u043f\u043e\u0434 Rockit Cloud . Upstream Name Upstream Version Terraform AWS Provider 4.14.0 \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u041e\u0431\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u041d\u0430\u0447\u0430\u043b\u043e \u0440\u0430\u0431\u043e\u0442\u044b \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0438 \u0437\u0430\u043f\u0443\u0441\u043a \u043b\u0438\u043d\u0442\u0435\u0440\u043e\u0432 aws-sdk-go \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0432\u0435\u0440\u0441\u0438\u0438 aws-sdk-go \u0422\u0435\u0441\u0442\u044b Unit Acceptance \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0417\u0430\u043f\u0443\u0441\u043a \u043b\u0438\u043d\u0442\u0435\u0440\u043e\u0432 \u0414\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f website_unsupported \u0412\u044b\u043f\u0443\u0441\u043a \u0440\u0435\u043b\u0438\u0437\u0430 \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u0412\u0435\u0440\u0441\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0420\u0435\u043b\u0438\u0437 \u041f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u0432 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u043c terraform registry \u041f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u0432 private terraform registry \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 s3 \u0431\u0430\u043a\u0435\u0442\u0430 \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043d\u043e\u0432\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0438 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u041b\u043e\u043a\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0431\u043e\u0440\u043a\u0430 TODO \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f # Terraform 0.13+ (\u0437\u0430\u043f\u0443\u0441\u043a \u043f\u0440\u0438\u0435\u043c\u043e\u0447\u043d\u044b\u0445 \u0442\u0435\u0441\u0442\u043e\u0432) Go 1.21 (\u0441\u0431\u043e\u0440\u043a\u0430 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430) Docker (\u0437\u0430\u043f\u0443\u0441\u043a \u043b\u0438\u043d\u0442\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438) \u041e\u0431\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f # \u041f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440 - \u044d\u0442\u043e \u043f\u043b\u0430\u0433\u0438\u043d \u0434\u043b\u044f Terraform , \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c\u0438 \u043d\u0435\u043a\u043e\u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0438\u0441\u0430 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043e\u0431\u043b\u0430\u043a\u0430 \u0438\u043b\u0438 \u0411\u0414) \u0447\u0435\u0440\u0435\u0437 \u0435\u0433\u043e API. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0440\u0435\u0441\u0443\u0440\u0441\u0430 \u0432 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u0445\u0435\u043c\u0430 \u0438 CRUD \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438. \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 API \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043c\u043e\u0434\u0443\u043b\u044f. Terraform Rockit Cloud Provider \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442\u0441\u044f \u043d\u0430 \u0431\u0430\u0437\u0435 Terraform AWS Provider . \u0422\u0430\u043a\u0436\u0435 \u0441\u043e\u0437\u0434\u0430\u043d \u0444\u043e\u0440\u043a \u043c\u043e\u0434\u0443\u043b\u044f \u0441 AWS API: C2Devel/aws-sdk-go . \u0414\u043b\u044f \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u0432 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u043c terraform registry \u043f\u043e\u0434 \u043d\u043e\u0432\u044b\u043c \u0438\u043c\u0435\u043d\u0435\u043c (\u0440\u0430\u043d\u0435\u0435 - aws ) \u0444\u043e\u0440\u043a \u043f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d \u0432 terraform-provider-rockitcloud . \u041e\u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440: https://registry.terraform.io/providers/C2Devel/rockitcloud \u041d\u0430\u0447\u0430\u043b\u043e \u0440\u0430\u0431\u043e\u0442\u044b # \u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u043e\u043c \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 go (\u0441\u043c. \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f ). \u041a\u043b\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f \u0438 \u0441\u0431\u043e\u0440\u043a\u0430 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430: $ git clone git@github.com:C2Devel/terraform-provider-rockitcloud.git && cd terraform-provider-rockitcloud ... $ make build \u041f\u043e\u0441\u043b\u0435 \u0441\u0431\u043e\u0440\u043a\u0438 \u0430\u0440\u0442\u0435\u0444\u0430\u043a\u0442 terraform-provider-aws \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 $GOPATH/bin . \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f $GOPATH : $ export GOPATH=$(go env GOPATH) $ ls $GOPATH/bin/terraform-provider-aws ... \u0412\u0430\u0436\u043d\u043e! make build \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043a\u043e\u043c\u0430\u043d\u0434\u0443 go install , \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043d\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u043c\u044f \u0430\u0440\u0442\u0435\u0444\u0430\u043a\u0442\u0430 - terraform-provider-aws . \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f dev \u0441\u0431\u043e\u0440\u043e\u043a. \u0414\u043b\u044f \u0441\u0431\u043e\u0440\u043a\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u0443: $ go build -o terraform-provider-rockitcloud \u0410\u0440\u0442\u0435\u0444\u0430\u043a\u0442 terraform-provider-rockitcloud \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u043d \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0438 \u0437\u0430\u043f\u0443\u0441\u043a \u043b\u0438\u043d\u0442\u0435\u0440\u043e\u0432 # \u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a (\u043b\u0438\u043d\u0442\u0435\u0440\u044b, \u0444\u043e\u0440\u043c\u0430\u0442\u0442\u0435\u0440\u044b \u0438 \u0442.\u0434.): make tools \u0410\u0440\u0442\u0435\u0444\u0430\u043a\u0442\u044b \u0442\u0430\u043a\u0436\u0435 \u0431\u0443\u0434\u0443\u0442 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u0432 $GOPATH/bin . \u0412\u0430\u0436\u043d\u043e! \u0414\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 make \u0442\u0430\u0440\u0433\u0435\u0442\u043e\u0432 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u0443\u0442\u044c $GOPATH/bin \u0432 $PATH . \u0422\u0430\u0440\u0433\u0435\u0442\u044b \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043b\u0438\u043d\u0442\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u043a\u043e\u0434\u0430: $ make lint $ make semgrep \u0412\u0430\u0436\u043d\u043e! make lint \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f \u043e\u0447\u0435\u043d\u044c \u0434\u043e\u043b\u0433\u043e, \u0442\u043a \u043b\u0438\u043d\u0442\u0435\u0440\u044b \u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u044e\u0442 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e internal/service \u0446\u0435\u043b\u0438\u043a\u043e\u043c. \u041c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043b\u0438\u043d\u0442\u0435\u0440\u044b \u043f\u043e \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0438 \u043d\u0430 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438: $ golangci-lint run -v ./internal/service/paas/... # \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0435 \u043d\u0443\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0443\u043a\u0437\u0430\u0430\u0442\u044c \u0432\u0441\u0435 \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u0443\u0435\u043c\u044b\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 $ providerlint -c 1 -XS001=false ./internal/service/paas/... $ make importlint aws-sdk-go # \u041e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043a \u043c\u043e\u0434\u0443\u043b\u044e aws-sdk-go (AWS API) \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u044b \u043d\u0430 \u0444\u043e\u0440\u043a \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432\u044b replace \u0432 go.mod . \u0414\u043b\u044f \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0432 \u043f\u0440\u0430\u0432\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432\u044b \u043f\u0443\u0442\u044c \u043a \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0441 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u043c \u043a\u043e\u0434\u043e\u043c \u043c\u043e\u0434\u0443\u043b\u044f. # go.mod ... replace github.com/aws/aws-sdk-go => <path-to-aws-sdk-go> \u0412\u0430\u0436\u043d\u043e! \u041c\u043e\u0436\u043d\u043e \u0442\u044d\u0433\u0433\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0443\u043b\u044f \u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0442\u044c \u0432 go.mod \u0442\u044d\u0433, \u043d\u043e \u0435\u0433\u043e \u043d\u0435\u043b\u044c\u0437\u044f \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c, \u0442.\u043a. go \u043d\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c \u0432\u0435\u0440\u0441\u0438\u0438 \u043f\u043e\u0441\u043b\u0435 \u0438\u0445 \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438. \u0412\u0430\u0436\u043d\u043e! \u0424\u043e\u0440\u043a aws-sdk-go \u043d\u0435\u043b\u044c\u0437\u044f \u0432\u044b\u0442\u044f\u043d\u0443\u0442\u044c \u0447\u0435\u0440\u0435\u0437 go get github.com/C2Devel/aws-sdk-go@1.44.10 . \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0432\u0435\u0440\u0441\u0438\u0438 aws-sdk-go # \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0442\u0435\u0433\u0430 github.com/C2Devel/aws-sdk-go : # go.mod ... replace github.com/aws/aws-sdk-go => github.com/C2Devel/aws-sdk-go v1.44.10-new \u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e. \u0415\u0441\u043b\u0438 \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0430\u0441\u044c upstream \u0432\u0435\u0440\u0441\u0438\u044f: \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0442\u0435\u0433\u0430 github.com/aws/aws-sdk-go \u0432 \u0431\u043b\u043e\u043a\u0435 require . \u041d\u0435 \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u0441\u0431\u043e\u0440\u043a\u0443. \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439: go mod tidy \u0412\u0430\u0436\u043d\u043e! go mod tidy \u0430\u043a\u0442\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0432\u0441\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0432 go.mod , \u0442.\u0435. \u0438\u0442\u043e\u0433\u043e\u0432\u044b\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043c\u043e\u0433\u0443\u0442 \u043a\u0430\u0441\u0430\u0442\u044c\u0441\u044f \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e aws-sdk-go . \u0422\u0435\u0441\u0442\u044b # \u0412 \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u0435\u0441\u0442\u044c \u0434\u0432\u0430 \u0442\u0438\u043f\u0430 \u0442\u0435\u0441\u0442\u043e\u0432: unit \u0438 acceptance . \u041e\u043d\u0438 \u043b\u0435\u0436\u0430\u0442 \u0440\u044f\u0434\u043e\u043c \u0441 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u043e\u043c (\u0444\u0430\u0439\u043b\u044b: *_test.go). \u0422\u0435\u0441\u0442\u044b \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e go testing , \u0434\u043b\u044f \u043f\u0440\u0438\u0435\u043c\u043e\u0447\u043d\u044b\u0445 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043f\u0430\u043a\u0435\u0442 acctest . Unit # \u0417\u0430\u043f\u0443\u0441\u043a unit \u0442\u0435\u0441\u0442\u043e\u0432: make test Acceptance # \u0414\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043f\u0440\u0438\u0435\u043c\u043e\u0447\u043d\u044b\u0445 \u0442\u0435\u0441\u0442\u043e\u0432 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 Terraform (\u0441\u043c. \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f ). \u0412\u0430\u0436\u043d\u043e! \u0422\u0435\u0441\u0442\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0435 \u043e\u0431\u043b\u0430\u0447\u043d\u044b\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u044b. \u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0434\u043e\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u0441\u0442\u043e\u0432 \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043d\u0430 C2. \u041f\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0443 \u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044e \u043f\u0440\u0438\u0435\u043c\u043e\u0447\u043d\u044b\u0445 \u0442\u0435\u0441\u0442\u043e\u0432 \u0435\u0441\u0442\u044c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f . \u041a\u043e\u043c\u0430\u043d\u0434\u044b: \u0437\u0430\u043f\u0443\u0441\u043a \u0432\u0441\u0435\u0445 \u0442\u0435\u0441\u0442\u043e\u0432: make testacc \u0437\u0430\u043f\u0443\u0441\u043a \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u0430: make testacc TESTS=TestAccEC2EBSVolume_basic PKG=ec2 \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f # \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0435 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0430 \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f\u0445: docs/ - \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438, roadmap; website/ - \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043a \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0443\u0431\u043b\u0438\u043a\u0443\u0435\u0442\u0441\u044f \u0432 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u043c terraform registry ( \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u043f\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u043e\u0442 Terraform ). \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 website: website/ |-- docs/ | |-- d/ # \u043d\u0430\u0431\u043e\u0440 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0439 \u0434\u043b\u044f terraform data sources | |-- guides/ | |-- r/ # \u043d\u0430\u0431\u043e\u0440 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0439 \u0434\u043b\u044f terraform resources | | |-- <resource>.html.markdown | | |-- ... | | | |-- index.html.markdown # \u0441\u0442\u0430\u0440\u0442\u043e\u0432\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 |-- allowed-subcategories.txt # \u0440\u0430\u0437\u0434\u0435\u043b\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0412\u0430\u0436\u043d\u043e! allowed-subcategories.txt \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u0442\u0430\u0440\u0433\u0435\u0442\u0430 make gen \u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0440\u0430\u0437\u0434\u0435\u043b\u0430\u0445 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438. \u041f\u043e\u0441\u043b\u0435 \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c\u0441\u044f \u0431\u0443\u0434\u0443\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0435\u043f\u0443\u0441\u0442\u044b\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044b. \u041e\u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f: https://registry.terraform.io/providers/C2Devel/rockitcloud/latest/docs \u0417\u0430\u043f\u0443\u0441\u043a \u043b\u0438\u043d\u0442\u0435\u0440\u043e\u0432 # \u0414\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043b\u0438\u043d\u0442\u0435\u0440\u043e\u0432 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 Docker \u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u043b\u0438\u043d\u0442\u0435\u0440\u043e\u0432 (\u0441\u043c. \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043b\u0438\u043d\u0442\u0435\u0440\u043e\u0432 ). docs/ : \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 markdown \u0444\u0430\u0439\u043b\u043e\u0432 \u0438 \u043e\u0448\u0438\u0431\u043a\u0438 \u0432 \u0442\u0435\u043a\u0441\u0442\u0435 (English). $ make docs-lint website/ : \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 markdown \u0444\u0430\u0439\u043b\u043e\u0432, \u043e\u0448\u0438\u0431\u043a\u0438 \u0432 \u0442\u0435\u043a\u0441\u0442\u0435 (English) \u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 terraform registry. $ make website-lint $ make docscheck \u0414\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f website_unsupported # \u0412 website_unsupported/ \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0435\u043d\u044b \u0433\u0430\u0439\u0434\u044b \u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f Rockit Cloud API. \u0414\u043b\u044f \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u043d\u0443\u0436\u043d\u0443\u044e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0443\u044e \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e \u0432 website/ . \u0412\u044b\u043f\u0443\u0441\u043a \u0440\u0435\u043b\u0438\u0437\u0430 # \u0420\u0435\u043b\u0438\u0437 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f\u043c\u0438 \u043a \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u0432 terraform registry. \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0440\u0435\u043b\u0438\u0437\u043d\u044b\u0445 \u0430\u0440\u0442\u0435\u0444\u0430\u043a\u0442\u043e\u0432 (\u0441\u0431\u043e\u0440\u043a\u0430 \u043f\u043e\u0434 \u0440\u0430\u0437\u043d\u044b\u0435 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b \u0438 \u041e\u0421, \u043f\u043e\u0434\u043f\u0438\u0441\u044c, \u0430\u0440\u0445\u0438\u0432\u0430\u0446\u0438\u044f \u0438 \u0442.\u0434.) \u043e\u043f\u0438\u0441\u0430\u043d\u0430 \u0432 .goreleaser.yml \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f: \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u043f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044e \u0440\u0435\u043b\u0438\u0437\u0430 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u043d\u0430 github \u043e\u0442 Terraform . \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f # \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 goreleaser \u0412\u0430\u0436\u043d\u043e! \u0414\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0443\u0442\u0438\u043b\u0438\u0442\u044b goreleaser \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d Git \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c 2.3 \u0432\u0435\u0440\u0441\u0438\u0438 $ go install github.com/goreleaser/goreleaser@latest ... $ export GOBIN=$(go env GOPATH)/bin $ $GOBIN/goreleaser -v ... \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 GPG \u043a\u043b\u044e\u0447\u0430 ( \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u043e\u0442 github ) \u0412\u0430\u0436\u043d\u043e! \u041a\u043b\u044e\u0447 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0431\u0435\u0437 \u043f\u0430\u0440\u043e\u043b\u044f \u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e. \u041f\u0440\u0438\u0432\u044f\u0437\u043a\u0430 \u043a\u043b\u044e\u0447\u0430 \u043a github \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0443 \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 GPG_FINGERPRINT $ gpg --list-secret-keys --keyid-format LONG ... sec rsa4096/<id> 2022-04-19 [SC] ... $ gpg --list-secret-keys --with-colons --fingerprint <id> | grep fpr | cut -f 10 -d : <fingerprint> $ export GPG_FINGERPRINT=<fingerprint> \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 Personal Access Token \u0441 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c public_repo ( \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u043e\u0442 github ) \u0412\u0430\u0436\u043d\u043e! \u0421\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d \u043c\u043e\u0436\u043d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0440\u0430\u0437\u0443 \u043f\u043e\u0441\u043b\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 GITHUB_TOKEN $ export GITHUB_TOKEN=<generated token by github> \u0412\u0435\u0440\u0441\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 # \u0412\u0435\u0440\u0441\u0438\u0438 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 Semantic Version \u0438 \u043d\u0430\u0447\u0438\u043d\u0430\u0442\u044c\u0441\u044f \u0441 v (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, v1.2.3 \u0438\u043b\u0438 v1.2.3-pre ). \u0412\u0435\u0440\u0441\u0438\u044f \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0432\u0438\u0434\u0435 \u0442\u044d\u0433\u0430. \u0412\u0430\u0436\u043d\u043e! \u041d\u0435 \u0434\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0443\u0436\u0435 \u0432\u044b\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0432\u0435\u0440\u0441\u0438\u0439, \u0442.\u043a. \u043c\u043e\u0433\u0443\u0442 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u0443\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441\u043e \u0441\u043a\u0430\u0447\u0438\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u0438\u0437 terraform registry. \u0421\u0442\u0430\u0440\u0442\u043e\u0432\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f: v24.1.0 \u0420\u0435\u043b\u0438\u0437 # \u0412\u0430\u0436\u043d\u043e! \u0420\u0435\u043b\u0438\u0437\u044b \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u0432\u044b\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f \u0441 \u0432\u0435\u0442\u043a\u0438 develop (\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0430 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u043e\u0439). \u0412\u0435\u0442\u043a\u0430 main \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 \u0441 upstream. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0440\u0435\u043b\u0438\u0437\u043d\u043e\u0433\u043e PR'\u0430 \u0432 \u0432\u0435\u0442\u043a\u0443 develop (\u043f\u0440\u0438\u043c\u0435\u0440: v24.1.0 ) \u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e. \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0435\u0440\u0441\u0438\u0438 aws-sdk-go , \u0435\u0441\u043b\u0438 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f (\u0441\u043c. \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0432\u0435\u0440\u0441\u0438\u0438 aws-sdk-go ) \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 CHANGELOG.md \u041b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0437\u0430\u043f\u0443\u0441\u043a \u043b\u0438\u043d\u0442\u0435\u0440\u043e\u0432 \u0438 unit \u0442\u0435\u0441\u0442\u043e\u0432 \u043d\u0430 \u0432\u0435\u0442\u043a\u0435 develop + \u0440\u0435\u043b\u0438\u0437\u043d\u044b\u0439 PR $ make lint $ make docs-lint $ make website-lint $ make test \u041c\u0435\u0440\u0434\u0436 \u0440\u0435\u043b\u0438\u0437\u043d\u043e\u0433\u043e PR'\u0430 \u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e. \u0412\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u0440\u0435\u043b\u0438\u0437\u0430 \u0432 github (\u0444\u043b\u0430\u0433 release.draft \u0432 .goreleaser.yml ) # .goreleaser.yml ... release: draft: false \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0440\u0435\u043b\u0438\u0437 \u0431\u0443\u0434\u0435\u0442 \u043e\u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u043d \u0432 origin. \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f: \u043d\u0430 \u0440\u0435\u043b\u0438\u0437\u043d\u043e\u0439 \u0432\u0435\u0442\u043a\u0435 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u043d\u0435\u0437\u0430\u043a\u043e\u043c\u043c\u0438\u0447\u0435\u043d\u043d\u044b\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439, untracked \u0444\u0430\u0439\u043b\u043e\u0432 \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0440\u0435\u043b\u0438\u0437\u043d\u043e\u0433\u043e \u0442\u0435\u0433\u0430 \u0441 \u0432\u0435\u0440\u0441\u0438\u0435\u0439 (\u0441\u043c. \u0432\u0435\u0440\u0441\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 ) \u0438 \u0435\u0433\u043e \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f $ git tag v1.2.3 $ git push <remote> v1.2.3 \u0421\u0431\u043e\u0440\u043a\u0430 \u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u044c \u0440\u0435\u043b\u0438\u0437\u043d\u044b\u0445 \u0430\u0440\u0442\u0435\u0444\u0430\u043a\u0442\u043e\u0432. \u0410\u0440\u0442\u0435\u0444\u0430\u043a\u0442\u044b \u0431\u0443\u0434\u0443\u0442 \u0440\u0430\u0437\u043c\u0435\u0449\u0435\u043d\u044b \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 dist/ $ $GOBIN/goreleaser release --clean --timeout 180m # \u0414\u043b\u044f \u0432\u0435\u0440\u0441\u0438\u0439 goreleaser \u0432\u044b\u0448\u0435 v1.15.0 $ $GOBIN/goreleaser release --rm-dist --timeout 180m # \u0414\u043b\u044f \u0432\u0435\u0440\u0441\u0438\u0439 goreleaser \u043d\u0438\u0436\u0435 v1.15.0 \u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e. \u0415\u0441\u043b\u0438 \u043d\u0430 \u0448\u0430\u0433\u0435 2 \u043d\u0435 \u0431\u044b\u043b\u0430 \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0430 \u0430\u0432\u0442\u043e\u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f ( release.draft: true ): \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0440\u0435\u043b\u0438\u0437\u0430 \u043d\u0430 github \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0430\u0440\u0442\u0435\u0444\u0430\u043a\u0442\u043e\u0432: dist/terraform-provider-rockitcloud_{VERSION}_{OS}_{ARCH}.zip \u0414\u043b\u044f \u0432\u0441\u0435\u0445 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440 \u0438 \u041e\u0421. dist/terraform-provider-rockitcloud_{VERSION}_SHA256SUMS dist/terraform-provider-rockitcloud_{VERSION}_SHA256SUMS.sig terraform-provider-rockitcloud_{VERSION}_manifest.json \u0424\u0430\u0439\u043b \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u0432\u0440\u0443\u0447\u043d\u0443\u044e: cp terraform-registry-manifest.json terraform-provider-rockitcloud_{VERSION}_manifest.json \u0412 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0443\u0431\u043b\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0437\u0430\u043f\u0438\u0441\u044c \u0438\u0437 CHANGELOG.md. \u041f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u0432 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u043c terraform registry # \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f: \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u043f\u043e \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u043e\u0442 Terraform . \u0412\u0430\u0436\u043d\u043e! \u0414\u043b\u044f \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u0432 terraform registry \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u0430 \u0432\u044b\u043f\u0443\u0449\u0435\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f. \u041f\u043e\u0440\u044f\u0434\u043e\u043a \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 terraform registry \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e github \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 GPG \u043a\u043b\u044e\u0447\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0441\u044f \u0434\u043b\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u0438 \u0440\u0435\u043b\u0438\u0437\u0430 (\u0441\u043c. \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f , \u0448\u0430\u0433 2) \u0432 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u0445 \u043f\u0440\u043e\u0444\u0438\u043b\u044f $ gpg --list-secret-keys --keyid-format LONG ... sec rsa4096/<id> 2022-04-19 [SC] ... $ gpg --armor --export <id> -----BEGIN PGP PUBLIC KEY BLOCK----- ... \u0412\u044b\u0431\u043e\u0440 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u0432 \u043c\u0435\u043d\u044e Publish -> Provider \u0438 \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f \u041f\u043e\u0441\u043b\u0435 \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u0434\u043b\u044f \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u043d webhook \u043d\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u0438\u0437 \u0433\u0440\u0443\u043f\u043f\u044b Releases . \u041d\u043e\u0432\u044b\u0435 \u0440\u0435\u043b\u0438\u0437\u044b \u0431\u0443\u0434\u0443\u0442 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u043e\u0434\u0442\u044f\u043d\u0443\u0442\u044b \u0432 registry. \u0412\u0430\u0436\u043d\u043e! Terraform \u043d\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u043e\u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440 \u0438\u043b\u0438 \u043e\u0434\u043d\u0443 \u0438\u0437 \u0435\u0433\u043e \u0432\u0435\u0440\u0441\u0438\u0439. \u041d\u0435 \u0434\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0443\u0436\u0435 \u0432\u044b\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0432\u0435\u0440\u0441\u0438\u0439. \u041e\u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440: https://registry.terraform.io/providers/C2Devel/rockitcloud \u041f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u0432 private terraform registry # Terraform registry \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u0430\u043d \u0432 \u0432\u0438\u0434\u0435 s3 \u0431\u0430\u043a\u0435\u0442\u0430. \u0412\u0430\u0436\u043d\u043e! \u0423 \u0431\u0430\u043a\u0435\u0442\u0430 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d \u0434\u043e\u0441\u0442\u0443\u043f \u043f\u043e https ( \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f ). \u041f\u0440\u0438 \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 web-\u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u043d\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0443\u043a\u0430\u0437\u0430\u0442\u044c index.json . \u0421\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430, terraform registry \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u0444\u0430\u0439\u043b\u044b \u0441 \u0432\u0435\u0440\u0441\u0438\u044f\u043c\u0438 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u043e\u0432 \u0438 \u043c\u0435\u0442\u0430\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0431\u043e\u0440\u043a\u0438, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0443\u043a\u0430\u0437\u0430\u043d\u044b \u0441\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u0430\u0440\u0442\u0435\u0444\u0430\u043a\u0442\u044b. \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 s3 \u0431\u0430\u043a\u0435\u0442\u0430 # .well-known/ |-- terraform.json # \u0441\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0439 \u0444\u0430\u0439\u043b providers/ |-- c2devel/ # \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a |-- rockitcloud/ # \u0438\u043c\u044f \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 |-- 1.0.0/ | |-- download/ | |-- linux/ | | |-- amd64/ | | | |-- index.json # \u043c\u0435\u0442\u0430\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u0441\u0431\u043e\u0440\u043a\u0438 1.0.0_linux_amd64 | | |-- ... | |-- ... | |-- versions/ |-- index.json # \u0432\u0435\u0440\u0441\u0438\u0438 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 .well-known/terraform.json \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u043f\u0435\u0440\u0432\u043e\u043c \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0438 \u043a registry \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438. \u0422\u0430\u043a\u0436\u0435 \u0432 \u043d\u0435\u043c \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0431\u0430\u0437\u043e\u0432\u044b\u0439 url \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u043e\u0432. # .well-known/terraform.json { \"providers.v1\": \"/providers/\" } \u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u0432\u0438\u0434 \u0444\u0430\u0439\u043b\u0430 \u0441 \u0432\u0435\u0440\u0441\u0438\u044f\u043c\u0438 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430: # providers/c2devel/rockitcloud/versions/index.json { \"id\": \"c2devel/rockitcloud\", \"versions\": [], \"warnings\": null } \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043d\u043e\u0432\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0438 # \u041f\u043e\u0441\u043b\u0435 \u0440\u0435\u043b\u0438\u0437\u0430 \u043d\u043e\u0432\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0438 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 (\u0441\u043c. \u0440\u0435\u043b\u0438\u0437 ) \u0430\u0440\u0442\u0435\u0444\u0430\u043a\u0442\u044b \u0431\u0443\u0434\u0443\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 dist/ . \u0414\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0432\u0435\u0440\u0441\u0438\u0438 \u0432 s3 \u0431\u0430\u043a\u0435\u0442 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0444\u0430\u0439\u043b\u044b \u0441 \u0432\u0435\u0440\u0441\u0438\u044f\u043c\u0438 \u0438 \u043c\u0435\u0442\u0430\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439. \u0418\u0445 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u0437 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0433\u043e terraform registry, \u0435\u0441\u043b\u0438 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440 \u0443\u0436\u0435 \u043e\u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u043d, \u0438\u043b\u0438 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u043e\u043c . \u0415\u0441\u043b\u0438 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 s3 \u0431\u0430\u043a\u0435\u0442\u0430 \u0438 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0439, \u0441\u043c. \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 s3 \u0431\u0430\u043a\u0435\u0442\u0430 . \u041f\u043e\u0440\u044f\u0434\u043e\u043a \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438: \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0435\u0440\u0441\u0438\u0439 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430. \u0412 \u0444\u0430\u0439\u043b\u0435 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f $ curl https://registry.terraform.io/v1/providers/c2devel/rockitcloud/versions --output versions.json \u0412 \u0431\u043b\u043e\u043a\u0435 versions.<version>.platforms \u0443\u043a\u0430\u0437\u0430\u043d\u044b \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b \u0438 \u041e\u0421, \u043f\u043e\u0434 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0435\u0440\u0441\u0438\u044f \u0441\u043e\u0431\u0438\u0440\u0430\u043b\u0430\u0441\u044c. 2. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0430\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u0441\u0431\u043e\u0440\u043e\u043a \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 $ curl https://registry.terraform.io/v1/providers/c2devel/rockitcloud/<version>/download/<os>/<arch> --output <version>_<os>_<arch>.json \u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e. \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0430\u0440\u0442\u0435\u0444\u0430\u043a\u0442\u043e\u0432 \u0432 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435. \u0410\u0440\u0442\u0435\u0444\u0430\u043a\u0442\u044b \u043c\u043e\u0436\u043d\u043e \u0441\u043a\u0430\u0447\u0430\u0442\u044c \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0430\u043c \u0432 \u043c\u0435\u0442\u0430\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0438\u043b\u0438 \u0441\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0437 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 dist/ : dist/terraform-provider-rockitcloud_{VERSION}_{OS}_{ARCH}.zip \u0414\u043b\u044f \u0432\u0441\u0435\u0445 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440 \u0438 \u041e\u0421. dist/terraform-provider-rockitcloud_{VERSION}_SHA256SUMS dist/terraform-provider-rockitcloud_{VERSION}_SHA256SUMS.sig \u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e. \u0415\u0441\u043b\u0438 \u0431\u044b\u043b \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d \u0448\u0430\u0433 3: \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0441\u044b\u043b\u043e\u043a \u0432 \u043c\u0435\u0442\u0430\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 s3 \u0431\u0430\u043a\u0435\u0442\u0430: \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430 \u0441 \u0432\u0435\u0440\u0441\u0438\u044f\u043c\u0438: version.json -> providers/c2devel/rockitcloud/versions/index.json \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043c\u0435\u0442\u0430\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0441\u0431\u043e\u0440\u043e\u043a \u0432\u0435\u0440\u0441\u0438\u0438: <version>_<os>_<arch>.json -> providers/c2devel/rockitcloud/<version>/download/<os>/<arch>/index.json \u0412\u0430\u0436\u043d\u043e! \u0424\u0430\u0439\u043b\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u044b \u0441 mime-\u0442\u0438\u043f\u043e\u043c \"application/json\". \u0414\u043b\u044f \u0444\u0430\u0439\u043b\u043e\u0432 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043e\u0442\u043a\u0440\u044b\u0442 \u0434\u043e\u0441\u0442\u0443\u043f \u043d\u0430 \u0447\u0442\u0435\u043d\u0438\u0435 \u0431\u0435\u0437 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043a\u0440\u0438\u043f\u0442\u0430 # \u0414\u043b\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u043d\u043e\u0432\u044b\u0445 \u0432\u0435\u0440\u0441\u0438\u0439 \u0432 s3 \u0431\u0430\u043a\u0435\u0442 \u0438\u0437 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0433\u043e terraform registry \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c bash \u0441\u043a\u0440\u0438\u043f\u0442 . \u0421\u043a\u0440\u0438\u043f\u0442 \u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0444\u0430\u0439\u043b\u044b \u0441 \u0432\u0435\u0440\u0441\u0438\u044f\u043c\u0438 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u0432 s3 \u0431\u0430\u043a\u0435\u0442\u0435 \u0438 \u0432 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u043c registry \u0438 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0432\u0435\u0440\u0441\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0432 \u0431\u0430\u043a\u0435\u0442\u0435, \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0433\u043e registry \u0444\u0430\u0439\u043b\u044b \u0441 \u043c\u0435\u0442\u0430\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u0434\u043b\u044f \u0441\u0431\u043e\u0440\u043e\u043a. \u0412\u0430\u0436\u043d\u043e! \u0424\u0430\u0439\u043b \u0441 \u0432\u0435\u0440\u0441\u0438\u044f\u043c\u0438 \u0432 s3 \u0431\u0430\u043a\u0435\u0442\u0435 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d \u043a \u0432\u0438\u0434\u0443 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0433\u043e registry. \u0414\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0443\u0442\u0438\u043b\u0438\u0442\u044b s3cmd ( \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f ) \u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0439 s3 \u0431\u0430\u043a\u0435\u0442 (\u0441\u043c. \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 s3 \u0431\u0430\u043a\u0435\u0442\u0430 ). \u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u0441\u043a\u0440\u0438\u043f\u0442\u0430: TF_REGISTRY_URL - url terraform registry, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"https://registry.terraform.io/\" S3_REGISTRY_URL - url s3 registry, \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e S3_BUCKET_NAME - \u0438\u043c\u044f \u0431\u0430\u043a\u0435\u0442\u0430, \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e PROVIDER_NAME - \u0438\u043c\u044f \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"c2devel/rockitcloud\" S3_BACKUP_DIR - \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f \u0434\u043b\u044f \u0431\u044d\u043a\u0430\u043f\u0430 \u0431\u0430\u043a\u0435\u0442\u0430, \u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e. \u0415\u0441\u043b\u0438 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u0430, \u0431\u044d\u043a\u0430\u043f \u0441\u0434\u0435\u043b\u0430\u043d \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u043a\u0440\u0438\u043f\u0442\u0430: $ cd scripts $ ./update-s3-registry.sh ... \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 # \u041f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440 \u0432 terraform registry: https://registry.terraform.io/providers/C2Devel/rockitcloud \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f Terraform \u0434\u043b\u044f C2: C2Devel/terraform-examples \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 C2Devel/rockitcloud \u043f\u043e\u0441\u043b\u0435 \u0435\u0433\u043e \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u0432 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u043c terraform registry: # provider.tf terraform { required_providers { aws = { # case-insensistive source = \"c2devel/rockitcloud\" version = \"24.1.0\" } } } provider \"aws\" { # Configuration options } \u0412\u0430\u0436\u043d\u043e! \u0412 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0438\u043c\u0435\u043d\u0438 \u043f\u0440\u043e\u0432\u0430\u0434\u0439\u0435\u0440\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f aws , \u0442.\u043a. \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0430 \u0441\u0445\u0435\u043c\u0430 \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f terraform \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432: aws_ . \u0415\u0441\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u0440\u0443\u0433\u043e\u0435 \u0438\u043c\u044f (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, rockitcloud ), Terraform \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u043e\u043f\u044b\u0442\u0430\u0435\u0442\u0441\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440 hashicorp/aws *. \u0415\u0441\u043b\u0438 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440 \u043e\u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u043d \u0432 s3 \u0431\u0430\u043a\u0435\u0442\u0435, \u0432 \u043f\u043e\u043b\u0435 source \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f url \u0431\u0430\u043a\u0435\u0442\u0430 \u0431\u0435\u0437 \u0441\u0445\u0435\u043c\u044b. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, tf-registry.rockitcloud.ru/c2devel/rockitcloud . \u041b\u043e\u043a\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0431\u043e\u0440\u043a\u0430 # \u0422\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e \u0441\u043e\u0431\u0440\u0430\u0442\u044c \u0430\u0440\u0442\u0435\u0444\u0430\u043a\u0442, \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0443 go build -o terraform-provider-<name> , \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c Terraform (v0.14+) \u043d\u0430 \u0435\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f Terraform \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0444\u0430\u0439\u043b\u0435 ~/.terraformrc . \u0414\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0443\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e. \u041f\u0440\u0438\u043c\u0435\u0440 dev \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 dev.tfrc , \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u043a \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0443 c2devel/<name> \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0430\u0440\u0442\u0435\u0444\u0430\u043a\u0442 terraform-provider-<name> : # dev.tfrc provider_installation { dev_overrides { \"c2devel/<name>\" = \"<absolute-path-to-artifact-dir>\" } direct {} } \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 dev.tfrc \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 Terraform \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438: $ export TF_CLI_CONFIG_FILE=<path-to-dev.tfrc> \u0412\u0430\u0436\u043d\u043e! \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u043b\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d terraform init (\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u044b \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u044b, \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d lock \u0444\u0430\u0439\u043b), \u0430 \u043f\u043e\u0442\u043e\u043c \u0443\u0436\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043e \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 \u0441\u0432\u043e\u0439 \u0430\u0440\u0442\u0435\u0444\u0430\u043a\u0442. \u041f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c terraform init \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0438 \u043d\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f, \u0442.\u043a. Terraform \u0431\u0443\u0434\u0435\u0442 \u043f\u044b\u0442\u0430\u0442\u044c\u0441\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0432\u0441\u0435 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u044b \u0438\u0437 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0433\u043e registry, \u0432 \u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0435 \u0438 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439. \u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u043a \u043e\u0448\u0438\u0431\u043a\u0430\u043c. TODO # \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 github actions: \u043f\u0440\u043e\u0433\u043e\u043d \u0442\u0435\u0441\u0442\u043e\u0432, \u043f\u0440\u043e\u0433\u043e\u043d \u043b\u0438\u043d\u0442\u0435\u0440\u043e\u0432, \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 PR \u0414\u043e\u0440\u0430\u0431\u043e\u0442\u043a\u0430 acceptance \u0442\u0435\u0441\u0442\u043e\u0432 \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043d\u0430 C2 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432 make build \u043a\u043e\u043c\u0430\u043d\u0434\u0443 go build \u0432\u043c\u0435\u0441\u0442\u043e go install \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0434\u0430\u0442\u044c \u0438\u043c\u044f \u0430\u0440\u0442\u0435\u0444\u0430\u043a\u0442\u0430 \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0441\u0445\u0435\u043c\u0443 \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432: aws_ -> rockitcloud_ **, \u0447\u0442\u043e\u0431\u044b \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0438\u043c\u0435\u043d\u0438 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 rockitcloud . \u041f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u0438 \u0441 aws \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f\u043c\u0438","title":"Terraform Rockit Cloud Provider"},{"location":"c2/#terraform-rockit-cloud-provider","text":"\u0410\u0434\u0430\u043f\u0442\u0430\u0446\u0438\u044f Terraform AWS Provider \u043e\u0442 HashiCorp \u043f\u043e\u0434 Rockit Cloud . Upstream Name Upstream Version Terraform AWS Provider 4.14.0 \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u041e\u0431\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u041d\u0430\u0447\u0430\u043b\u043e \u0440\u0430\u0431\u043e\u0442\u044b \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0438 \u0437\u0430\u043f\u0443\u0441\u043a \u043b\u0438\u043d\u0442\u0435\u0440\u043e\u0432 aws-sdk-go \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0432\u0435\u0440\u0441\u0438\u0438 aws-sdk-go \u0422\u0435\u0441\u0442\u044b Unit Acceptance \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0417\u0430\u043f\u0443\u0441\u043a \u043b\u0438\u043d\u0442\u0435\u0440\u043e\u0432 \u0414\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f website_unsupported \u0412\u044b\u043f\u0443\u0441\u043a \u0440\u0435\u043b\u0438\u0437\u0430 \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u0412\u0435\u0440\u0441\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0420\u0435\u043b\u0438\u0437 \u041f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u0432 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u043c terraform registry \u041f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u0432 private terraform registry \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 s3 \u0431\u0430\u043a\u0435\u0442\u0430 \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043d\u043e\u0432\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0438 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u041b\u043e\u043a\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0431\u043e\u0440\u043a\u0430 TODO","title":"Terraform Rockit Cloud Provider"},{"location":"c2/#_1","text":"Terraform 0.13+ (\u0437\u0430\u043f\u0443\u0441\u043a \u043f\u0440\u0438\u0435\u043c\u043e\u0447\u043d\u044b\u0445 \u0442\u0435\u0441\u0442\u043e\u0432) Go 1.21 (\u0441\u0431\u043e\u0440\u043a\u0430 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430) Docker (\u0437\u0430\u043f\u0443\u0441\u043a \u043b\u0438\u043d\u0442\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438)","title":"\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"c2/#_2","text":"\u041f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440 - \u044d\u0442\u043e \u043f\u043b\u0430\u0433\u0438\u043d \u0434\u043b\u044f Terraform , \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c\u0438 \u043d\u0435\u043a\u043e\u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0438\u0441\u0430 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043e\u0431\u043b\u0430\u043a\u0430 \u0438\u043b\u0438 \u0411\u0414) \u0447\u0435\u0440\u0435\u0437 \u0435\u0433\u043e API. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0440\u0435\u0441\u0443\u0440\u0441\u0430 \u0432 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u0445\u0435\u043c\u0430 \u0438 CRUD \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438. \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 API \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043c\u043e\u0434\u0443\u043b\u044f. Terraform Rockit Cloud Provider \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442\u0441\u044f \u043d\u0430 \u0431\u0430\u0437\u0435 Terraform AWS Provider . \u0422\u0430\u043a\u0436\u0435 \u0441\u043e\u0437\u0434\u0430\u043d \u0444\u043e\u0440\u043a \u043c\u043e\u0434\u0443\u043b\u044f \u0441 AWS API: C2Devel/aws-sdk-go . \u0414\u043b\u044f \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u0432 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u043c terraform registry \u043f\u043e\u0434 \u043d\u043e\u0432\u044b\u043c \u0438\u043c\u0435\u043d\u0435\u043c (\u0440\u0430\u043d\u0435\u0435 - aws ) \u0444\u043e\u0440\u043a \u043f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d \u0432 terraform-provider-rockitcloud . \u041e\u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440: https://registry.terraform.io/providers/C2Devel/rockitcloud","title":"\u041e\u0431\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f"},{"location":"c2/#_3","text":"\u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u043e\u043c \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 go (\u0441\u043c. \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f ). \u041a\u043b\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f \u0438 \u0441\u0431\u043e\u0440\u043a\u0430 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430: $ git clone git@github.com:C2Devel/terraform-provider-rockitcloud.git && cd terraform-provider-rockitcloud ... $ make build \u041f\u043e\u0441\u043b\u0435 \u0441\u0431\u043e\u0440\u043a\u0438 \u0430\u0440\u0442\u0435\u0444\u0430\u043a\u0442 terraform-provider-aws \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 $GOPATH/bin . \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f $GOPATH : $ export GOPATH=$(go env GOPATH) $ ls $GOPATH/bin/terraform-provider-aws ... \u0412\u0430\u0436\u043d\u043e! make build \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043a\u043e\u043c\u0430\u043d\u0434\u0443 go install , \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043d\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u043c\u044f \u0430\u0440\u0442\u0435\u0444\u0430\u043a\u0442\u0430 - terraform-provider-aws . \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f dev \u0441\u0431\u043e\u0440\u043e\u043a. \u0414\u043b\u044f \u0441\u0431\u043e\u0440\u043a\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u0443: $ go build -o terraform-provider-rockitcloud \u0410\u0440\u0442\u0435\u0444\u0430\u043a\u0442 terraform-provider-rockitcloud \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u043d \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430.","title":"\u041d\u0430\u0447\u0430\u043b\u043e \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"c2/#_4","text":"\u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a (\u043b\u0438\u043d\u0442\u0435\u0440\u044b, \u0444\u043e\u0440\u043c\u0430\u0442\u0442\u0435\u0440\u044b \u0438 \u0442.\u0434.): make tools \u0410\u0440\u0442\u0435\u0444\u0430\u043a\u0442\u044b \u0442\u0430\u043a\u0436\u0435 \u0431\u0443\u0434\u0443\u0442 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u0432 $GOPATH/bin . \u0412\u0430\u0436\u043d\u043e! \u0414\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 make \u0442\u0430\u0440\u0433\u0435\u0442\u043e\u0432 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u0443\u0442\u044c $GOPATH/bin \u0432 $PATH . \u0422\u0430\u0440\u0433\u0435\u0442\u044b \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043b\u0438\u043d\u0442\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u043a\u043e\u0434\u0430: $ make lint $ make semgrep \u0412\u0430\u0436\u043d\u043e! make lint \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f \u043e\u0447\u0435\u043d\u044c \u0434\u043e\u043b\u0433\u043e, \u0442\u043a \u043b\u0438\u043d\u0442\u0435\u0440\u044b \u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u044e\u0442 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e internal/service \u0446\u0435\u043b\u0438\u043a\u043e\u043c. \u041c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043b\u0438\u043d\u0442\u0435\u0440\u044b \u043f\u043e \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0438 \u043d\u0430 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438: $ golangci-lint run -v ./internal/service/paas/... # \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0435 \u043d\u0443\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0443\u043a\u0437\u0430\u0430\u0442\u044c \u0432\u0441\u0435 \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u0443\u0435\u043c\u044b\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 $ providerlint -c 1 -XS001=false ./internal/service/paas/... $ make importlint","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0438 \u0437\u0430\u043f\u0443\u0441\u043a \u043b\u0438\u043d\u0442\u0435\u0440\u043e\u0432"},{"location":"c2/#aws-sdk-go","text":"\u041e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043a \u043c\u043e\u0434\u0443\u043b\u044e aws-sdk-go (AWS API) \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u044b \u043d\u0430 \u0444\u043e\u0440\u043a \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432\u044b replace \u0432 go.mod . \u0414\u043b\u044f \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0432 \u043f\u0440\u0430\u0432\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432\u044b \u043f\u0443\u0442\u044c \u043a \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0441 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u043c \u043a\u043e\u0434\u043e\u043c \u043c\u043e\u0434\u0443\u043b\u044f. # go.mod ... replace github.com/aws/aws-sdk-go => <path-to-aws-sdk-go> \u0412\u0430\u0436\u043d\u043e! \u041c\u043e\u0436\u043d\u043e \u0442\u044d\u0433\u0433\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0443\u043b\u044f \u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0442\u044c \u0432 go.mod \u0442\u044d\u0433, \u043d\u043e \u0435\u0433\u043e \u043d\u0435\u043b\u044c\u0437\u044f \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c, \u0442.\u043a. go \u043d\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c \u0432\u0435\u0440\u0441\u0438\u0438 \u043f\u043e\u0441\u043b\u0435 \u0438\u0445 \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438. \u0412\u0430\u0436\u043d\u043e! \u0424\u043e\u0440\u043a aws-sdk-go \u043d\u0435\u043b\u044c\u0437\u044f \u0432\u044b\u0442\u044f\u043d\u0443\u0442\u044c \u0447\u0435\u0440\u0435\u0437 go get github.com/C2Devel/aws-sdk-go@1.44.10 .","title":"aws-sdk-go"},{"location":"c2/#aws-sdk-go_1","text":"\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0442\u0435\u0433\u0430 github.com/C2Devel/aws-sdk-go : # go.mod ... replace github.com/aws/aws-sdk-go => github.com/C2Devel/aws-sdk-go v1.44.10-new \u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e. \u0415\u0441\u043b\u0438 \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0430\u0441\u044c upstream \u0432\u0435\u0440\u0441\u0438\u044f: \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0442\u0435\u0433\u0430 github.com/aws/aws-sdk-go \u0432 \u0431\u043b\u043e\u043a\u0435 require . \u041d\u0435 \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u0441\u0431\u043e\u0440\u043a\u0443. \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439: go mod tidy \u0412\u0430\u0436\u043d\u043e! go mod tidy \u0430\u043a\u0442\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0432\u0441\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0432 go.mod , \u0442.\u0435. \u0438\u0442\u043e\u0433\u043e\u0432\u044b\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043c\u043e\u0433\u0443\u0442 \u043a\u0430\u0441\u0430\u0442\u044c\u0441\u044f \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e aws-sdk-go .","title":"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0432\u0435\u0440\u0441\u0438\u0438 aws-sdk-go"},{"location":"c2/#_5","text":"\u0412 \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u0435\u0441\u0442\u044c \u0434\u0432\u0430 \u0442\u0438\u043f\u0430 \u0442\u0435\u0441\u0442\u043e\u0432: unit \u0438 acceptance . \u041e\u043d\u0438 \u043b\u0435\u0436\u0430\u0442 \u0440\u044f\u0434\u043e\u043c \u0441 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u043e\u043c (\u0444\u0430\u0439\u043b\u044b: *_test.go). \u0422\u0435\u0441\u0442\u044b \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e go testing , \u0434\u043b\u044f \u043f\u0440\u0438\u0435\u043c\u043e\u0447\u043d\u044b\u0445 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043f\u0430\u043a\u0435\u0442 acctest .","title":"\u0422\u0435\u0441\u0442\u044b"},{"location":"c2/#unit","text":"\u0417\u0430\u043f\u0443\u0441\u043a unit \u0442\u0435\u0441\u0442\u043e\u0432: make test","title":"Unit"},{"location":"c2/#acceptance","text":"\u0414\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043f\u0440\u0438\u0435\u043c\u043e\u0447\u043d\u044b\u0445 \u0442\u0435\u0441\u0442\u043e\u0432 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 Terraform (\u0441\u043c. \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f ). \u0412\u0430\u0436\u043d\u043e! \u0422\u0435\u0441\u0442\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0435 \u043e\u0431\u043b\u0430\u0447\u043d\u044b\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u044b. \u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0434\u043e\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u0441\u0442\u043e\u0432 \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043d\u0430 C2. \u041f\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0443 \u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044e \u043f\u0440\u0438\u0435\u043c\u043e\u0447\u043d\u044b\u0445 \u0442\u0435\u0441\u0442\u043e\u0432 \u0435\u0441\u0442\u044c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f . \u041a\u043e\u043c\u0430\u043d\u0434\u044b: \u0437\u0430\u043f\u0443\u0441\u043a \u0432\u0441\u0435\u0445 \u0442\u0435\u0441\u0442\u043e\u0432: make testacc \u0437\u0430\u043f\u0443\u0441\u043a \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u0430: make testacc TESTS=TestAccEC2EBSVolume_basic PKG=ec2","title":"Acceptance"},{"location":"c2/#_6","text":"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0435 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0430 \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f\u0445: docs/ - \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438, roadmap; website/ - \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043a \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0443\u0431\u043b\u0438\u043a\u0443\u0435\u0442\u0441\u044f \u0432 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u043c terraform registry ( \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u043f\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u043e\u0442 Terraform ). \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 website: website/ |-- docs/ | |-- d/ # \u043d\u0430\u0431\u043e\u0440 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0439 \u0434\u043b\u044f terraform data sources | |-- guides/ | |-- r/ # \u043d\u0430\u0431\u043e\u0440 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0439 \u0434\u043b\u044f terraform resources | | |-- <resource>.html.markdown | | |-- ... | | | |-- index.html.markdown # \u0441\u0442\u0430\u0440\u0442\u043e\u0432\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 |-- allowed-subcategories.txt # \u0440\u0430\u0437\u0434\u0435\u043b\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0412\u0430\u0436\u043d\u043e! allowed-subcategories.txt \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u0442\u0430\u0440\u0433\u0435\u0442\u0430 make gen \u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0440\u0430\u0437\u0434\u0435\u043b\u0430\u0445 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438. \u041f\u043e\u0441\u043b\u0435 \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c\u0441\u044f \u0431\u0443\u0434\u0443\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0435\u043f\u0443\u0441\u0442\u044b\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044b. \u041e\u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f: https://registry.terraform.io/providers/C2Devel/rockitcloud/latest/docs","title":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f"},{"location":"c2/#_7","text":"\u0414\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043b\u0438\u043d\u0442\u0435\u0440\u043e\u0432 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 Docker \u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u043b\u0438\u043d\u0442\u0435\u0440\u043e\u0432 (\u0441\u043c. \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043b\u0438\u043d\u0442\u0435\u0440\u043e\u0432 ). docs/ : \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 markdown \u0444\u0430\u0439\u043b\u043e\u0432 \u0438 \u043e\u0448\u0438\u0431\u043a\u0438 \u0432 \u0442\u0435\u043a\u0441\u0442\u0435 (English). $ make docs-lint website/ : \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 markdown \u0444\u0430\u0439\u043b\u043e\u0432, \u043e\u0448\u0438\u0431\u043a\u0438 \u0432 \u0442\u0435\u043a\u0441\u0442\u0435 (English) \u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 terraform registry. $ make website-lint $ make docscheck","title":"\u0417\u0430\u043f\u0443\u0441\u043a \u043b\u0438\u043d\u0442\u0435\u0440\u043e\u0432"},{"location":"c2/#website_unsupported","text":"\u0412 website_unsupported/ \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0435\u043d\u044b \u0433\u0430\u0439\u0434\u044b \u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f Rockit Cloud API. \u0414\u043b\u044f \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u043d\u0443\u0436\u043d\u0443\u044e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0443\u044e \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e \u0432 website/ .","title":"\u0414\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f website_unsupported"},{"location":"c2/#_8","text":"\u0420\u0435\u043b\u0438\u0437 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f\u043c\u0438 \u043a \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u0432 terraform registry. \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0440\u0435\u043b\u0438\u0437\u043d\u044b\u0445 \u0430\u0440\u0442\u0435\u0444\u0430\u043a\u0442\u043e\u0432 (\u0441\u0431\u043e\u0440\u043a\u0430 \u043f\u043e\u0434 \u0440\u0430\u0437\u043d\u044b\u0435 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b \u0438 \u041e\u0421, \u043f\u043e\u0434\u043f\u0438\u0441\u044c, \u0430\u0440\u0445\u0438\u0432\u0430\u0446\u0438\u044f \u0438 \u0442.\u0434.) \u043e\u043f\u0438\u0441\u0430\u043d\u0430 \u0432 .goreleaser.yml \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f: \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u043f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044e \u0440\u0435\u043b\u0438\u0437\u0430 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u043d\u0430 github \u043e\u0442 Terraform .","title":"\u0412\u044b\u043f\u0443\u0441\u043a \u0440\u0435\u043b\u0438\u0437\u0430"},{"location":"c2/#_9","text":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 goreleaser \u0412\u0430\u0436\u043d\u043e! \u0414\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0443\u0442\u0438\u043b\u0438\u0442\u044b goreleaser \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d Git \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c 2.3 \u0432\u0435\u0440\u0441\u0438\u0438 $ go install github.com/goreleaser/goreleaser@latest ... $ export GOBIN=$(go env GOPATH)/bin $ $GOBIN/goreleaser -v ... \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 GPG \u043a\u043b\u044e\u0447\u0430 ( \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u043e\u0442 github ) \u0412\u0430\u0436\u043d\u043e! \u041a\u043b\u044e\u0447 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0431\u0435\u0437 \u043f\u0430\u0440\u043e\u043b\u044f \u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e. \u041f\u0440\u0438\u0432\u044f\u0437\u043a\u0430 \u043a\u043b\u044e\u0447\u0430 \u043a github \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0443 \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 GPG_FINGERPRINT $ gpg --list-secret-keys --keyid-format LONG ... sec rsa4096/<id> 2022-04-19 [SC] ... $ gpg --list-secret-keys --with-colons --fingerprint <id> | grep fpr | cut -f 10 -d : <fingerprint> $ export GPG_FINGERPRINT=<fingerprint> \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 Personal Access Token \u0441 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c public_repo ( \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u043e\u0442 github ) \u0412\u0430\u0436\u043d\u043e! \u0421\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d \u043c\u043e\u0436\u043d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0440\u0430\u0437\u0443 \u043f\u043e\u0441\u043b\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 GITHUB_TOKEN $ export GITHUB_TOKEN=<generated token by github>","title":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f"},{"location":"c2/#_10","text":"\u0412\u0435\u0440\u0441\u0438\u0438 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 Semantic Version \u0438 \u043d\u0430\u0447\u0438\u043d\u0430\u0442\u044c\u0441\u044f \u0441 v (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, v1.2.3 \u0438\u043b\u0438 v1.2.3-pre ). \u0412\u0435\u0440\u0441\u0438\u044f \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0432\u0438\u0434\u0435 \u0442\u044d\u0433\u0430. \u0412\u0430\u0436\u043d\u043e! \u041d\u0435 \u0434\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0443\u0436\u0435 \u0432\u044b\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0432\u0435\u0440\u0441\u0438\u0439, \u0442.\u043a. \u043c\u043e\u0433\u0443\u0442 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u0443\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441\u043e \u0441\u043a\u0430\u0447\u0438\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u0438\u0437 terraform registry. \u0421\u0442\u0430\u0440\u0442\u043e\u0432\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f: v24.1.0","title":"\u0412\u0435\u0440\u0441\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"c2/#_11","text":"\u0412\u0430\u0436\u043d\u043e! \u0420\u0435\u043b\u0438\u0437\u044b \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u0432\u044b\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f \u0441 \u0432\u0435\u0442\u043a\u0438 develop (\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0430 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u043e\u0439). \u0412\u0435\u0442\u043a\u0430 main \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 \u0441 upstream. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0440\u0435\u043b\u0438\u0437\u043d\u043e\u0433\u043e PR'\u0430 \u0432 \u0432\u0435\u0442\u043a\u0443 develop (\u043f\u0440\u0438\u043c\u0435\u0440: v24.1.0 ) \u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e. \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0435\u0440\u0441\u0438\u0438 aws-sdk-go , \u0435\u0441\u043b\u0438 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f (\u0441\u043c. \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0432\u0435\u0440\u0441\u0438\u0438 aws-sdk-go ) \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 CHANGELOG.md \u041b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0437\u0430\u043f\u0443\u0441\u043a \u043b\u0438\u043d\u0442\u0435\u0440\u043e\u0432 \u0438 unit \u0442\u0435\u0441\u0442\u043e\u0432 \u043d\u0430 \u0432\u0435\u0442\u043a\u0435 develop + \u0440\u0435\u043b\u0438\u0437\u043d\u044b\u0439 PR $ make lint $ make docs-lint $ make website-lint $ make test \u041c\u0435\u0440\u0434\u0436 \u0440\u0435\u043b\u0438\u0437\u043d\u043e\u0433\u043e PR'\u0430 \u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e. \u0412\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u0440\u0435\u043b\u0438\u0437\u0430 \u0432 github (\u0444\u043b\u0430\u0433 release.draft \u0432 .goreleaser.yml ) # .goreleaser.yml ... release: draft: false \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0440\u0435\u043b\u0438\u0437 \u0431\u0443\u0434\u0435\u0442 \u043e\u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u043d \u0432 origin. \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f: \u043d\u0430 \u0440\u0435\u043b\u0438\u0437\u043d\u043e\u0439 \u0432\u0435\u0442\u043a\u0435 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u043d\u0435\u0437\u0430\u043a\u043e\u043c\u043c\u0438\u0447\u0435\u043d\u043d\u044b\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439, untracked \u0444\u0430\u0439\u043b\u043e\u0432 \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0440\u0435\u043b\u0438\u0437\u043d\u043e\u0433\u043e \u0442\u0435\u0433\u0430 \u0441 \u0432\u0435\u0440\u0441\u0438\u0435\u0439 (\u0441\u043c. \u0432\u0435\u0440\u0441\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 ) \u0438 \u0435\u0433\u043e \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f $ git tag v1.2.3 $ git push <remote> v1.2.3 \u0421\u0431\u043e\u0440\u043a\u0430 \u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u044c \u0440\u0435\u043b\u0438\u0437\u043d\u044b\u0445 \u0430\u0440\u0442\u0435\u0444\u0430\u043a\u0442\u043e\u0432. \u0410\u0440\u0442\u0435\u0444\u0430\u043a\u0442\u044b \u0431\u0443\u0434\u0443\u0442 \u0440\u0430\u0437\u043c\u0435\u0449\u0435\u043d\u044b \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 dist/ $ $GOBIN/goreleaser release --clean --timeout 180m # \u0414\u043b\u044f \u0432\u0435\u0440\u0441\u0438\u0439 goreleaser \u0432\u044b\u0448\u0435 v1.15.0 $ $GOBIN/goreleaser release --rm-dist --timeout 180m # \u0414\u043b\u044f \u0432\u0435\u0440\u0441\u0438\u0439 goreleaser \u043d\u0438\u0436\u0435 v1.15.0 \u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e. \u0415\u0441\u043b\u0438 \u043d\u0430 \u0448\u0430\u0433\u0435 2 \u043d\u0435 \u0431\u044b\u043b\u0430 \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0430 \u0430\u0432\u0442\u043e\u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f ( release.draft: true ): \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0440\u0435\u043b\u0438\u0437\u0430 \u043d\u0430 github \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0430\u0440\u0442\u0435\u0444\u0430\u043a\u0442\u043e\u0432: dist/terraform-provider-rockitcloud_{VERSION}_{OS}_{ARCH}.zip \u0414\u043b\u044f \u0432\u0441\u0435\u0445 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440 \u0438 \u041e\u0421. dist/terraform-provider-rockitcloud_{VERSION}_SHA256SUMS dist/terraform-provider-rockitcloud_{VERSION}_SHA256SUMS.sig terraform-provider-rockitcloud_{VERSION}_manifest.json \u0424\u0430\u0439\u043b \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u0432\u0440\u0443\u0447\u043d\u0443\u044e: cp terraform-registry-manifest.json terraform-provider-rockitcloud_{VERSION}_manifest.json \u0412 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0443\u0431\u043b\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0437\u0430\u043f\u0438\u0441\u044c \u0438\u0437 CHANGELOG.md.","title":"\u0420\u0435\u043b\u0438\u0437"},{"location":"c2/#terraform-registry","text":"\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f: \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u043f\u043e \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u043e\u0442 Terraform . \u0412\u0430\u0436\u043d\u043e! \u0414\u043b\u044f \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u0432 terraform registry \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u0430 \u0432\u044b\u043f\u0443\u0449\u0435\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f. \u041f\u043e\u0440\u044f\u0434\u043e\u043a \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432 terraform registry \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e github \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 GPG \u043a\u043b\u044e\u0447\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0441\u044f \u0434\u043b\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u0438 \u0440\u0435\u043b\u0438\u0437\u0430 (\u0441\u043c. \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f , \u0448\u0430\u0433 2) \u0432 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u0445 \u043f\u0440\u043e\u0444\u0438\u043b\u044f $ gpg --list-secret-keys --keyid-format LONG ... sec rsa4096/<id> 2022-04-19 [SC] ... $ gpg --armor --export <id> -----BEGIN PGP PUBLIC KEY BLOCK----- ... \u0412\u044b\u0431\u043e\u0440 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u0432 \u043c\u0435\u043d\u044e Publish -> Provider \u0438 \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f \u041f\u043e\u0441\u043b\u0435 \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u0434\u043b\u044f \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u043d webhook \u043d\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u0438\u0437 \u0433\u0440\u0443\u043f\u043f\u044b Releases . \u041d\u043e\u0432\u044b\u0435 \u0440\u0435\u043b\u0438\u0437\u044b \u0431\u0443\u0434\u0443\u0442 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u043e\u0434\u0442\u044f\u043d\u0443\u0442\u044b \u0432 registry. \u0412\u0430\u0436\u043d\u043e! Terraform \u043d\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u043e\u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440 \u0438\u043b\u0438 \u043e\u0434\u043d\u0443 \u0438\u0437 \u0435\u0433\u043e \u0432\u0435\u0440\u0441\u0438\u0439. \u041d\u0435 \u0434\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0443\u0436\u0435 \u0432\u044b\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0432\u0435\u0440\u0441\u0438\u0439. \u041e\u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440: https://registry.terraform.io/providers/C2Devel/rockitcloud","title":"\u041f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u0432 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u043c terraform registry"},{"location":"c2/#private-terraform-registry","text":"Terraform registry \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u0430\u043d \u0432 \u0432\u0438\u0434\u0435 s3 \u0431\u0430\u043a\u0435\u0442\u0430. \u0412\u0430\u0436\u043d\u043e! \u0423 \u0431\u0430\u043a\u0435\u0442\u0430 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d \u0434\u043e\u0441\u0442\u0443\u043f \u043f\u043e https ( \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f ). \u041f\u0440\u0438 \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 web-\u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u043d\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0443\u043a\u0430\u0437\u0430\u0442\u044c index.json . \u0421\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430, terraform registry \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u0444\u0430\u0439\u043b\u044b \u0441 \u0432\u0435\u0440\u0441\u0438\u044f\u043c\u0438 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u043e\u0432 \u0438 \u043c\u0435\u0442\u0430\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0431\u043e\u0440\u043a\u0438, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0443\u043a\u0430\u0437\u0430\u043d\u044b \u0441\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u0430\u0440\u0442\u0435\u0444\u0430\u043a\u0442\u044b.","title":"\u041f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u0432 private terraform registry"},{"location":"c2/#s3","text":".well-known/ |-- terraform.json # \u0441\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0439 \u0444\u0430\u0439\u043b providers/ |-- c2devel/ # \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a |-- rockitcloud/ # \u0438\u043c\u044f \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 |-- 1.0.0/ | |-- download/ | |-- linux/ | | |-- amd64/ | | | |-- index.json # \u043c\u0435\u0442\u0430\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u0441\u0431\u043e\u0440\u043a\u0438 1.0.0_linux_amd64 | | |-- ... | |-- ... | |-- versions/ |-- index.json # \u0432\u0435\u0440\u0441\u0438\u0438 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 .well-known/terraform.json \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u043f\u0435\u0440\u0432\u043e\u043c \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0438 \u043a registry \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438. \u0422\u0430\u043a\u0436\u0435 \u0432 \u043d\u0435\u043c \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0431\u0430\u0437\u043e\u0432\u044b\u0439 url \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u043e\u0432. # .well-known/terraform.json { \"providers.v1\": \"/providers/\" } \u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u0432\u0438\u0434 \u0444\u0430\u0439\u043b\u0430 \u0441 \u0432\u0435\u0440\u0441\u0438\u044f\u043c\u0438 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430: # providers/c2devel/rockitcloud/versions/index.json { \"id\": \"c2devel/rockitcloud\", \"versions\": [], \"warnings\": null }","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 s3 \u0431\u0430\u043a\u0435\u0442\u0430"},{"location":"c2/#_12","text":"\u041f\u043e\u0441\u043b\u0435 \u0440\u0435\u043b\u0438\u0437\u0430 \u043d\u043e\u0432\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0438 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 (\u0441\u043c. \u0440\u0435\u043b\u0438\u0437 ) \u0430\u0440\u0442\u0435\u0444\u0430\u043a\u0442\u044b \u0431\u0443\u0434\u0443\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 dist/ . \u0414\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0432\u0435\u0440\u0441\u0438\u0438 \u0432 s3 \u0431\u0430\u043a\u0435\u0442 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0444\u0430\u0439\u043b\u044b \u0441 \u0432\u0435\u0440\u0441\u0438\u044f\u043c\u0438 \u0438 \u043c\u0435\u0442\u0430\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439. \u0418\u0445 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u0437 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0433\u043e terraform registry, \u0435\u0441\u043b\u0438 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440 \u0443\u0436\u0435 \u043e\u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u043d, \u0438\u043b\u0438 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u043e\u043c . \u0415\u0441\u043b\u0438 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 s3 \u0431\u0430\u043a\u0435\u0442\u0430 \u0438 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0439, \u0441\u043c. \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 s3 \u0431\u0430\u043a\u0435\u0442\u0430 . \u041f\u043e\u0440\u044f\u0434\u043e\u043a \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438: \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0435\u0440\u0441\u0438\u0439 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430. \u0412 \u0444\u0430\u0439\u043b\u0435 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f $ curl https://registry.terraform.io/v1/providers/c2devel/rockitcloud/versions --output versions.json \u0412 \u0431\u043b\u043e\u043a\u0435 versions.<version>.platforms \u0443\u043a\u0430\u0437\u0430\u043d\u044b \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b \u0438 \u041e\u0421, \u043f\u043e\u0434 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0435\u0440\u0441\u0438\u044f \u0441\u043e\u0431\u0438\u0440\u0430\u043b\u0430\u0441\u044c. 2. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0430\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u0441\u0431\u043e\u0440\u043e\u043a \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 $ curl https://registry.terraform.io/v1/providers/c2devel/rockitcloud/<version>/download/<os>/<arch> --output <version>_<os>_<arch>.json \u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e. \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0430\u0440\u0442\u0435\u0444\u0430\u043a\u0442\u043e\u0432 \u0432 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435. \u0410\u0440\u0442\u0435\u0444\u0430\u043a\u0442\u044b \u043c\u043e\u0436\u043d\u043e \u0441\u043a\u0430\u0447\u0430\u0442\u044c \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0430\u043c \u0432 \u043c\u0435\u0442\u0430\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0438\u043b\u0438 \u0441\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0437 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 dist/ : dist/terraform-provider-rockitcloud_{VERSION}_{OS}_{ARCH}.zip \u0414\u043b\u044f \u0432\u0441\u0435\u0445 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440 \u0438 \u041e\u0421. dist/terraform-provider-rockitcloud_{VERSION}_SHA256SUMS dist/terraform-provider-rockitcloud_{VERSION}_SHA256SUMS.sig \u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e. \u0415\u0441\u043b\u0438 \u0431\u044b\u043b \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d \u0448\u0430\u0433 3: \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0441\u044b\u043b\u043e\u043a \u0432 \u043c\u0435\u0442\u0430\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 s3 \u0431\u0430\u043a\u0435\u0442\u0430: \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430 \u0441 \u0432\u0435\u0440\u0441\u0438\u044f\u043c\u0438: version.json -> providers/c2devel/rockitcloud/versions/index.json \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043c\u0435\u0442\u0430\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0441\u0431\u043e\u0440\u043e\u043a \u0432\u0435\u0440\u0441\u0438\u0438: <version>_<os>_<arch>.json -> providers/c2devel/rockitcloud/<version>/download/<os>/<arch>/index.json \u0412\u0430\u0436\u043d\u043e! \u0424\u0430\u0439\u043b\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u044b \u0441 mime-\u0442\u0438\u043f\u043e\u043c \"application/json\". \u0414\u043b\u044f \u0444\u0430\u0439\u043b\u043e\u0432 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043e\u0442\u043a\u0440\u044b\u0442 \u0434\u043e\u0441\u0442\u0443\u043f \u043d\u0430 \u0447\u0442\u0435\u043d\u0438\u0435 \u0431\u0435\u0437 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438.","title":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043d\u043e\u0432\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0438"},{"location":"c2/#_13","text":"\u0414\u043b\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u043d\u043e\u0432\u044b\u0445 \u0432\u0435\u0440\u0441\u0438\u0439 \u0432 s3 \u0431\u0430\u043a\u0435\u0442 \u0438\u0437 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0433\u043e terraform registry \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c bash \u0441\u043a\u0440\u0438\u043f\u0442 . \u0421\u043a\u0440\u0438\u043f\u0442 \u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0444\u0430\u0439\u043b\u044b \u0441 \u0432\u0435\u0440\u0441\u0438\u044f\u043c\u0438 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u0432 s3 \u0431\u0430\u043a\u0435\u0442\u0435 \u0438 \u0432 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u043c registry \u0438 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0432\u0435\u0440\u0441\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0432 \u0431\u0430\u043a\u0435\u0442\u0435, \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0433\u043e registry \u0444\u0430\u0439\u043b\u044b \u0441 \u043c\u0435\u0442\u0430\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u0434\u043b\u044f \u0441\u0431\u043e\u0440\u043e\u043a. \u0412\u0430\u0436\u043d\u043e! \u0424\u0430\u0439\u043b \u0441 \u0432\u0435\u0440\u0441\u0438\u044f\u043c\u0438 \u0432 s3 \u0431\u0430\u043a\u0435\u0442\u0435 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d \u043a \u0432\u0438\u0434\u0443 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0433\u043e registry. \u0414\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0443\u0442\u0438\u043b\u0438\u0442\u044b s3cmd ( \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f ) \u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0439 s3 \u0431\u0430\u043a\u0435\u0442 (\u0441\u043c. \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 s3 \u0431\u0430\u043a\u0435\u0442\u0430 ). \u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u0441\u043a\u0440\u0438\u043f\u0442\u0430: TF_REGISTRY_URL - url terraform registry, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"https://registry.terraform.io/\" S3_REGISTRY_URL - url s3 registry, \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e S3_BUCKET_NAME - \u0438\u043c\u044f \u0431\u0430\u043a\u0435\u0442\u0430, \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e PROVIDER_NAME - \u0438\u043c\u044f \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: \"c2devel/rockitcloud\" S3_BACKUP_DIR - \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f \u0434\u043b\u044f \u0431\u044d\u043a\u0430\u043f\u0430 \u0431\u0430\u043a\u0435\u0442\u0430, \u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e. \u0415\u0441\u043b\u0438 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u0430, \u0431\u044d\u043a\u0430\u043f \u0441\u0434\u0435\u043b\u0430\u043d \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u043a\u0440\u0438\u043f\u0442\u0430: $ cd scripts $ ./update-s3-registry.sh ...","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043a\u0440\u0438\u043f\u0442\u0430"},{"location":"c2/#_14","text":"\u041f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440 \u0432 terraform registry: https://registry.terraform.io/providers/C2Devel/rockitcloud \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f Terraform \u0434\u043b\u044f C2: C2Devel/terraform-examples \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 C2Devel/rockitcloud \u043f\u043e\u0441\u043b\u0435 \u0435\u0433\u043e \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u0432 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u043c terraform registry: # provider.tf terraform { required_providers { aws = { # case-insensistive source = \"c2devel/rockitcloud\" version = \"24.1.0\" } } } provider \"aws\" { # Configuration options } \u0412\u0430\u0436\u043d\u043e! \u0412 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0438\u043c\u0435\u043d\u0438 \u043f\u0440\u043e\u0432\u0430\u0434\u0439\u0435\u0440\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f aws , \u0442.\u043a. \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0430 \u0441\u0445\u0435\u043c\u0430 \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f terraform \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432: aws_ . \u0415\u0441\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u0440\u0443\u0433\u043e\u0435 \u0438\u043c\u044f (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, rockitcloud ), Terraform \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u043e\u043f\u044b\u0442\u0430\u0435\u0442\u0441\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440 hashicorp/aws *. \u0415\u0441\u043b\u0438 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440 \u043e\u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u043d \u0432 s3 \u0431\u0430\u043a\u0435\u0442\u0435, \u0432 \u043f\u043e\u043b\u0435 source \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f url \u0431\u0430\u043a\u0435\u0442\u0430 \u0431\u0435\u0437 \u0441\u0445\u0435\u043c\u044b. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, tf-registry.rockitcloud.ru/c2devel/rockitcloud .","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430"},{"location":"c2/#_15","text":"\u0422\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e \u0441\u043e\u0431\u0440\u0430\u0442\u044c \u0430\u0440\u0442\u0435\u0444\u0430\u043a\u0442, \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0443 go build -o terraform-provider-<name> , \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c Terraform (v0.14+) \u043d\u0430 \u0435\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f Terraform \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0444\u0430\u0439\u043b\u0435 ~/.terraformrc . \u0414\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0443\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e. \u041f\u0440\u0438\u043c\u0435\u0440 dev \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 dev.tfrc , \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u043a \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0443 c2devel/<name> \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0430\u0440\u0442\u0435\u0444\u0430\u043a\u0442 terraform-provider-<name> : # dev.tfrc provider_installation { dev_overrides { \"c2devel/<name>\" = \"<absolute-path-to-artifact-dir>\" } direct {} } \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 dev.tfrc \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 Terraform \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438: $ export TF_CLI_CONFIG_FILE=<path-to-dev.tfrc> \u0412\u0430\u0436\u043d\u043e! \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u043b\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d terraform init (\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u044b \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u044b, \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d lock \u0444\u0430\u0439\u043b), \u0430 \u043f\u043e\u0442\u043e\u043c \u0443\u0436\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043e \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 \u0441\u0432\u043e\u0439 \u0430\u0440\u0442\u0435\u0444\u0430\u043a\u0442. \u041f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c terraform init \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0438 \u043d\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f, \u0442.\u043a. Terraform \u0431\u0443\u0434\u0435\u0442 \u043f\u044b\u0442\u0430\u0442\u044c\u0441\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0432\u0441\u0435 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u044b \u0438\u0437 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0433\u043e registry, \u0432 \u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0435 \u0438 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439. \u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u043a \u043e\u0448\u0438\u0431\u043a\u0430\u043c.","title":"\u041b\u043e\u043a\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0431\u043e\u0440\u043a\u0430"},{"location":"c2/#todo","text":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 github actions: \u043f\u0440\u043e\u0433\u043e\u043d \u0442\u0435\u0441\u0442\u043e\u0432, \u043f\u0440\u043e\u0433\u043e\u043d \u043b\u0438\u043d\u0442\u0435\u0440\u043e\u0432, \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 PR \u0414\u043e\u0440\u0430\u0431\u043e\u0442\u043a\u0430 acceptance \u0442\u0435\u0441\u0442\u043e\u0432 \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043d\u0430 C2 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432 make build \u043a\u043e\u043c\u0430\u043d\u0434\u0443 go build \u0432\u043c\u0435\u0441\u0442\u043e go install \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0434\u0430\u0442\u044c \u0438\u043c\u044f \u0430\u0440\u0442\u0435\u0444\u0430\u043a\u0442\u0430 \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0441\u0445\u0435\u043c\u0443 \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432: aws_ -> rockitcloud_ **, \u0447\u0442\u043e\u0431\u044b \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0438\u043c\u0435\u043d\u0438 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 rockitcloud . \u041f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u0438 \u0441 aws \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f\u043c\u0438","title":"TODO"},{"location":"contributing/","text":"Contributing to the Terraform AWS Provider # First, if you're unsure or afraid of anything , ask for help! You can open a draft pull request (PR) or an issue with what you know. We'll do our best to guide you in the right direction, and let you know if there are guidelines to follow. We want people to be able to participate without fear of doing the wrong thing. Second, not all of this documentation is up-to-date. If you see something that's not quite right, please submit a PR. Documentation-only PRs are often merged more quickly than code. Third, we don't always respond as quickly as we'd like. There's a lot going on. We prioritize certain aspects of the codebase but those priorities do shift over time. If we haven't gotten to something you find important, it's likely it's on our radar. We're working through other priorities to get to it. To improve the review and merge process, please do your best to follow the documentation. Below are our expectations for contributors. Following these guidelines gives us the best opportunity to work with you, by making sure we have the things we need in order to make it happen. Doing your best to follow it will speed up our ability to merge PRs and respond to issues. Getting Started # Set Up Your Development Environment FAQ Core Services Provider Design Naming Conventions Process # Contribution Types and Checklists Issue Reporting and Lifecycle Maintainers and Maintaining the Repository Pull Request Submission and Lifecycle Reference # Acceptance Tests, Running and Writing Data Handling and Conversion Error Handling Retries and Waiters","title":"Contributing to the Terraform AWS Provider"},{"location":"contributing/#contributing-to-the-terraform-aws-provider","text":"First, if you're unsure or afraid of anything , ask for help! You can open a draft pull request (PR) or an issue with what you know. We'll do our best to guide you in the right direction, and let you know if there are guidelines to follow. We want people to be able to participate without fear of doing the wrong thing. Second, not all of this documentation is up-to-date. If you see something that's not quite right, please submit a PR. Documentation-only PRs are often merged more quickly than code. Third, we don't always respond as quickly as we'd like. There's a lot going on. We prioritize certain aspects of the codebase but those priorities do shift over time. If we haven't gotten to something you find important, it's likely it's on our radar. We're working through other priorities to get to it. To improve the review and merge process, please do your best to follow the documentation. Below are our expectations for contributors. Following these guidelines gives us the best opportunity to work with you, by making sure we have the things we need in order to make it happen. Doing your best to follow it will speed up our ability to merge PRs and respond to issues.","title":"Contributing to the Terraform AWS Provider"},{"location":"contributing/#getting-started","text":"Set Up Your Development Environment FAQ Core Services Provider Design Naming Conventions","title":"Getting Started"},{"location":"contributing/#process","text":"Contribution Types and Checklists Issue Reporting and Lifecycle Maintainers and Maintaining the Repository Pull Request Submission and Lifecycle","title":"Process"},{"location":"contributing/#reference","text":"Acceptance Tests, Running and Writing Data Handling and Conversion Error Handling Retries and Waiters","title":"Reference"},{"location":"contributing/contribution-checklists/","text":"Contribution Types and Checklists # There are several different kinds of contribution, each of which has its own standards for a speedy review. The following sections describe guidelines for each type of contribution. Documentation Update Enhancement/Bugfix to a Resource Adding Resource Import Support Adding Resource Name Generation Support Resource Name Generation Code Implementation Resource Name Generation Testing Implementation Resource Name Generation Documentation Implementation Resource Name Generation With Suffix Adding Resource Policy Support Adding Resource Tagging Support Generating Tag Code for a Service Resource Tagging Code Implementation Resource Tagging Acceptance Testing Implementation Resource Tagging Documentation Implementation Adding Resource Filtering Support Adding Service to Filter Generating Code Resource Filtering Code Implementation Resource Filtering Documentation Implementation New Resource New Tag Resource New Service New Region Documentation Update # The Terraform AWS Provider's website source is in this repository along with the code and tests. Below are some common items that will get flagged during documentation reviews: [ ] Reasoning for Change : Documentation updates should include an explanation for why the update is needed. [ ] Prefer AWS Documentation : Documentation about AWS service features and valid argument values that are likely to update over time should link to AWS service user guides and API references where possible. [ ] Large Example Configurations : Example Terraform configuration that includes multiple resource definitions should be added to the repository examples directory instead of an individual resource documentation page. Each directory under examples should be self-contained to call terraform apply without special configuration. [ ] Terraform Configuration Language Features : Individual resource documentation pages and examples should refrain from highlighting particular Terraform configuration language syntax workarounds or features such as variable , local , count , and built-in functions. Enhancement/Bugfix to a Resource # Working on existing resources is a great way to get started as a Terraform contributor because you can work within existing code and tests to get a feel for what to do. In addition to the below checklist, please see the Common Review Items sections for more specific coding and testing guidelines. [ ] Acceptance test coverage of new behavior : Existing resources each have a set of [acceptance tests][acctests] covering their functionality. These tests should exercise all the behavior of the resource. Whether you are adding something or fixing a bug, the idea is to have an acceptance test that fails if your code were to be removed. Sometimes it is sufficient to \"enhance\" an existing test by adding an assertion or tweaking the config that is used, but it's often better to add a new test. You can copy/paste an existing test and follow the conventions you see there, modifying the test to exercise the behavior of your code. [ ] Documentation updates : If your code makes any changes that need to be documented, you should include those doc updates in the same PR. This includes things like new resource attributes or changes in default values. [ ] Well-formed Code : Do your best to follow existing conventions you see in the codebase, and ensure your code is formatted with go fmt . The PR reviewers can help out on this front, and may provide comments with suggestions on how to improve the code. [ ] Dependency updates : Create a separate PR if you are updating dependencies. This is to avoid conflicts as version updates tend to be fast- moving targets. We will plan to merge the PR with this change first. Adding Resource Import Support # Adding import support for Terraform resources will allow existing infrastructure to be managed within Terraform. This type of enhancement generally requires a small to moderate amount of code changes. Comprehensive code examples and information about resource import support can be found in the Extending Terraform documentation . In addition to the below checklist and the items noted in the Extending Terraform documentation, please see the Common Review Items sections for more specific coding and testing guidelines. [ ] Resource Code Implementation : In the resource code (e.g., internal/service/{service}/{thing}.go ), implementation of Importer State function [ ] Resource Acceptance Testing Implementation : In the resource acceptance testing (e.g., internal/service/{service}/{thing}_test.go ), implementation of TestStep s with ImportState: true [ ] Resource Documentation Implementation : In the resource documentation (e.g., website/docs/r/service_thing.html.markdown ), addition of Import documentation section at the bottom of the page Adding Resource Name Generation Support # Terraform AWS Provider resources can use shared logic to support and test name generation, where the operator can choose between an expected naming value, a generated naming value with a prefix, or a fully generated name. Implementing name generation support for Terraform AWS Provider resources requires the following, each with its own section below: [ ] Resource Name Generation Code Implementation : In the resource code (e.g., internal/service/{service}/{thing}.go ), implementation of name_prefix attribute, along with handling in Create function. [ ] Resource Name Generation Testing Implementation : In the resource acceptance testing (e.g., internal/service/{service}/{thing}_test.go ), implementation of new acceptance test functions and configurations to exercise new naming logic. [ ] Resource Name Generation Documentation Implementation : In the resource documentation (e.g., website/docs/r/service_thing.html.markdown ), addition of name_prefix argument and update of name argument description. Resource Name Generation Code Implementation # In the resource Go file (e.g., internal/service/{service}/{thing}.go ), add the following Go import: \"github.com/hashicorp/terraform-provider-aws/internal/create\" In the resource schema, add the new name_prefix attribute and adjust the name attribute to be Optional , Computed , and ConflictsWith the name_prefix attribute. Ensure to keep any existing schema fields on name such as ValidateFunc . E.g. \"name\" : { Type : schema . TypeString , Optional : true , Computed : true , ForceNew : true , ConflictsWith : [] string { \"name_prefix\" }, }, \"name_prefix\" : { Type : schema . TypeString , Optional : true , Computed : true , ForceNew : true , ConflictsWith : [] string { \"name\" }, }, In the resource Create function, switch any calls from d.Get(\"name\").(string) to instead use the create.Name() function, e.g. name := create . Name ( d . Get ( \"name\" ).( string ), d . Get ( \"name_prefix\" ).( string )) // ... in AWS Go SDK Input types, etc. use aws.String(name) If the resource supports import, in the resource Read function add a call to d.Set(\"name_prefix\", ...) , e.g. d . Set ( \"name\" , resp . Name ) d . Set ( \"name_prefix\" , create . NamePrefixFromName ( aws . StringValue ( resp . Name ))) Resource Name Generation Testing Implementation # In the resource testing (e.g., internal/service/{service}/{thing}_test.go ), add the following Go import: \"github.com/hashicorp/terraform-provider-aws/internal/create\" In the resource testing, implement two new tests named _Name_Generated and _NamePrefix with associated configurations, that verifies creating the resource without name and name_prefix arguments (for the former) and with only the name_prefix argument (for the latter). E.g. func TestAccServiceThing_nameGenerated ( t * testing . T ) { var thing service . ServiceThing resourceName := \"aws_service_thing.test\" resource . ParallelTest ( t , resource . TestCase { PreCheck : func () { acctest . PreCheck ( t ) }, ErrorCheck : acctest . ErrorCheck ( t , service . EndpointsID ), ProviderFactories : acctest . ProviderFactories , CheckDestroy : testAccCheckThingDestroy , Steps : [] resource . TestStep { { Config : testAccThingNameGeneratedConfig (), Check : resource . ComposeTestCheckFunc ( testAccCheckThingExists ( resourceName , & thing ), create . TestCheckResourceAttrNameGenerated ( resourceName , \"name\" ), resource . TestCheckResourceAttr ( resourceName , \"name_prefix\" , resource . UniqueIdPrefix ), ), }, // If the resource supports import: { ResourceName : resourceName , ImportState : true , ImportStateVerify : true , }, }, }) } func TestAccServiceThing_namePrefix ( t * testing . T ) { var thing service . ServiceThing resourceName := \"aws_service_thing.test\" resource . ParallelTest ( t , resource . TestCase { PreCheck : func () { acctest . PreCheck ( t ) }, ErrorCheck : acctest . ErrorCheck ( t , service . EndpointsID ), ProviderFactories : acctest . ProviderFactories , CheckDestroy : testAccCheckThingDestroy , Steps : [] resource . TestStep { { Config : testAccThingNamePrefixConfig ( \"tf-acc-test-prefix-\" ), Check : resource . ComposeTestCheckFunc ( testAccCheckThingExists ( resourceName , & thing ), create . TestCheckResourceAttrNameFromPrefix ( resourceName , \"name\" , \"tf-acc-test-prefix-\" ), resource . TestCheckResourceAttr ( resourceName , \"name_prefix\" , \"tf-acc-test-prefix-\" ), ), }, // If the resource supports import: { ResourceName : resourceName , ImportState : true , ImportStateVerify : true , }, }, }) } func testAccThingNameGeneratedConfig () string { return fmt . Sprintf ( ` resource \"aws_service_thing\" \"test\" { # ... other configuration ... } ` ) } func testAccThingNamePrefixConfig ( namePrefix string ) string { return fmt . Sprintf ( ` resource \"aws_service_thing\" \"test\" { # ... other configuration ... name_prefix = %[1]q } ` , namePrefix ) } Resource Name Generation Documentation Implementation # In the resource documentation (e.g., website/docs/r/service_thing.html.markdown ), add the following to the arguments reference: * `name_prefix` - (Optional) Creates a unique name beginning with the specified prefix. Conflicts with `name` . Adjust the existing name argument reference to ensure its denoted as Optional , includes a mention that it can be generated, and that it conflicts with name_prefix : * `name` - (Optional) Name of the thing. If omitted, Terraform will assign a random, unique name. Conflicts with `name_prefix` . Resource Name Generation With Suffix # Some generated resource names require a fixed suffix (for example Amazon SNS FIFO topic names must end in .fifo ). In these cases use create.NameWithSuffix() in the resource Create function and create.NamePrefixFromNameWithSuffix() in the resource Read function, e.g. name := create . NameWithSuffix ( d . Get ( \"name\" ).( string ), d . Get ( \"name_prefix\" ).( string ), \".fifo\" ) and d . Set ( \"name\" , resp . Name ) d . Set ( \"name_prefix\" , create . NamePrefixFromNameWithSuffix ( aws . StringValue ( resp . Name ), \".fifo\" )) There are also functions create.TestCheckResourceAttrNameWithSuffixGenerated and create.TestCheckResourceAttrNameWithSuffixFromPrefix for use in tests. Adding Resource Policy Support # Some AWS components support resource-based IAM policies to control permissions. When implementing this support in the Terraform AWS Provider, we typically prefer creating a separate resource, aws_{SERVICE}_{THING}_policy (e.g., aws_s3_bucket_policy ). See the New Resource section for more information about implementing the separate resource and the Provider Design page for rationale. Adding Resource Tagging Support # AWS provides key-value metadata across many services and resources, which can be used for a variety of use cases including billing, ownership, and more. See the AWS Tagging Strategy page for more information about tagging at a high level. As of version 3.38.0 of the Terraform AWS Provider, resources that previously implemented tagging support via the argument tags , now support provider-wide default tagging. Thus, for in-flight and future contributions, implementing tagging support for Terraform AWS Provider resources requires the following, each with its own section below: [ ] Generated Service Tagging Code : Each service has a generate.go file where generator directives live. Through these directives and their flags, you can customize code generation for the service. You can find the code that the tagging generator generates in a tags_gen.go file in a service, such as internal/service/ec2/tags_gen.go . Unlike previously, you should generally not need to edit the generator code (i.e., in internal/generate/tags ). [ ] Resource Tagging Code Implementation : In the resource code (e.g., internal/service/{service}/{thing}.go ), implementation of tags and tags_all schema attributes, along with implementation of CustomizeDiff in the resource definition and handling in Create , Read , and Update functions. [ ] Resource Tagging Acceptance Testing Implementation : In the resource acceptance testing (e.g., internal/service/{service}/{thing}_test.go ), implementation of new acceptance test function and configurations to exercise new tagging logic. [ ] Resource Tagging Documentation Implementation : In the resource documentation (e.g., website/docs/r/service_thing.html.markdown ), addition of tags argument and tags_all attribute. Generating Tag Code for a Service # This step is only necessary for the first implementation and may have been previously completed. If so, move on to the next section. More details about this code generation, including fixes for potential error messages in this process, can be found in the generate documentation . Open the AWS Go SDK documentation for the service, e.g., for service/eks . Note: there can be a delay between the AWS announcement and the updated AWS Go SDK documentation. Use the AWS Go SDK to determine which types of tagging code to generate. There are three main types of tagging code you can generate: service tags, list tags, and update tags. These are not mutually exclusive and some services use more than one. Determine if a service already has a generate.go file (e.g., internal/service/eks/generate.go ). If none exists, follow the example of other generate.go files in many other services. This is a very simple file, perhaps 3-5 lines long, and must only contain generate directives at the very top of the file and a package declaration (e.g., package eks ) -- nothing else . Check for a tagging code directive: //go:generate go run ../../generate/tags/main.go . If one does not exist, add it. Note that without flags, the directive itself will not do anything useful. WARNING: You must never have more than one generate/tags/main.go directive in a generate.go file. Even if you want to generate all three types of tag code, you will use multiple flags but only one generate/tags/main.go directive! Including more than one directive will cause the generator to overwrite one set of generated code with whatever is specified in the next directive. If the service supports service tags, determine the service's \"type\" of tagging implementation. Some services will use a simple map style ( map[string]*string in Go) while others will have a separate structure ( []service.Tag struct with Key and Value fields). If the type is a map, add a new flag to the tagging directive (see above): -ServiceTagsMap . If the type is struct , add a -ServiceTagsSlice flag. If you use the -ServiceTagsSlice flag and if the struct name is not exactly Tag , you must include the -TagType flag with the name of the struct (e.g., -TagType=S3Tag ). If the key and value elements of the struct are not exactly Key and Value respectively, you must include the -TagTypeKeyElem and/or -TagTypeValElem flags with the correct names. In summary, you may need to include one or more of the following flags with -ServiceTagsSlice in order to properly customize the generated code: -TagKeyType , TagPackage , TagResTypeElem , TagType , TagType2 , TagTypeAddBoolElem , TagTypeAddBoolElemSnake , TagTypeIDElem , TagTypeKeyElem , and TagTypeValElem . If the service supports listing tags (usually a ListTags or ListTagsForResource API call), follow these guidelines. Add a new flag to the tagging directive (see above): -ListTags . If the API list operation is not exactly ListTagsForResource , include the -ListTagsOp flag with the name of the operation (e.g., -ListTagsOp=DescribeTags ). If the API list tags operation identifying element is not exactly ResourceArn , include the -ListTagsInIDElem flag with the name of the element (e.g., -ListTagsInIDElem=ResourceARN ). If the API list tags operation identifying element needs a slice, include the -ListTagsInIDNeedSlice flag with a yes value (e.g., -ListTagsInIDNeedSlice=yes ). If the API list tags operation output element is not exactly Tags , include the -ListTagsOutTagsElem flag with the name of the element (e.g., -ListTagsOutTagsElem=TagList ). In summary, you may need to include one or more of the following flags with -ListTags in order to properly customize the generated code: ListTagsInFiltIDName , ListTagsInIDElem , ListTagsInIDNeedSlice , ListTagsOp , ListTagsOutTagsElem , TagPackage , TagResTypeElem , and TagTypeIDElem . If the service API supports updating tags (usually TagResource and UntagResource API calls), follow these guidelines. Add a new flag to the tagging directive (see above): -UpdateTags . If the API tag operation is not exactly TagResource , include the -TagOp flag with the name of the operation (e.g., -TagOp=AddTags ). If the API untag operation is not exactly UntagResource , include the -UntagOp flag with the name of the operation (e.g., -UntagOp=RemoveTags ). If the API operation identifying element is not exactly ResourceArn , include the -TagInIDElem flag with the name of the element (e.g., -TagInIDElem=ResourceARN ). If the API untag operation tags input element is not exactly TagKeys , include the -UntagInTagsElem flag with the name of the element (e.g., -UntagInTagsElem=Keys ). In summary, you may need to include one or more of the following flags with -UpdateTags in order to properly customize the generated code: TagInCustomVal , TagInIDElem , TagInIDNeedSlice , TagInTagsElem , TagOp , TagOpBatchSize , TagPackage , TagResTypeElem , TagTypeAddBoolElem , TagTypeIDElem , UntagInCustomVal , UntagInNeedTagKeyType , UntagInNeedTagType , UntagInTagsElem , and UntagOp . Run make gen ( go generate ./... ) and ensure there are no errors via make test ( go test ./... ) Resource Tagging Code Implementation # In the resource Go file (e.g., internal/service/eks/cluster.go ), add the following Go import: tftags \"github.com/hashicorp/terraform-provider-aws/internal/tags\" In the resource schema, add \"tags\": tagsSchema(), and \"tags_all\": tagsSchemaComputed(), In the schema.Resource struct definition, add the CustomizeDiff: SetTagsDiff handling essential to resource support for default tags: func ResourceCluster () * schema . Resource { return & schema . Resource { /* ... other configuration ... */ CustomizeDiff : verify . SetTagsDiff , } } If the resource already contains a CustomizeDiff function, append the SetTagsDiff via the customdiff.Sequence method: func ResourceExample () * schema . Resource { return & schema . Resource { /* ... other configuration ... */ CustomizeDiff : customdiff . Sequence ( resourceExampleCustomizeDiff , verify . SetTagsDiff , ), } } If the API supports tagging on creation (the Input struct accepts a Tags field), in the resource Create function, implement the logic to convert the configuration tags into the service tags, e.g., with EKS Clusters: // Typically declared near conn := /* ... */ defaultTagsConfig := meta .( * AWSClient ). DefaultTagsConfig tags := defaultTagsConfig . MergeTags ( tftags . New ( d . Get ( \"tags\" ).( map [ string ] interface {}))) input := & eks . CreateClusterInput { /* ... other configuration ... */ Tags : Tags ( tags . IgnoreAWS ()), } If the service API does not allow passing an empty list, the logic can be adjusted similar to: // Typically declared near conn := /* ... */ defaultTagsConfig := meta .( * AWSClient ). DefaultTagsConfig tags := defaultTagsConfig . MergeTags ( tftags . New ( d . Get ( \"tags\" ).( map [ string ] interface {}))) input := & eks . CreateClusterInput { /* ... other configuration ... */ } if len ( tags ) > 0 { input . Tags = Tags ( tags . IgnoreAWS ()) } Otherwise if the API does not support tagging on creation (the Input struct does not accept a Tags field), in the resource Create function, implement the logic to convert the configuration tags into the service API call to tag a resource, e.g., with Elasticsearch Domain: // Typically declared near conn := /* ... */ defaultTagsConfig := meta .( * AWSClient ). DefaultTagsConfig tags := defaultTagsConfig . MergeTags ( tftags . New ( d . Get ( \"tags\" ).( map [ string ] interface {}))) if len ( tags ) > 0 { if err := UpdateTags ( conn , d . Id (), nil , tags ); err != nil { return fmt . Errorf ( \"error adding Elasticsearch Cluster (%s) tags: %w\" , d . Id (), err ) } } Some EC2 resources (e.g., aws_ec2_fleet ) have a TagSpecifications field in the InputStruct instead of a Tags field. In these cases the ec2TagSpecificationsFromKeyValueTags() helper function should be used. This example shows using TagSpecifications : // Typically declared near conn := /* ... */ defaultTagsConfig := meta .( * AWSClient ). DefaultTagsConfig tags := defaultTagsConfig . MergeTags ( tftags . New ( d . Get ( \"tags\" ).( map [ string ] interface {}))) input := & ec2 . CreateFleetInput { /* ... other configuration ... */ TagSpecifications : ec2TagSpecificationsFromKeyValueTags ( tags , ec2 . ResourceTypeFleet ), } In the resource Read function, implement the logic to convert the service tags to save them into the Terraform state for drift detection, e.g., with EKS Clusters (which had the tags available in the DescribeCluster API call): // Typically declared near conn := /* ... */ defaultTagsConfig := meta .( * AWSClient ). DefaultTagsConfig ignoreTagsConfig := meta .( * AWSClient ). IgnoreTagsConfig /* ... other d.Set(...) logic ... */ tags := keyvaluetags . EksKeyValueTags ( cluster . Tags ). IgnoreAWS (). IgnoreConfig ( ignoreTagsConfig ) if err := d . Set ( \"tags\" , tags . RemoveDefaultConfig ( defaultTagsConfig ). Map ()); err != nil { return fmt . Errorf ( \"error setting tags: %w\" , err ) } if err := d . Set ( \"tags_all\" , tags . Map ()); err != nil { return fmt . Errorf ( \"error setting tags_all: %w\" , err ) } If the service API does not return the tags directly from reading the resource and requires a separate API call, its possible to use the keyvaluetags functionality like the following, e.g., with Athena Workgroups: // Typically declared near conn := /* ... */ defaultTagsConfig := meta .( * AWSClient ). DefaultTagsConfig ignoreTagsConfig := meta .( * AWSClient ). IgnoreTagsConfig /* ... other d.Set(...) logic ... */ tags , err := keyvaluetags . AthenaListTags ( conn , arn . String ()) if err != nil { return fmt . Errorf ( \"error listing tags for resource (%s): %w\" , arn , err ) } tags = tags . IgnoreAWS (). IgnoreConfig ( ignoreTagsConfig ) if err := d . Set ( \"tags\" , tags . RemoveDefaultConfig ( defaultTagsConfig ). Map ()); err != nil { return fmt . Errorf ( \"error setting tags: %w\" , err ) } if err := d . Set ( \"tags_all\" , tags . Map ()); err != nil { return fmt . Errorf ( \"error setting tags_all: %w\" , err ) } In the resource Update function (this may be the first functionality requiring the creation of the Update function), implement the logic to handle tagging updates, e.g., with EKS Clusters: if d . HasChange ( \"tags_all\" ) { o , n := d . GetChange ( \"tags_all\" ) if err := keyvaluetags . EksUpdateTags ( conn , d . Get ( \"arn\" ).( string ), o , n ); err != nil { return fmt . Errorf ( \"error updating tags: %w\" , err ) } } If the resource Update function applies specific updates to attributes regardless of changes to tags, implement the following e.g., with IAM Policy: if d . HasChangesExcept ( \"tags\" , \"tags_all\" ) { /* ... other logic ...*/ request := & iam . CreatePolicyVersionInput { PolicyArn : aws . String ( d . Id ()), PolicyDocument : aws . String ( d . Get ( \"policy\" ).( string )), SetAsDefault : aws . Bool ( true ), } if _ , err := conn . CreatePolicyVersion ( request ); err != nil { return fmt . Errorf ( \"error updating IAM policy (%s): %w\" , d . Id (), err ) } } Resource Tagging Acceptance Testing Implementation # In the resource testing (e.g., internal/service/eks/cluster_test.go ), verify that existing resources without tagging are unaffected and do not have tags saved into their Terraform state. This should be done in the _basic acceptance test by adding one line similar to resource.TestCheckResourceAttr(resourceName, \"tags.%\", \"0\"), and one similar to resource.TestCheckResourceAttr(resourceName, \"tags_all.%\", \"0\"), In the resource testing, implement a new test named _tags with associated configurations, that verifies creating the resource with tags and updating tags. E.g., EKS Clusters: func TestAccEKSCluster_tags ( t * testing . T ) { var cluster1 , cluster2 , cluster3 eks . Cluster rName := sdkacctest . RandomWithPrefix ( acctest . ResourcePrefix ) resourceName := \"aws_eks_cluster.test\" resource . ParallelTest ( t , resource . TestCase { PreCheck : func () { acctest . PreCheck ( t ); testAccPreCheck ( t ) }, ErrorCheck : acctest . ErrorCheck ( t , eks . EndpointsID ), ProviderFactories : acctest . ProviderFactories , CheckDestroy : testAccCheckClusterDestroy , Steps : [] resource . TestStep { { Config : testAccClusterConfigTags1 ( rName , \"key1\" , \"value1\" ), Check : resource . ComposeTestCheckFunc ( testAccCheckClusterExists ( resourceName , & cluster1 ), resource . TestCheckResourceAttr ( resourceName , \"tags.%\" , \"1\" ), resource . TestCheckResourceAttr ( resourceName , \"tags.key1\" , \"value1\" ), ), }, { ResourceName : resourceName , ImportState : true , ImportStateVerify : true , }, { Config : testAccClusterConfigTags2 ( rName , \"key1\" , \"value1updated\" , \"key2\" , \"value2\" ), Check : resource . ComposeTestCheckFunc ( testAccCheckClusterExists ( resourceName , & cluster2 ), resource . TestCheckResourceAttr ( resourceName , \"tags.%\" , \"2\" ), resource . TestCheckResourceAttr ( resourceName , \"tags.key1\" , \"value1updated\" ), resource . TestCheckResourceAttr ( resourceName , \"tags.key2\" , \"value2\" ), ), }, { Config : testAccClusterConfigTags1 ( rName , \"key2\" , \"value2\" ), Check : resource . ComposeTestCheckFunc ( testAccCheckClusterExists ( resourceName , & cluster3 ), resource . TestCheckResourceAttr ( resourceName , \"tags.%\" , \"1\" ), resource . TestCheckResourceAttr ( resourceName , \"tags.key2\" , \"value2\" ), ), }, }, }) } func testAccClusterConfigTags1 ( rName , tagKey1 , tagValue1 string ) string { return acctest . ConfigCompose ( testAccClusterConfig_base ( rName ), fmt . Sprintf ( ` resource \"aws_eks_cluster\" \"test\" { name = %[1]q role_arn = aws_iam_role.test.arn tags = { %[2]q = %[3]q } vpc_config { subnet_ids = aws_subnet.test[*].id } depends_on = [aws_iam_role_policy_attachment.test-AmazonEKSClusterPolicy] } ` , rName , tagKey1 , tagValue1 )) } func testAccClusterConfigTags2 ( rName , tagKey1 , tagValue1 , tagKey2 , tagValue2 string ) string { return acctest . ConfigCompose ( testAccClusterConfig_base ( rName ), fmt . Sprintf ( ` resource \"aws_eks_cluster\" \"test\" { name = %[1]q role_arn = aws_iam_role.test.arn tags = { %[2]q = %[3]q %[4]q = %[5]q } vpc_config { subnet_ids = aws_subnet.test[*].id } depends_on = [aws_iam_role_policy_attachment.test-AmazonEKSClusterPolicy] } ` , rName , tagKey1 , tagValue1 , tagKey2 , tagValue2 )) } Verify all acceptance testing passes for the resource (e.g., make testacc TESTS=TestAccEKSCluster_ PKG=eks ) Resource Tagging Documentation Implementation # In the resource documentation (e.g., website/docs/r/eks_cluster.html.markdown ), add the following to the arguments reference: * `tags` - (Optional) Key-value mapping of resource tags. If configured with a provider [ `default_tags` configuration block](/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level. In the resource documentation (e.g., website/docs/r/eks_cluster.html.markdown ), add the following to the attributes reference: * `tags_all` - Map of tags assigned to the resource, including those inherited from the provider [ `default_tags` configuration block](/docs/providers/aws/index.html#default_tags-configuration-block). Adding Resource Filtering Support # AWS provides server-side filtering across many services and resources, which can be used when listing resources of that type, for example in the implementation of a data source. See the EC2 Listing and filtering your resources page for information about how server-side filtering can be used with EC2 resources. Implementing server-side filtering support for Terraform AWS Provider resources requires the following, each with its own section below: [ ] Generated Service Filtering Code : In the internal code generators (e.g., internal/generate/namevaluesfilters ), implementation and customization of how a service handles filtering, which is standardized for the resources. [ ] Resource Filtering Code Implementation : In the resource's equivalent data source code (e.g., internal/service/{servicename}/thing_data_source.go ), implementation of filter schema attribute, along with handling in the Read function. [ ] Resource Filtering Documentation Implementation : In the resource's equivalent data source documentation (e.g., website/docs/d/service_thing.html.markdown ), addition of filter argument Adding Service to Filter Generating Code # This step is only necessary for the first implementation and may have been previously completed. If so, move on to the next section. More details about this code generation can be found in the namevaluesfilters documentation . Open the AWS Go SDK documentation for the service, e.g., for service/rds . Note: there can be a delay between the AWS announcement and the updated AWS Go SDK documentation. Determine if the service API includes functionality for filtering resources (usually a Filters argument to a DescribeThing API call). If so, add the AWS Go SDK service name (e.g., rds ) to sliceServiceNames in internal/generate/namevaluesfilters/generators/servicefilters/main.go . Run make gen ( go generate ./... ) and ensure there are no errors via make test ( go test ./... ) Resource Filtering Code Implementation # In the resource's equivalent data source Go file (e.g., internal/service/ec2/internet_gateway_data_source.go ), add the following Go import: \"github.com/hashicorp/terraform-provider-aws/internal/generate/namevaluesfilters\" In the resource schema, add \"filter\": namevaluesfilters.Schema(), Implement the logic to build the list of filters: input := & ec2 . DescribeInternetGatewaysInput {} // Filters based on attributes. filters := namevaluesfilters . New ( map [ string ] string { \"internet-gateway-id\" : d . Get ( \"internet_gateway_id\" ).( string ), }) // Add filters based on keyvalue tags (N.B. Not applicable to all AWS services that support filtering) filters . Add ( namevaluesfilters . Ec2Tags ( keyvaluetags . New ( d . Get ( \"tags\" ).( map [ string ] interface {})). IgnoreAWS (). IgnoreConfig ( ignoreTagsConfig ). Map ())) // Add filters based on the custom filtering \"filter\" attribute. filters . Add ( d . Get ( \"filter\" ).( * schema . Set )) input . Filters = filters . Ec2Filters () Resource Filtering Documentation Implementation # In the resource's equivalent data source documentation (e.g., website/docs/d/internet_gateway.html.markdown ), add the following to the arguments reference: * `filter` - (Optional) Custom filter block as described below. More complex filters can be expressed using one or more `filter` sub-blocks, which take the following arguments: * `name` - (Required) The name of the field to filter by, as defined by [ the underlying AWS API ]( https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInternetGateways.html ). * `values` - (Required) Set of values that are accepted for the given field. An Internet Gateway will be selected if any one of the given values matches. New Resource # Before submitting this type of contribution, it is highly recommended to read and understand the other pages of the Contributing Guide . Implementing a new resource is a good way to learn more about how Terraform interacts with upstream APIs. There are plenty of examples to draw from in the existing resources, but you still get to implement something completely new. In addition to the below checklist, please see the Common Review Items sections for more specific coding and testing guidelines. [ ] Minimal LOC : It's difficult for both the reviewer and author to go through long feedback cycles on a big PR with many resources. We ask you to only submit 1 resource at a time . [ ] Acceptance tests : New resources should include acceptance tests covering their behavior. See Writing Acceptance Tests for a detailed guide on how to approach these. [ ] Resource Naming : Resources should be named aws_<service>_<name> , using underscores ( _ ) as the separator. Resources are namespaced with the service name to allow easier searching of related resources, to align the resource naming with the service for Customizing Endpoints , and to prevent future conflicts with new AWS services/resources. For reference: service is the AWS short service name that matches the key in the serviceData map in the conns package (created via the New Service section) name represents the conceptual infrastructure represented by the create, read, update, and delete methods of the service API. It should be a singular noun. For example, in an API that has methods such as CreateThing , DeleteThing , DescribeThing , and ModifyThing the name of the resource would end in _thing . [ ] Arguments_and_Attributes : The HCL for arguments and attributes should mimic the types and structs presented by the AWS API. API arguments should be converted from CamelCase to camel_case . The resource logic for handling these should follow the recommended implementations in the Data Handling and Conversion documentation. [ ] Documentation : Each data source and resource gets a page in the Terraform documentation, which lives at website/docs/d/<service>_<name>.html.markdown and website/docs/r/<service>_<name>.html.markdown respectively. [ ] Well-formed Code : Do your best to follow existing conventions you see in the codebase, and ensure your code is formatted with go fmt . The PR reviewers can help out on this front, and may provide comments with suggestions on how to improve the code. [ ] Dependency updates : Create a separate PR if you are updating dependencies. This is to avoid conflicts as version updates tend to be fast- moving targets. We will plan to merge the PR with this change first. New Tag Resource # Adding a tag resource, similar to the aws_ecs_tag resource, has its own implementation procedure since the resource code and initial acceptance testing functions are automatically generated. The rest of the resource acceptance testing and resource documentation must still be manually created. In internal/generate : Ensure the service is supported by all generators. Run make gen after any modifications. In internal/service/{service}/generate.go : Add the new //go:generate call with the correct generator directives. Run make gen after any modifications. In internal/provider/provider.go : Add the new resource. Run make test and ensure there are no failures. Create internal/service/{service}/tag_gen_test.go with initial acceptance testing similar to the following (where the parent resource is simple to provision): import ( \"fmt\" \"testing\" \"github.com/aws/aws-sdk-go/service/{Service}\" \"github.com/hashicorp/terraform-plugin-sdk/v2/helper/acctest\" \"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource\" ) func TestAcc { Service } Tag_basic ( t * testing . T ) { rName := sdkacctest . RandomWithPrefix ( acctest . ResourcePrefix ) resourceName := \"aws_{service}_tag.test\" resource . ParallelTest ( t , resource . TestCase { PreCheck : func () { acctest . PreCheck ( t ) }, ErrorCheck : acctest . ErrorCheck ( t , { Service }. EndpointsID ), ProviderFactories : acctest . ProviderFactories , CheckDestroy : testAccCheck { Service } TagDestroy , Steps : [] resource . TestStep { { Config : testAcc { Service } TagConfig ( rName , \"key1\" , \"value1\" ), Check : resource . ComposeTestCheckFunc ( testAccCheck { Service } TagExists ( resourceName ), resource . TestCheckResourceAttr ( resourceName , \"key\" , \"key1\" ), resource . TestCheckResourceAttr ( resourceName , \"value\" , \"value1\" ), ), }, { ResourceName : resourceName , ImportState : true , ImportStateVerify : true , }, }, }) } func TestAcc { Service } Tag_disappears ( t * testing . T ) { rName := sdkacctest . RandomWithPrefix ( acctest . ResourcePrefix ) resourceName := \"aws_{service}_tag.test\" resource . ParallelTest ( t , resource . TestCase { PreCheck : func () { acctest . PreCheck ( t ) }, ErrorCheck : acctest . ErrorCheck ( t , { Service }. EndpointsID ), ProviderFactories : acctest . ProviderFactories , CheckDestroy : testAccCheck { Service } TagDestroy , Steps : [] resource . TestStep { { Config : testAcc { Service } TagConfig ( rName , \"key1\" , \"value1\" ), Check : resource . ComposeTestCheckFunc ( testAccCheck { Service } TagExists ( resourceName ), acctest . CheckResourceDisappears ( acctest . Provider , resourceAws { Service } Tag (), resourceName ), ), ExpectNonEmptyPlan : true , }, }, }) } func TestAcc { Service } Tag_Value ( t * testing . T ) { rName := sdkacctest . RandomWithPrefix ( acctest . ResourcePrefix ) resourceName := \"aws_{service}_tag.test\" resource . ParallelTest ( t , resource . TestCase { PreCheck : func () { acctest . PreCheck ( t ) }, ErrorCheck : acctest . ErrorCheck ( t , { Service }. EndpointsID ), ProviderFactories : acctest . ProviderFactories , CheckDestroy : testAccCheck { Service } TagDestroy , Steps : [] resource . TestStep { { Config : testAcc { Service } TagConfig ( rName , \"key1\" , \"value1\" ), Check : resource . ComposeTestCheckFunc ( testAccCheck { Service } TagExists ( resourceName ), resource . TestCheckResourceAttr ( resourceName , \"key\" , \"key1\" ), resource . TestCheckResourceAttr ( resourceName , \"value\" , \"value1\" ), ), }, { ResourceName : resourceName , ImportState : true , ImportStateVerify : true , }, { Config : testAcc { Service } TagConfig ( rName , \"key1\" , \"value1updated\" ), Check : resource . ComposeTestCheckFunc ( testAccCheck { Service } TagExists ( resourceName ), resource . TestCheckResourceAttr ( resourceName , \"key\" , \"key1\" ), resource . TestCheckResourceAttr ( resourceName , \"value\" , \"value1updated\" ), ), }, }, }) } func testAcc { Service } TagConfig ( rName string , key string , value string ) string { return fmt . Sprintf ( ` resource \"aws_{service}_{thing}\" \"test\" { name = %[1]q lifecycle { ignore_changes = [tags] } } resource \"aws_{service}_tag\" \"test\" { resource_arn = aws_{service}_{thing}.test.arn key = %[2]q value = %[3]q } ` , rName , key , value ) } Run make testacc TESTS=TestAcc{Service}Tags_ PKG={Service} and ensure there are no failures. Create website/docs/r/{service}_tag.html.markdown with initial documentation similar to the following: --- subcategory: \"{SERVICE}\" layout: \"aws\" page_title: \"AWS: aws_{service}_tag\" description: |- Manages an individual {SERVICE} resource tag --- # Resource: aws_{service}_tag Manages an individual {SERVICE} resource tag. This resource should only be used in cases where {SERVICE} resources are created outside Terraform (e.g., {SERVICE} {THING}s implicitly created by {OTHER SERVICE THING}). ~> **NOTE:** This tagging resource should not be combined with the Terraform resource for managing the parent resource. For example, using `aws_{service}_{thing}` and `aws_{service}_tag` to manage tags of the same {SERVICE} {THING} will cause a perpetual difference where the `aws_{service}_{thing}` resource will try to remove the tag being added by the `aws_{service}_tag` resource. ~> **NOTE:** This tagging resource does not use the [ provider `ignore_tags` configuration ]( /docs/providers/aws/index.html#ignore_tags ). ## Example Usage ```terraform resource \"aws_{service}_tag\" \"example\" { resource_arn = \"...\" key = \"Name\" value = \"Hello World\" } ``` ## Argument Reference The following arguments are supported: * `resource_arn` - (Required) Amazon Resource Name (ARN) of the {SERVICE} resource to tag. * `key` - (Required) Tag name. * `value` - (Required) Tag value. ## Attributes Reference In addition to all arguments above, the following attributes are exported: * `id` - {SERVICE} resource identifier and key, separated by a comma ( `,` ) ## Import `aws_{service}_tag` can be imported by using the {SERVICE} resource identifier and key, separated by a comma ( `,` ), e.g. ``` $ terraform import aws_{service}_tag.example arn:aws:{service}:us-east-1:123456789012:{thing}/example,Name ``` New Service # Implementing a new AWS service gives Terraform the ability to manage resources in a whole new API. It's a larger undertaking, but brings major new functionality into Terraform. [ ] Service Client : Before new resources are submitted, we request a separate pull request containing just the new AWS Go SDK service client. Doing so will pull the AWS Go SDK service code into the project at the current version. Since the AWS Go SDK is updated frequently, these pull requests can easily have merge conflicts or be out of date. The maintainers prioritize reviewing and merging these quickly to prevent those situations. We have changed these directions a lot! Please review them carefully! To add an AWS Go SDK service client: - Determine the service identifier using the rule described in [the Naming Guide](./naming.md#service-identifier). - In `names/names_data.csv`, add a new line with all the requested information for the service following the guidance in the [`names` README](../../names/README.md). **_Be very careful when adding or changing data in `names_data.csv`! The Provider and generators depend on the file being correct._** - Run the following then submit the pull request: make gen make test go mod tidy [ ] Initial Resource : Some services can be big and it can be difficult for both reviewer & author to go through long feedback cycles on a big PR with many resources. Often feedback items in one resource will also need to be applied in other resources. We prefer you to submit the necessary minimum in a single PR, ideally just the first resource of the service. The initial resource and changes afterwards should follow the other sections of this guide as appropriate. New Region # While region validation is automatically added with SDK updates, new regions are generally limited in which services they support. Below are some manually sourced values from documentation. Amazon employees can code search previous region values to find new region values in internal packages like RIPStaticConfig if they are not documented yet. [ ] Check Elastic Load Balancing endpoints and quotas and add Route53 Hosted Zone ID if available to internal/service/elb/hosted_zone_id_data_source.go [ ] Check Amazon Simple Storage Service endpoints and quotas and add Route53 Hosted Zone ID if available to internal/service/s3/hosted_zones.go [ ] Check CloudTrail Supported Regions docs and add AWS Account ID if available to internal/service/cloudtrail/service_account_data_source.go [ ] Check Elastic Load Balancing Access Logs docs and add Elastic Load Balancing Account ID if available to internal/service/elb/service_account_data_source.go [ ] Check Redshift Database Audit Logging docs and add AWS Account ID if available to internal/service/redshift/service_account_data_source.go [ ] Check AWS Elastic Beanstalk endpoints and quotas and add Route53 Hosted Zone ID if available to internal/service/elasticbeanstalk/hosted_zone_data_source.go [ ] Check SageMaker docs and add AWS Account IDs if available to internal/service/sagemaker/prebuilt_ecr_image_data_source.go","title":"Contribution Types and Checklists"},{"location":"contributing/contribution-checklists/#contribution-types-and-checklists","text":"There are several different kinds of contribution, each of which has its own standards for a speedy review. The following sections describe guidelines for each type of contribution. Documentation Update Enhancement/Bugfix to a Resource Adding Resource Import Support Adding Resource Name Generation Support Resource Name Generation Code Implementation Resource Name Generation Testing Implementation Resource Name Generation Documentation Implementation Resource Name Generation With Suffix Adding Resource Policy Support Adding Resource Tagging Support Generating Tag Code for a Service Resource Tagging Code Implementation Resource Tagging Acceptance Testing Implementation Resource Tagging Documentation Implementation Adding Resource Filtering Support Adding Service to Filter Generating Code Resource Filtering Code Implementation Resource Filtering Documentation Implementation New Resource New Tag Resource New Service New Region","title":"Contribution Types and Checklists"},{"location":"contributing/contribution-checklists/#documentation-update","text":"The Terraform AWS Provider's website source is in this repository along with the code and tests. Below are some common items that will get flagged during documentation reviews: [ ] Reasoning for Change : Documentation updates should include an explanation for why the update is needed. [ ] Prefer AWS Documentation : Documentation about AWS service features and valid argument values that are likely to update over time should link to AWS service user guides and API references where possible. [ ] Large Example Configurations : Example Terraform configuration that includes multiple resource definitions should be added to the repository examples directory instead of an individual resource documentation page. Each directory under examples should be self-contained to call terraform apply without special configuration. [ ] Terraform Configuration Language Features : Individual resource documentation pages and examples should refrain from highlighting particular Terraform configuration language syntax workarounds or features such as variable , local , count , and built-in functions.","title":"Documentation Update"},{"location":"contributing/contribution-checklists/#enhancementbugfix-to-a-resource","text":"Working on existing resources is a great way to get started as a Terraform contributor because you can work within existing code and tests to get a feel for what to do. In addition to the below checklist, please see the Common Review Items sections for more specific coding and testing guidelines. [ ] Acceptance test coverage of new behavior : Existing resources each have a set of [acceptance tests][acctests] covering their functionality. These tests should exercise all the behavior of the resource. Whether you are adding something or fixing a bug, the idea is to have an acceptance test that fails if your code were to be removed. Sometimes it is sufficient to \"enhance\" an existing test by adding an assertion or tweaking the config that is used, but it's often better to add a new test. You can copy/paste an existing test and follow the conventions you see there, modifying the test to exercise the behavior of your code. [ ] Documentation updates : If your code makes any changes that need to be documented, you should include those doc updates in the same PR. This includes things like new resource attributes or changes in default values. [ ] Well-formed Code : Do your best to follow existing conventions you see in the codebase, and ensure your code is formatted with go fmt . The PR reviewers can help out on this front, and may provide comments with suggestions on how to improve the code. [ ] Dependency updates : Create a separate PR if you are updating dependencies. This is to avoid conflicts as version updates tend to be fast- moving targets. We will plan to merge the PR with this change first.","title":"Enhancement/Bugfix to a Resource"},{"location":"contributing/contribution-checklists/#adding-resource-import-support","text":"Adding import support for Terraform resources will allow existing infrastructure to be managed within Terraform. This type of enhancement generally requires a small to moderate amount of code changes. Comprehensive code examples and information about resource import support can be found in the Extending Terraform documentation . In addition to the below checklist and the items noted in the Extending Terraform documentation, please see the Common Review Items sections for more specific coding and testing guidelines. [ ] Resource Code Implementation : In the resource code (e.g., internal/service/{service}/{thing}.go ), implementation of Importer State function [ ] Resource Acceptance Testing Implementation : In the resource acceptance testing (e.g., internal/service/{service}/{thing}_test.go ), implementation of TestStep s with ImportState: true [ ] Resource Documentation Implementation : In the resource documentation (e.g., website/docs/r/service_thing.html.markdown ), addition of Import documentation section at the bottom of the page","title":"Adding Resource Import Support"},{"location":"contributing/contribution-checklists/#adding-resource-name-generation-support","text":"Terraform AWS Provider resources can use shared logic to support and test name generation, where the operator can choose between an expected naming value, a generated naming value with a prefix, or a fully generated name. Implementing name generation support for Terraform AWS Provider resources requires the following, each with its own section below: [ ] Resource Name Generation Code Implementation : In the resource code (e.g., internal/service/{service}/{thing}.go ), implementation of name_prefix attribute, along with handling in Create function. [ ] Resource Name Generation Testing Implementation : In the resource acceptance testing (e.g., internal/service/{service}/{thing}_test.go ), implementation of new acceptance test functions and configurations to exercise new naming logic. [ ] Resource Name Generation Documentation Implementation : In the resource documentation (e.g., website/docs/r/service_thing.html.markdown ), addition of name_prefix argument and update of name argument description.","title":"Adding Resource Name Generation Support"},{"location":"contributing/contribution-checklists/#resource-name-generation-code-implementation","text":"In the resource Go file (e.g., internal/service/{service}/{thing}.go ), add the following Go import: \"github.com/hashicorp/terraform-provider-aws/internal/create\" In the resource schema, add the new name_prefix attribute and adjust the name attribute to be Optional , Computed , and ConflictsWith the name_prefix attribute. Ensure to keep any existing schema fields on name such as ValidateFunc . E.g. \"name\" : { Type : schema . TypeString , Optional : true , Computed : true , ForceNew : true , ConflictsWith : [] string { \"name_prefix\" }, }, \"name_prefix\" : { Type : schema . TypeString , Optional : true , Computed : true , ForceNew : true , ConflictsWith : [] string { \"name\" }, }, In the resource Create function, switch any calls from d.Get(\"name\").(string) to instead use the create.Name() function, e.g. name := create . Name ( d . Get ( \"name\" ).( string ), d . Get ( \"name_prefix\" ).( string )) // ... in AWS Go SDK Input types, etc. use aws.String(name) If the resource supports import, in the resource Read function add a call to d.Set(\"name_prefix\", ...) , e.g. d . Set ( \"name\" , resp . Name ) d . Set ( \"name_prefix\" , create . NamePrefixFromName ( aws . StringValue ( resp . Name )))","title":"Resource Name Generation Code Implementation"},{"location":"contributing/contribution-checklists/#resource-name-generation-testing-implementation","text":"In the resource testing (e.g., internal/service/{service}/{thing}_test.go ), add the following Go import: \"github.com/hashicorp/terraform-provider-aws/internal/create\" In the resource testing, implement two new tests named _Name_Generated and _NamePrefix with associated configurations, that verifies creating the resource without name and name_prefix arguments (for the former) and with only the name_prefix argument (for the latter). E.g. func TestAccServiceThing_nameGenerated ( t * testing . T ) { var thing service . ServiceThing resourceName := \"aws_service_thing.test\" resource . ParallelTest ( t , resource . TestCase { PreCheck : func () { acctest . PreCheck ( t ) }, ErrorCheck : acctest . ErrorCheck ( t , service . EndpointsID ), ProviderFactories : acctest . ProviderFactories , CheckDestroy : testAccCheckThingDestroy , Steps : [] resource . TestStep { { Config : testAccThingNameGeneratedConfig (), Check : resource . ComposeTestCheckFunc ( testAccCheckThingExists ( resourceName , & thing ), create . TestCheckResourceAttrNameGenerated ( resourceName , \"name\" ), resource . TestCheckResourceAttr ( resourceName , \"name_prefix\" , resource . UniqueIdPrefix ), ), }, // If the resource supports import: { ResourceName : resourceName , ImportState : true , ImportStateVerify : true , }, }, }) } func TestAccServiceThing_namePrefix ( t * testing . T ) { var thing service . ServiceThing resourceName := \"aws_service_thing.test\" resource . ParallelTest ( t , resource . TestCase { PreCheck : func () { acctest . PreCheck ( t ) }, ErrorCheck : acctest . ErrorCheck ( t , service . EndpointsID ), ProviderFactories : acctest . ProviderFactories , CheckDestroy : testAccCheckThingDestroy , Steps : [] resource . TestStep { { Config : testAccThingNamePrefixConfig ( \"tf-acc-test-prefix-\" ), Check : resource . ComposeTestCheckFunc ( testAccCheckThingExists ( resourceName , & thing ), create . TestCheckResourceAttrNameFromPrefix ( resourceName , \"name\" , \"tf-acc-test-prefix-\" ), resource . TestCheckResourceAttr ( resourceName , \"name_prefix\" , \"tf-acc-test-prefix-\" ), ), }, // If the resource supports import: { ResourceName : resourceName , ImportState : true , ImportStateVerify : true , }, }, }) } func testAccThingNameGeneratedConfig () string { return fmt . Sprintf ( ` resource \"aws_service_thing\" \"test\" { # ... other configuration ... } ` ) } func testAccThingNamePrefixConfig ( namePrefix string ) string { return fmt . Sprintf ( ` resource \"aws_service_thing\" \"test\" { # ... other configuration ... name_prefix = %[1]q } ` , namePrefix ) }","title":"Resource Name Generation Testing Implementation"},{"location":"contributing/contribution-checklists/#resource-name-generation-documentation-implementation","text":"In the resource documentation (e.g., website/docs/r/service_thing.html.markdown ), add the following to the arguments reference: * `name_prefix` - (Optional) Creates a unique name beginning with the specified prefix. Conflicts with `name` . Adjust the existing name argument reference to ensure its denoted as Optional , includes a mention that it can be generated, and that it conflicts with name_prefix : * `name` - (Optional) Name of the thing. If omitted, Terraform will assign a random, unique name. Conflicts with `name_prefix` .","title":"Resource Name Generation Documentation Implementation"},{"location":"contributing/contribution-checklists/#resource-name-generation-with-suffix","text":"Some generated resource names require a fixed suffix (for example Amazon SNS FIFO topic names must end in .fifo ). In these cases use create.NameWithSuffix() in the resource Create function and create.NamePrefixFromNameWithSuffix() in the resource Read function, e.g. name := create . NameWithSuffix ( d . Get ( \"name\" ).( string ), d . Get ( \"name_prefix\" ).( string ), \".fifo\" ) and d . Set ( \"name\" , resp . Name ) d . Set ( \"name_prefix\" , create . NamePrefixFromNameWithSuffix ( aws . StringValue ( resp . Name ), \".fifo\" )) There are also functions create.TestCheckResourceAttrNameWithSuffixGenerated and create.TestCheckResourceAttrNameWithSuffixFromPrefix for use in tests.","title":"Resource Name Generation With Suffix"},{"location":"contributing/contribution-checklists/#adding-resource-policy-support","text":"Some AWS components support resource-based IAM policies to control permissions. When implementing this support in the Terraform AWS Provider, we typically prefer creating a separate resource, aws_{SERVICE}_{THING}_policy (e.g., aws_s3_bucket_policy ). See the New Resource section for more information about implementing the separate resource and the Provider Design page for rationale.","title":"Adding Resource Policy Support"},{"location":"contributing/contribution-checklists/#adding-resource-tagging-support","text":"AWS provides key-value metadata across many services and resources, which can be used for a variety of use cases including billing, ownership, and more. See the AWS Tagging Strategy page for more information about tagging at a high level. As of version 3.38.0 of the Terraform AWS Provider, resources that previously implemented tagging support via the argument tags , now support provider-wide default tagging. Thus, for in-flight and future contributions, implementing tagging support for Terraform AWS Provider resources requires the following, each with its own section below: [ ] Generated Service Tagging Code : Each service has a generate.go file where generator directives live. Through these directives and their flags, you can customize code generation for the service. You can find the code that the tagging generator generates in a tags_gen.go file in a service, such as internal/service/ec2/tags_gen.go . Unlike previously, you should generally not need to edit the generator code (i.e., in internal/generate/tags ). [ ] Resource Tagging Code Implementation : In the resource code (e.g., internal/service/{service}/{thing}.go ), implementation of tags and tags_all schema attributes, along with implementation of CustomizeDiff in the resource definition and handling in Create , Read , and Update functions. [ ] Resource Tagging Acceptance Testing Implementation : In the resource acceptance testing (e.g., internal/service/{service}/{thing}_test.go ), implementation of new acceptance test function and configurations to exercise new tagging logic. [ ] Resource Tagging Documentation Implementation : In the resource documentation (e.g., website/docs/r/service_thing.html.markdown ), addition of tags argument and tags_all attribute.","title":"Adding Resource Tagging Support"},{"location":"contributing/contribution-checklists/#generating-tag-code-for-a-service","text":"This step is only necessary for the first implementation and may have been previously completed. If so, move on to the next section. More details about this code generation, including fixes for potential error messages in this process, can be found in the generate documentation . Open the AWS Go SDK documentation for the service, e.g., for service/eks . Note: there can be a delay between the AWS announcement and the updated AWS Go SDK documentation. Use the AWS Go SDK to determine which types of tagging code to generate. There are three main types of tagging code you can generate: service tags, list tags, and update tags. These are not mutually exclusive and some services use more than one. Determine if a service already has a generate.go file (e.g., internal/service/eks/generate.go ). If none exists, follow the example of other generate.go files in many other services. This is a very simple file, perhaps 3-5 lines long, and must only contain generate directives at the very top of the file and a package declaration (e.g., package eks ) -- nothing else . Check for a tagging code directive: //go:generate go run ../../generate/tags/main.go . If one does not exist, add it. Note that without flags, the directive itself will not do anything useful. WARNING: You must never have more than one generate/tags/main.go directive in a generate.go file. Even if you want to generate all three types of tag code, you will use multiple flags but only one generate/tags/main.go directive! Including more than one directive will cause the generator to overwrite one set of generated code with whatever is specified in the next directive. If the service supports service tags, determine the service's \"type\" of tagging implementation. Some services will use a simple map style ( map[string]*string in Go) while others will have a separate structure ( []service.Tag struct with Key and Value fields). If the type is a map, add a new flag to the tagging directive (see above): -ServiceTagsMap . If the type is struct , add a -ServiceTagsSlice flag. If you use the -ServiceTagsSlice flag and if the struct name is not exactly Tag , you must include the -TagType flag with the name of the struct (e.g., -TagType=S3Tag ). If the key and value elements of the struct are not exactly Key and Value respectively, you must include the -TagTypeKeyElem and/or -TagTypeValElem flags with the correct names. In summary, you may need to include one or more of the following flags with -ServiceTagsSlice in order to properly customize the generated code: -TagKeyType , TagPackage , TagResTypeElem , TagType , TagType2 , TagTypeAddBoolElem , TagTypeAddBoolElemSnake , TagTypeIDElem , TagTypeKeyElem , and TagTypeValElem . If the service supports listing tags (usually a ListTags or ListTagsForResource API call), follow these guidelines. Add a new flag to the tagging directive (see above): -ListTags . If the API list operation is not exactly ListTagsForResource , include the -ListTagsOp flag with the name of the operation (e.g., -ListTagsOp=DescribeTags ). If the API list tags operation identifying element is not exactly ResourceArn , include the -ListTagsInIDElem flag with the name of the element (e.g., -ListTagsInIDElem=ResourceARN ). If the API list tags operation identifying element needs a slice, include the -ListTagsInIDNeedSlice flag with a yes value (e.g., -ListTagsInIDNeedSlice=yes ). If the API list tags operation output element is not exactly Tags , include the -ListTagsOutTagsElem flag with the name of the element (e.g., -ListTagsOutTagsElem=TagList ). In summary, you may need to include one or more of the following flags with -ListTags in order to properly customize the generated code: ListTagsInFiltIDName , ListTagsInIDElem , ListTagsInIDNeedSlice , ListTagsOp , ListTagsOutTagsElem , TagPackage , TagResTypeElem , and TagTypeIDElem . If the service API supports updating tags (usually TagResource and UntagResource API calls), follow these guidelines. Add a new flag to the tagging directive (see above): -UpdateTags . If the API tag operation is not exactly TagResource , include the -TagOp flag with the name of the operation (e.g., -TagOp=AddTags ). If the API untag operation is not exactly UntagResource , include the -UntagOp flag with the name of the operation (e.g., -UntagOp=RemoveTags ). If the API operation identifying element is not exactly ResourceArn , include the -TagInIDElem flag with the name of the element (e.g., -TagInIDElem=ResourceARN ). If the API untag operation tags input element is not exactly TagKeys , include the -UntagInTagsElem flag with the name of the element (e.g., -UntagInTagsElem=Keys ). In summary, you may need to include one or more of the following flags with -UpdateTags in order to properly customize the generated code: TagInCustomVal , TagInIDElem , TagInIDNeedSlice , TagInTagsElem , TagOp , TagOpBatchSize , TagPackage , TagResTypeElem , TagTypeAddBoolElem , TagTypeIDElem , UntagInCustomVal , UntagInNeedTagKeyType , UntagInNeedTagType , UntagInTagsElem , and UntagOp . Run make gen ( go generate ./... ) and ensure there are no errors via make test ( go test ./... )","title":"Generating Tag Code for a Service"},{"location":"contributing/contribution-checklists/#resource-tagging-code-implementation","text":"In the resource Go file (e.g., internal/service/eks/cluster.go ), add the following Go import: tftags \"github.com/hashicorp/terraform-provider-aws/internal/tags\" In the resource schema, add \"tags\": tagsSchema(), and \"tags_all\": tagsSchemaComputed(), In the schema.Resource struct definition, add the CustomizeDiff: SetTagsDiff handling essential to resource support for default tags: func ResourceCluster () * schema . Resource { return & schema . Resource { /* ... other configuration ... */ CustomizeDiff : verify . SetTagsDiff , } } If the resource already contains a CustomizeDiff function, append the SetTagsDiff via the customdiff.Sequence method: func ResourceExample () * schema . Resource { return & schema . Resource { /* ... other configuration ... */ CustomizeDiff : customdiff . Sequence ( resourceExampleCustomizeDiff , verify . SetTagsDiff , ), } } If the API supports tagging on creation (the Input struct accepts a Tags field), in the resource Create function, implement the logic to convert the configuration tags into the service tags, e.g., with EKS Clusters: // Typically declared near conn := /* ... */ defaultTagsConfig := meta .( * AWSClient ). DefaultTagsConfig tags := defaultTagsConfig . MergeTags ( tftags . New ( d . Get ( \"tags\" ).( map [ string ] interface {}))) input := & eks . CreateClusterInput { /* ... other configuration ... */ Tags : Tags ( tags . IgnoreAWS ()), } If the service API does not allow passing an empty list, the logic can be adjusted similar to: // Typically declared near conn := /* ... */ defaultTagsConfig := meta .( * AWSClient ). DefaultTagsConfig tags := defaultTagsConfig . MergeTags ( tftags . New ( d . Get ( \"tags\" ).( map [ string ] interface {}))) input := & eks . CreateClusterInput { /* ... other configuration ... */ } if len ( tags ) > 0 { input . Tags = Tags ( tags . IgnoreAWS ()) } Otherwise if the API does not support tagging on creation (the Input struct does not accept a Tags field), in the resource Create function, implement the logic to convert the configuration tags into the service API call to tag a resource, e.g., with Elasticsearch Domain: // Typically declared near conn := /* ... */ defaultTagsConfig := meta .( * AWSClient ). DefaultTagsConfig tags := defaultTagsConfig . MergeTags ( tftags . New ( d . Get ( \"tags\" ).( map [ string ] interface {}))) if len ( tags ) > 0 { if err := UpdateTags ( conn , d . Id (), nil , tags ); err != nil { return fmt . Errorf ( \"error adding Elasticsearch Cluster (%s) tags: %w\" , d . Id (), err ) } } Some EC2 resources (e.g., aws_ec2_fleet ) have a TagSpecifications field in the InputStruct instead of a Tags field. In these cases the ec2TagSpecificationsFromKeyValueTags() helper function should be used. This example shows using TagSpecifications : // Typically declared near conn := /* ... */ defaultTagsConfig := meta .( * AWSClient ). DefaultTagsConfig tags := defaultTagsConfig . MergeTags ( tftags . New ( d . Get ( \"tags\" ).( map [ string ] interface {}))) input := & ec2 . CreateFleetInput { /* ... other configuration ... */ TagSpecifications : ec2TagSpecificationsFromKeyValueTags ( tags , ec2 . ResourceTypeFleet ), } In the resource Read function, implement the logic to convert the service tags to save them into the Terraform state for drift detection, e.g., with EKS Clusters (which had the tags available in the DescribeCluster API call): // Typically declared near conn := /* ... */ defaultTagsConfig := meta .( * AWSClient ). DefaultTagsConfig ignoreTagsConfig := meta .( * AWSClient ). IgnoreTagsConfig /* ... other d.Set(...) logic ... */ tags := keyvaluetags . EksKeyValueTags ( cluster . Tags ). IgnoreAWS (). IgnoreConfig ( ignoreTagsConfig ) if err := d . Set ( \"tags\" , tags . RemoveDefaultConfig ( defaultTagsConfig ). Map ()); err != nil { return fmt . Errorf ( \"error setting tags: %w\" , err ) } if err := d . Set ( \"tags_all\" , tags . Map ()); err != nil { return fmt . Errorf ( \"error setting tags_all: %w\" , err ) } If the service API does not return the tags directly from reading the resource and requires a separate API call, its possible to use the keyvaluetags functionality like the following, e.g., with Athena Workgroups: // Typically declared near conn := /* ... */ defaultTagsConfig := meta .( * AWSClient ). DefaultTagsConfig ignoreTagsConfig := meta .( * AWSClient ). IgnoreTagsConfig /* ... other d.Set(...) logic ... */ tags , err := keyvaluetags . AthenaListTags ( conn , arn . String ()) if err != nil { return fmt . Errorf ( \"error listing tags for resource (%s): %w\" , arn , err ) } tags = tags . IgnoreAWS (). IgnoreConfig ( ignoreTagsConfig ) if err := d . Set ( \"tags\" , tags . RemoveDefaultConfig ( defaultTagsConfig ). Map ()); err != nil { return fmt . Errorf ( \"error setting tags: %w\" , err ) } if err := d . Set ( \"tags_all\" , tags . Map ()); err != nil { return fmt . Errorf ( \"error setting tags_all: %w\" , err ) } In the resource Update function (this may be the first functionality requiring the creation of the Update function), implement the logic to handle tagging updates, e.g., with EKS Clusters: if d . HasChange ( \"tags_all\" ) { o , n := d . GetChange ( \"tags_all\" ) if err := keyvaluetags . EksUpdateTags ( conn , d . Get ( \"arn\" ).( string ), o , n ); err != nil { return fmt . Errorf ( \"error updating tags: %w\" , err ) } } If the resource Update function applies specific updates to attributes regardless of changes to tags, implement the following e.g., with IAM Policy: if d . HasChangesExcept ( \"tags\" , \"tags_all\" ) { /* ... other logic ...*/ request := & iam . CreatePolicyVersionInput { PolicyArn : aws . String ( d . Id ()), PolicyDocument : aws . String ( d . Get ( \"policy\" ).( string )), SetAsDefault : aws . Bool ( true ), } if _ , err := conn . CreatePolicyVersion ( request ); err != nil { return fmt . Errorf ( \"error updating IAM policy (%s): %w\" , d . Id (), err ) } }","title":"Resource Tagging Code Implementation"},{"location":"contributing/contribution-checklists/#resource-tagging-acceptance-testing-implementation","text":"In the resource testing (e.g., internal/service/eks/cluster_test.go ), verify that existing resources without tagging are unaffected and do not have tags saved into their Terraform state. This should be done in the _basic acceptance test by adding one line similar to resource.TestCheckResourceAttr(resourceName, \"tags.%\", \"0\"), and one similar to resource.TestCheckResourceAttr(resourceName, \"tags_all.%\", \"0\"), In the resource testing, implement a new test named _tags with associated configurations, that verifies creating the resource with tags and updating tags. E.g., EKS Clusters: func TestAccEKSCluster_tags ( t * testing . T ) { var cluster1 , cluster2 , cluster3 eks . Cluster rName := sdkacctest . RandomWithPrefix ( acctest . ResourcePrefix ) resourceName := \"aws_eks_cluster.test\" resource . ParallelTest ( t , resource . TestCase { PreCheck : func () { acctest . PreCheck ( t ); testAccPreCheck ( t ) }, ErrorCheck : acctest . ErrorCheck ( t , eks . EndpointsID ), ProviderFactories : acctest . ProviderFactories , CheckDestroy : testAccCheckClusterDestroy , Steps : [] resource . TestStep { { Config : testAccClusterConfigTags1 ( rName , \"key1\" , \"value1\" ), Check : resource . ComposeTestCheckFunc ( testAccCheckClusterExists ( resourceName , & cluster1 ), resource . TestCheckResourceAttr ( resourceName , \"tags.%\" , \"1\" ), resource . TestCheckResourceAttr ( resourceName , \"tags.key1\" , \"value1\" ), ), }, { ResourceName : resourceName , ImportState : true , ImportStateVerify : true , }, { Config : testAccClusterConfigTags2 ( rName , \"key1\" , \"value1updated\" , \"key2\" , \"value2\" ), Check : resource . ComposeTestCheckFunc ( testAccCheckClusterExists ( resourceName , & cluster2 ), resource . TestCheckResourceAttr ( resourceName , \"tags.%\" , \"2\" ), resource . TestCheckResourceAttr ( resourceName , \"tags.key1\" , \"value1updated\" ), resource . TestCheckResourceAttr ( resourceName , \"tags.key2\" , \"value2\" ), ), }, { Config : testAccClusterConfigTags1 ( rName , \"key2\" , \"value2\" ), Check : resource . ComposeTestCheckFunc ( testAccCheckClusterExists ( resourceName , & cluster3 ), resource . TestCheckResourceAttr ( resourceName , \"tags.%\" , \"1\" ), resource . TestCheckResourceAttr ( resourceName , \"tags.key2\" , \"value2\" ), ), }, }, }) } func testAccClusterConfigTags1 ( rName , tagKey1 , tagValue1 string ) string { return acctest . ConfigCompose ( testAccClusterConfig_base ( rName ), fmt . Sprintf ( ` resource \"aws_eks_cluster\" \"test\" { name = %[1]q role_arn = aws_iam_role.test.arn tags = { %[2]q = %[3]q } vpc_config { subnet_ids = aws_subnet.test[*].id } depends_on = [aws_iam_role_policy_attachment.test-AmazonEKSClusterPolicy] } ` , rName , tagKey1 , tagValue1 )) } func testAccClusterConfigTags2 ( rName , tagKey1 , tagValue1 , tagKey2 , tagValue2 string ) string { return acctest . ConfigCompose ( testAccClusterConfig_base ( rName ), fmt . Sprintf ( ` resource \"aws_eks_cluster\" \"test\" { name = %[1]q role_arn = aws_iam_role.test.arn tags = { %[2]q = %[3]q %[4]q = %[5]q } vpc_config { subnet_ids = aws_subnet.test[*].id } depends_on = [aws_iam_role_policy_attachment.test-AmazonEKSClusterPolicy] } ` , rName , tagKey1 , tagValue1 , tagKey2 , tagValue2 )) } Verify all acceptance testing passes for the resource (e.g., make testacc TESTS=TestAccEKSCluster_ PKG=eks )","title":"Resource Tagging Acceptance Testing Implementation"},{"location":"contributing/contribution-checklists/#resource-tagging-documentation-implementation","text":"In the resource documentation (e.g., website/docs/r/eks_cluster.html.markdown ), add the following to the arguments reference: * `tags` - (Optional) Key-value mapping of resource tags. If configured with a provider [ `default_tags` configuration block](/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level. In the resource documentation (e.g., website/docs/r/eks_cluster.html.markdown ), add the following to the attributes reference: * `tags_all` - Map of tags assigned to the resource, including those inherited from the provider [ `default_tags` configuration block](/docs/providers/aws/index.html#default_tags-configuration-block).","title":"Resource Tagging Documentation Implementation"},{"location":"contributing/contribution-checklists/#adding-resource-filtering-support","text":"AWS provides server-side filtering across many services and resources, which can be used when listing resources of that type, for example in the implementation of a data source. See the EC2 Listing and filtering your resources page for information about how server-side filtering can be used with EC2 resources. Implementing server-side filtering support for Terraform AWS Provider resources requires the following, each with its own section below: [ ] Generated Service Filtering Code : In the internal code generators (e.g., internal/generate/namevaluesfilters ), implementation and customization of how a service handles filtering, which is standardized for the resources. [ ] Resource Filtering Code Implementation : In the resource's equivalent data source code (e.g., internal/service/{servicename}/thing_data_source.go ), implementation of filter schema attribute, along with handling in the Read function. [ ] Resource Filtering Documentation Implementation : In the resource's equivalent data source documentation (e.g., website/docs/d/service_thing.html.markdown ), addition of filter argument","title":"Adding Resource Filtering Support"},{"location":"contributing/contribution-checklists/#adding-service-to-filter-generating-code","text":"This step is only necessary for the first implementation and may have been previously completed. If so, move on to the next section. More details about this code generation can be found in the namevaluesfilters documentation . Open the AWS Go SDK documentation for the service, e.g., for service/rds . Note: there can be a delay between the AWS announcement and the updated AWS Go SDK documentation. Determine if the service API includes functionality for filtering resources (usually a Filters argument to a DescribeThing API call). If so, add the AWS Go SDK service name (e.g., rds ) to sliceServiceNames in internal/generate/namevaluesfilters/generators/servicefilters/main.go . Run make gen ( go generate ./... ) and ensure there are no errors via make test ( go test ./... )","title":"Adding Service to Filter Generating Code"},{"location":"contributing/contribution-checklists/#resource-filtering-code-implementation","text":"In the resource's equivalent data source Go file (e.g., internal/service/ec2/internet_gateway_data_source.go ), add the following Go import: \"github.com/hashicorp/terraform-provider-aws/internal/generate/namevaluesfilters\" In the resource schema, add \"filter\": namevaluesfilters.Schema(), Implement the logic to build the list of filters: input := & ec2 . DescribeInternetGatewaysInput {} // Filters based on attributes. filters := namevaluesfilters . New ( map [ string ] string { \"internet-gateway-id\" : d . Get ( \"internet_gateway_id\" ).( string ), }) // Add filters based on keyvalue tags (N.B. Not applicable to all AWS services that support filtering) filters . Add ( namevaluesfilters . Ec2Tags ( keyvaluetags . New ( d . Get ( \"tags\" ).( map [ string ] interface {})). IgnoreAWS (). IgnoreConfig ( ignoreTagsConfig ). Map ())) // Add filters based on the custom filtering \"filter\" attribute. filters . Add ( d . Get ( \"filter\" ).( * schema . Set )) input . Filters = filters . Ec2Filters ()","title":"Resource Filtering Code Implementation"},{"location":"contributing/contribution-checklists/#resource-filtering-documentation-implementation","text":"In the resource's equivalent data source documentation (e.g., website/docs/d/internet_gateway.html.markdown ), add the following to the arguments reference: * `filter` - (Optional) Custom filter block as described below. More complex filters can be expressed using one or more `filter` sub-blocks, which take the following arguments: * `name` - (Required) The name of the field to filter by, as defined by [ the underlying AWS API ]( https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInternetGateways.html ). * `values` - (Required) Set of values that are accepted for the given field. An Internet Gateway will be selected if any one of the given values matches.","title":"Resource Filtering Documentation Implementation"},{"location":"contributing/contribution-checklists/#new-resource","text":"Before submitting this type of contribution, it is highly recommended to read and understand the other pages of the Contributing Guide . Implementing a new resource is a good way to learn more about how Terraform interacts with upstream APIs. There are plenty of examples to draw from in the existing resources, but you still get to implement something completely new. In addition to the below checklist, please see the Common Review Items sections for more specific coding and testing guidelines. [ ] Minimal LOC : It's difficult for both the reviewer and author to go through long feedback cycles on a big PR with many resources. We ask you to only submit 1 resource at a time . [ ] Acceptance tests : New resources should include acceptance tests covering their behavior. See Writing Acceptance Tests for a detailed guide on how to approach these. [ ] Resource Naming : Resources should be named aws_<service>_<name> , using underscores ( _ ) as the separator. Resources are namespaced with the service name to allow easier searching of related resources, to align the resource naming with the service for Customizing Endpoints , and to prevent future conflicts with new AWS services/resources. For reference: service is the AWS short service name that matches the key in the serviceData map in the conns package (created via the New Service section) name represents the conceptual infrastructure represented by the create, read, update, and delete methods of the service API. It should be a singular noun. For example, in an API that has methods such as CreateThing , DeleteThing , DescribeThing , and ModifyThing the name of the resource would end in _thing . [ ] Arguments_and_Attributes : The HCL for arguments and attributes should mimic the types and structs presented by the AWS API. API arguments should be converted from CamelCase to camel_case . The resource logic for handling these should follow the recommended implementations in the Data Handling and Conversion documentation. [ ] Documentation : Each data source and resource gets a page in the Terraform documentation, which lives at website/docs/d/<service>_<name>.html.markdown and website/docs/r/<service>_<name>.html.markdown respectively. [ ] Well-formed Code : Do your best to follow existing conventions you see in the codebase, and ensure your code is formatted with go fmt . The PR reviewers can help out on this front, and may provide comments with suggestions on how to improve the code. [ ] Dependency updates : Create a separate PR if you are updating dependencies. This is to avoid conflicts as version updates tend to be fast- moving targets. We will plan to merge the PR with this change first.","title":"New Resource"},{"location":"contributing/contribution-checklists/#new-tag-resource","text":"Adding a tag resource, similar to the aws_ecs_tag resource, has its own implementation procedure since the resource code and initial acceptance testing functions are automatically generated. The rest of the resource acceptance testing and resource documentation must still be manually created. In internal/generate : Ensure the service is supported by all generators. Run make gen after any modifications. In internal/service/{service}/generate.go : Add the new //go:generate call with the correct generator directives. Run make gen after any modifications. In internal/provider/provider.go : Add the new resource. Run make test and ensure there are no failures. Create internal/service/{service}/tag_gen_test.go with initial acceptance testing similar to the following (where the parent resource is simple to provision): import ( \"fmt\" \"testing\" \"github.com/aws/aws-sdk-go/service/{Service}\" \"github.com/hashicorp/terraform-plugin-sdk/v2/helper/acctest\" \"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource\" ) func TestAcc { Service } Tag_basic ( t * testing . T ) { rName := sdkacctest . RandomWithPrefix ( acctest . ResourcePrefix ) resourceName := \"aws_{service}_tag.test\" resource . ParallelTest ( t , resource . TestCase { PreCheck : func () { acctest . PreCheck ( t ) }, ErrorCheck : acctest . ErrorCheck ( t , { Service }. EndpointsID ), ProviderFactories : acctest . ProviderFactories , CheckDestroy : testAccCheck { Service } TagDestroy , Steps : [] resource . TestStep { { Config : testAcc { Service } TagConfig ( rName , \"key1\" , \"value1\" ), Check : resource . ComposeTestCheckFunc ( testAccCheck { Service } TagExists ( resourceName ), resource . TestCheckResourceAttr ( resourceName , \"key\" , \"key1\" ), resource . TestCheckResourceAttr ( resourceName , \"value\" , \"value1\" ), ), }, { ResourceName : resourceName , ImportState : true , ImportStateVerify : true , }, }, }) } func TestAcc { Service } Tag_disappears ( t * testing . T ) { rName := sdkacctest . RandomWithPrefix ( acctest . ResourcePrefix ) resourceName := \"aws_{service}_tag.test\" resource . ParallelTest ( t , resource . TestCase { PreCheck : func () { acctest . PreCheck ( t ) }, ErrorCheck : acctest . ErrorCheck ( t , { Service }. EndpointsID ), ProviderFactories : acctest . ProviderFactories , CheckDestroy : testAccCheck { Service } TagDestroy , Steps : [] resource . TestStep { { Config : testAcc { Service } TagConfig ( rName , \"key1\" , \"value1\" ), Check : resource . ComposeTestCheckFunc ( testAccCheck { Service } TagExists ( resourceName ), acctest . CheckResourceDisappears ( acctest . Provider , resourceAws { Service } Tag (), resourceName ), ), ExpectNonEmptyPlan : true , }, }, }) } func TestAcc { Service } Tag_Value ( t * testing . T ) { rName := sdkacctest . RandomWithPrefix ( acctest . ResourcePrefix ) resourceName := \"aws_{service}_tag.test\" resource . ParallelTest ( t , resource . TestCase { PreCheck : func () { acctest . PreCheck ( t ) }, ErrorCheck : acctest . ErrorCheck ( t , { Service }. EndpointsID ), ProviderFactories : acctest . ProviderFactories , CheckDestroy : testAccCheck { Service } TagDestroy , Steps : [] resource . TestStep { { Config : testAcc { Service } TagConfig ( rName , \"key1\" , \"value1\" ), Check : resource . ComposeTestCheckFunc ( testAccCheck { Service } TagExists ( resourceName ), resource . TestCheckResourceAttr ( resourceName , \"key\" , \"key1\" ), resource . TestCheckResourceAttr ( resourceName , \"value\" , \"value1\" ), ), }, { ResourceName : resourceName , ImportState : true , ImportStateVerify : true , }, { Config : testAcc { Service } TagConfig ( rName , \"key1\" , \"value1updated\" ), Check : resource . ComposeTestCheckFunc ( testAccCheck { Service } TagExists ( resourceName ), resource . TestCheckResourceAttr ( resourceName , \"key\" , \"key1\" ), resource . TestCheckResourceAttr ( resourceName , \"value\" , \"value1updated\" ), ), }, }, }) } func testAcc { Service } TagConfig ( rName string , key string , value string ) string { return fmt . Sprintf ( ` resource \"aws_{service}_{thing}\" \"test\" { name = %[1]q lifecycle { ignore_changes = [tags] } } resource \"aws_{service}_tag\" \"test\" { resource_arn = aws_{service}_{thing}.test.arn key = %[2]q value = %[3]q } ` , rName , key , value ) } Run make testacc TESTS=TestAcc{Service}Tags_ PKG={Service} and ensure there are no failures. Create website/docs/r/{service}_tag.html.markdown with initial documentation similar to the following: --- subcategory: \"{SERVICE}\" layout: \"aws\" page_title: \"AWS: aws_{service}_tag\" description: |- Manages an individual {SERVICE} resource tag --- # Resource: aws_{service}_tag Manages an individual {SERVICE} resource tag. This resource should only be used in cases where {SERVICE} resources are created outside Terraform (e.g., {SERVICE} {THING}s implicitly created by {OTHER SERVICE THING}). ~> **NOTE:** This tagging resource should not be combined with the Terraform resource for managing the parent resource. For example, using `aws_{service}_{thing}` and `aws_{service}_tag` to manage tags of the same {SERVICE} {THING} will cause a perpetual difference where the `aws_{service}_{thing}` resource will try to remove the tag being added by the `aws_{service}_tag` resource. ~> **NOTE:** This tagging resource does not use the [ provider `ignore_tags` configuration ]( /docs/providers/aws/index.html#ignore_tags ). ## Example Usage ```terraform resource \"aws_{service}_tag\" \"example\" { resource_arn = \"...\" key = \"Name\" value = \"Hello World\" } ``` ## Argument Reference The following arguments are supported: * `resource_arn` - (Required) Amazon Resource Name (ARN) of the {SERVICE} resource to tag. * `key` - (Required) Tag name. * `value` - (Required) Tag value. ## Attributes Reference In addition to all arguments above, the following attributes are exported: * `id` - {SERVICE} resource identifier and key, separated by a comma ( `,` ) ## Import `aws_{service}_tag` can be imported by using the {SERVICE} resource identifier and key, separated by a comma ( `,` ), e.g. ``` $ terraform import aws_{service}_tag.example arn:aws:{service}:us-east-1:123456789012:{thing}/example,Name ```","title":"New Tag Resource"},{"location":"contributing/contribution-checklists/#new-service","text":"Implementing a new AWS service gives Terraform the ability to manage resources in a whole new API. It's a larger undertaking, but brings major new functionality into Terraform. [ ] Service Client : Before new resources are submitted, we request a separate pull request containing just the new AWS Go SDK service client. Doing so will pull the AWS Go SDK service code into the project at the current version. Since the AWS Go SDK is updated frequently, these pull requests can easily have merge conflicts or be out of date. The maintainers prioritize reviewing and merging these quickly to prevent those situations. We have changed these directions a lot! Please review them carefully! To add an AWS Go SDK service client: - Determine the service identifier using the rule described in [the Naming Guide](./naming.md#service-identifier). - In `names/names_data.csv`, add a new line with all the requested information for the service following the guidance in the [`names` README](../../names/README.md). **_Be very careful when adding or changing data in `names_data.csv`! The Provider and generators depend on the file being correct._** - Run the following then submit the pull request: make gen make test go mod tidy [ ] Initial Resource : Some services can be big and it can be difficult for both reviewer & author to go through long feedback cycles on a big PR with many resources. Often feedback items in one resource will also need to be applied in other resources. We prefer you to submit the necessary minimum in a single PR, ideally just the first resource of the service. The initial resource and changes afterwards should follow the other sections of this guide as appropriate.","title":"New Service"},{"location":"contributing/contribution-checklists/#new-region","text":"While region validation is automatically added with SDK updates, new regions are generally limited in which services they support. Below are some manually sourced values from documentation. Amazon employees can code search previous region values to find new region values in internal packages like RIPStaticConfig if they are not documented yet. [ ] Check Elastic Load Balancing endpoints and quotas and add Route53 Hosted Zone ID if available to internal/service/elb/hosted_zone_id_data_source.go [ ] Check Amazon Simple Storage Service endpoints and quotas and add Route53 Hosted Zone ID if available to internal/service/s3/hosted_zones.go [ ] Check CloudTrail Supported Regions docs and add AWS Account ID if available to internal/service/cloudtrail/service_account_data_source.go [ ] Check Elastic Load Balancing Access Logs docs and add Elastic Load Balancing Account ID if available to internal/service/elb/service_account_data_source.go [ ] Check Redshift Database Audit Logging docs and add AWS Account ID if available to internal/service/redshift/service_account_data_source.go [ ] Check AWS Elastic Beanstalk endpoints and quotas and add Route53 Hosted Zone ID if available to internal/service/elasticbeanstalk/hosted_zone_data_source.go [ ] Check SageMaker docs and add AWS Account IDs if available to internal/service/sagemaker/prebuilt_ecr_image_data_source.go","title":"New Region"},{"location":"contributing/core-services/","text":"Terraform AWS Provider Core Services # Core Services are AWS services we have identified as critical for a large majority of our users. Our goal is to continually increase the depth of coverage for these services. We will work to prioritize features and enhancements to these services in each weekly release, even if they are not necessarily highlighted in our quarterly roadmap. The core services we have identified are: EC2 Lambda EKS ECS VPC S3 RDS DynamoDB IAM Autoscaling (ASG) ElastiCache We'll continue to evaluate the selected services as our user base grows and changes.","title":"Terraform AWS Provider Core Services"},{"location":"contributing/core-services/#terraform-aws-provider-core-services","text":"Core Services are AWS services we have identified as critical for a large majority of our users. Our goal is to continually increase the depth of coverage for these services. We will work to prioritize features and enhancements to these services in each weekly release, even if they are not necessarily highlighted in our quarterly roadmap. The core services we have identified are: EC2 Lambda EKS ECS VPC S3 RDS DynamoDB IAM Autoscaling (ASG) ElastiCache We'll continue to evaluate the selected services as our user base grows and changes.","title":"Terraform AWS Provider Core Services"},{"location":"contributing/data-handling-and-conversion/","text":"Data Handling and Conversion # Please Note: This documentation is intended for Terraform AWS Provider code developers. Typical operators writing and applying Terraform configurations do not need to read or understand this material. The Terraform AWS Provider codebase bridges the implementation of a Terraform Plugin and an AWS API client to support AWS operations and data types as Terraform Resources. Data handling and conversion is a large portion of resource implementation given the domain specific implementations of each side of the provider. The first where Terraform is a generic infrastructure as code tool with a generic data model and the other where the details are driven by AWS API data modeling concepts. This guide is intended to explain and show preferred Terraform AWS Provider code implementations required to successfully translate data between these two systems. At the bottom of this documentation is a Glossary section , which may be a helpful reference while reading the other sections. Data Conversions in Terraform Providers Implicit State Passthrough Data Conversions in the Terraform AWS Provider Type Mapping Zero Value Mapping Root Attributes Versus Block Attributes Recommended Implementations Expand Functions for Blocks Flatten Functions for Blocks Root TypeBool and AWS Boolean Root TypeFloat and AWS Float Root TypeInt and AWS Integer Root TypeList of Resource and AWS List of Structure Root TypeList of Resource and AWS Structure Root TypeList of TypeString and AWS List of String Root TypeMap of TypeString and AWS Map of String Root TypeSet of Resource and AWS List of Structure Root TypeSet of TypeString and AWS List of String Root TypeString and AWS String Root TypeString and AWS Timestamp Nested TypeBool and AWS Boolean Nested TypeFloat and AWS Float Nested TypeInt and AWS Integer Nested TypeList of Resource and AWS List of Structure Nested TypeList of Resource and AWS Structure Nested TypeList of TypeString and AWS List of String Nested TypeMap of TypeString and AWS Map of String Nested TypeSet of Resource and AWS List of Structure Nested TypeSet of TypeString and AWS List of String Nested TypeString and AWS String Nested TypeString and AWS Timestamp Further Guidelines Binary Values Destroy State Values Hashed Values Sensitive Values Virtual Attributes Glossary Data Conversions in Terraform Providers # Before getting into highly specific documentation about the Terraform AWS Provider handling of data, it may be helpful to briefly highlight how Terraform Plugins (Terraform Providers in this case) interact with Terraform CLI and the Terraform State in general and where this documentation fits into the whole process. There are two primary data flows that are typically handled by resources within a Terraform Provider. Data is either being converted from a planned new Terraform State into making a remote system request or a remote system response is being converted into a applied new Terraform State. The semantics of how the data of the planned new Terraform State is surfaced to the resource implementation is determined by where a resource is in its lifecycle and mainly handled by Terraform CLI. This concept can be explored further in the Terraform Resource Instance Change Lifecycle documentation , with the caveat that some additional behaviors occur within the Terraform Plugin SDK as well (if the Terraform Plugin uses that implementation detail). As a generic walkthrough, the following data handling occurs when creating a Terraform Resource: An operator creates a Terraform configuration with a new resource defined and runs terraform apply Terraform CLI merges an empty prior state for the resource, along with the given configuration state, to create a planned new state for the resource Terraform CLI sends a Terraform Plugin Protocol request to create the new resource with its planned new state data If the Terraform Plugin is using a higher level library, such as the Terraform Plugin SDK, that library receives the request and translates the Terraform Plugin Protocol data types into the expected library types Terraform Plugin invokes the resource creation function with the planned new state data The planned new state data is converted into an remote system request (e.g., API creation request) that is invoked The remote system response is received and the data is converted into an applied new state If the Terraform Plugin is using a higher level library, such as the Terraform Plugin SDK, that library translates the library types back into Terraform Plugin Protocol data types Terraform Plugin responds to Terraform Plugin Protocol request with the new state data Terraform CLI verifies and stores the new state The highlighted lines are the focus of this documentation today. In the future however, the Terraform AWS Provider may replace certain functionality in the items mentioning the Terraform Plugin SDK above to workaround certain limitations of that particular library. Implicit State Passthrough # An important behavior to note with Terraform State handling is if the value of a particular root attribute or block is not refreshed during plan or apply operations, then the prior Terraform State is implicitly deep copied to the new Terraform State for that attribute or block. Given a resource with a writeable root attribute named not_set_attr that never calls d.Set(\"not_set_attr\", /* ... nil or value */) , the following happens: If the Terraform configuration contains not_set_attr = \"anything\" on resource creation, the Terraform State contains not_set_attr equal to \"anything\" after apply. If the Terraform configuration is updated to not_set_attr = \"updated\" , the Terraform State contains not_set_attr equal to \"updated\" after apply. If the attribute was meant to be associated with a remote system value, it will never update the Terraform State on plan or apply with the remote value. Effectively, it cannot perform drift detection with the remote value. This however does not apply for nested attributes and blocks if the parent block is refreshed. Given a resource with a root block named parent , nested child attributes named set_attr and not_set_attr , and that calls d.Set(\"parent\", /* ... only refreshes nested set_attr ... */) , the Terraform State for the nested not_set_attr will not be copied. There are valid use cases for passthrough attribute values such as these (see the Virtual Attributes section ), however the behavior can be confusing or incorrect for operators if the drift detection is expected. Typically these types of drift detection issues can be discovered by implementing resource import testing with state verification. Data Conversions in the Terraform AWS Provider # To expand on the data handling that occurs specifically within the Terraform AWS Provider resource implementations, the above resource creation items become the below in practice given our current usage of the Terraform Plugin SDK: The Create / CreateContext function of a schema.Resource is invoked with *schema.ResourceData containing the planned new state data (conventionally named d ) and an AWS API client (conventionally named meta ). Note: Before reaching this point, the ResourceData was already translated from the Terraform Plugin Protocol data types by the Terraform Plugin SDK so values can be read by invoking d.Get() and d.GetOk() receiver methods with Attribute and Block names from the Schema of the schema.Resource . An AWS Go SDK operation input type (e.g., *ec2.CreateVpcInput ) is initialized For each necessary field to configure in the operation input type, the data is read from the ResourceData (e.g., d.Get() , d.GetOk() ) and converted into the AWS Go SDK type for the field (e.g., *string ) The AWS Go SDK operation is invoked and the output type (e.g., *ec2.CreateVpcOutput ) is initialized For each necessary Attribute, Block, or resource identifier to be saved in the state, the data is read from the AWS Go SDK type for the field ( *string ), if necessary converted into a ResourceData compatible type, and saved into a mutated ResourceData (e.g., d.Set() , d.SetId() ) Function is returned Type Mapping # To further understand the necessary data conversions used throughout the Terraform AWS Provider codebase between AWS Go SDK types and the Terraform Plugin SDK, the following table can be referenced for most scenarios: AWS API Model AWS Go SDK Terraform Plugin SDK Terraform Language/State boolean *bool TypeBool ( bool ) bool float *float64 TypeFloat ( float64 ) number integer *int64 TypeInt ( int ) number list []*T TypeList ( []interface{} of T ) TypeSet ( *schema.Set of T ) list(any) set(any) map map[T1]*T2 TypeMap ( map[string]interface{} ) map(any) string *string TypeString ( string ) string structure struct TypeList ( []interface{} of map[string]interface{} ) list(object(any)) timestamp *time.Time TypeString (typically RFC3339 formatted) string You may notice there are type encoding differences the AWS Go SDK and Terraform Plugin SDK: AWS Go SDK types are all Go pointer types, while Terraform Plugin SDK types are not. AWS Go SDK structures are the Go struct type, while there is no semantically equivalent Terraform Plugin SDK type. Instead they are represented as a slice of interfaces with an underlying map of interfaces. AWS Go SDK types are all Go concrete types, while the Terraform Plugin SDK types for collections and maps are interfaces. AWS Go SDK whole numeric type is always 64-bit, while the Terraform Plugin SDK type is implementation-specific. Conceptually, the first and second items above the most problematic in the Terraform AWS Provider codebase. The first item because non-pointer types in Go cannot implement the concept of no value ( nil ). The Zero Value Mapping section will go into more details about the implications of this limitation. The second item because it can be confusing to always handle a structure (\"object\") type as a list. There are efforts to replace the Terraform Plugin type system with one similar the underlying Terraform CLI type system. As these efforts materialize, this documentation will be updated. Zero Value Mapping # As mentioned in the Type Mapping section , there is a discrepency with how the Terraform Plugin SDK represents values and the reality that a Terraform State may not configure an Attribute. These values will default to the matching underlying Go type \"zero value\" if not set: Terraform Plugin SDK Go Type Zero Value TypeBool bool false TypeFloat float64 0.0 TypeInt int 0 TypeString string \"\" For Terraform resource logic this means that these special values must always be accounted for in implementation. The semantics of the API and its meaning of the zero value will determine whether: If it is not used/needed, then generally the zero value can safely be used to store an \"unset\" value and should be ignored when sending to the API. If it is used/needed, whether: A value can always be set and it is safe to always send to the API. Generally, boolean values fall into this category. A different default/sentinel value must be used as the \"unset\" value so it can either match the default of the API or be ignored when sending to the API. A special type implementation is required within the schema to workaround the limitation. The maintainers can provide guidance on appropriate solutions for cases not mentioned in the Recommended Implementation section . Root Attributes Versus Block Attributes # All Attributes and Blocks at the top level of schema.Resource Schema are considered \"root\" attributes. These will always be handled with receiver methods on ResourceData , such as reading with d.Get() , d.GetOk() , etc. and writing with d.Set() . Any nested Attributes and Blocks inside those root Blocks will then be handled with standard Go types according to the table in the Type Mapping section . By convention in the codebase, each level of Block handling beyond root attributes should be separated into \"expand\" functions that convert Terraform Plugin SDK data into the equivalent AWS Go SDK type (typically named expand{Service}{Type} ) and \"flatten\" functions that convert an AWS Go SDK type into the equivalent Terraform Plugin SDK data (typically named flatten{Service}{Type} ). The Recommended Implementations section will go into those details. NOTE: While it is possible in certain type scenarios to deeply read and write ResourceData information for a Block Attribute, this practice is discouraged in preference of only handling root Attributes and Blocks. Recommended Implementations # Given the various complexities around the Terraform Plugin SDK type system, this section contains recommended implementations for Terraform AWS Provider resource code based on the Type Mapping section and the features of the Terraform Plugin SDK and AWS Go SDK. The eventual goal and styling for many of these recommendations is to ease static analysis of the codebase and future potential code generation efforts. Some of these coding patterns may not be well represented in the codebase, as refactoring the many older styles over years of community development is a large task. However this is meant to represent the preferred implementations today. These will continue to evolve as this codebase and the Terraform Plugin ecosystem changes. Where to Define Flex Functions # Define FLatten and EXpand (i.e., flex) functions at the most local level possible. This table provides guidance on the preferred place to define flex functions based on usage. Where Used Where to Define Include Service in Name One resource (e.g., aws_instance ) Resource file (e.g., internal/service/ec2/instance.go ) No Few resources in one service (e.g., EC2 ) Resource file or service flex file (e.g., internal/service/ec2/flex.go ) No Widely used in one service (e.g., EC2 ) Service flex file (e.g., internal/service/ec2/flex.go ) No Two services (e.g., EC2 and EKS ) Define a copy in each service If helpful 3+ services internal/flex/flex.go Yes Expand Functions for Blocks # func expandStructure ( tfMap map [ string ] interface {}) * service . Structure { if tfMap == nil { return nil } apiObject := & service . Structure {} // ... nested attribute handling ... return apiObject } func expandStructures ( tfList [] interface {}) [] * service . Structure { if len ( tfList ) == 0 { return nil } var apiObjects [] * service . Structure for _ , tfMapRaw := range tfList { tfMap , ok := tfMapRaw .( map [ string ] interface {}) if ! ok { continue } apiObject := expandStructure ( tfMap ) if apiObject == nil { continue } apiObjects = append ( apiObjects , apiObject ) } return apiObjects } Flatten Functions for Blocks # func flattenStructure ( apiObject * service . Structure ) map [ string ] interface {} { if apiObject == nil { return nil } tfMap := map [ string ] interface {}{} // ... nested attribute handling ... return tfMap } func flattenStructures ( apiObjects [] * service . Structure ) [] interface {} { if len ( apiObjects ) == 0 { return nil } var tfList [] interface {} for _ , apiObject := range apiObjects { if apiObject == nil { continue } tfList = append ( tfList , flattenStructure ( apiObject )) } return tfList } Root TypeBool and AWS Boolean # To read, if always sending the attribute value is correct: input := service . ExampleOperationInput { AttributeName : aws . String ( d . Get ( \"attribute_name\" ).( bool )) } Otherwise to read, if only sending the attribute value when true is preferred ( !ok for opposite): input := service . ExampleOperationInput {} if v , ok := d . GetOk ( \"attribute_name\" ); ok { input . AttributeName = aws . Bool ( v .( bool )) } To write: d . Set ( \"attribute_name\" , output . Thing . AttributeName ) Root TypeFloat and AWS Float # To read: input := service . ExampleOperationInput {} if v , ok := d . GetOk ( \"attribute_name\" ); ok { input . AttributeName = aws . Float64 ( v .( float64 )) } To write: d . Set ( \"attribute_name\" , output . Thing . AttributeName ) Root TypeInt and AWS Integer # To read: input := service . ExampleOperationInput {} if v , ok := d . GetOk ( \"attribute_name\" ); ok { input . AttributeName = aws . Int64 ( int64 ( v .( int ))) } To write: d . Set ( \"attribute_name\" , output . Thing . AttributeName ) Root TypeList of Resource and AWS List of Structure # To read: input := service . ExampleOperationInput {} if v , ok := d . GetOk ( \"attribute_name\" ); ok && len ( v .([] interface {})) > 0 { input . AttributeName = expandStructures ( v .([] interface {})) } To write: if err := d . Set ( \"attribute_name\" , flattenStructures ( output . Thing . AttributeName )); err != nil { return fmt . Errorf ( \"error setting attribute_name: %w\" , err ) } Root TypeList of Resource and AWS Structure # To read: input := service . ExampleOperationInput {} if v , ok := d . GetOk ( \"attribute_name\" ); ok && len ( v .([] interface {})) > 0 && v .([] interface {})[ 0 ] != nil { input . AttributeName = expandStructure ( v .([] interface {})[ 0 ].( map [ string ] interface {})) } To write ( likely to have helper function introduced soon ): if output . Thing . AttributeName != nil { if err := d . Set ( \"attribute_name\" , [] interface {}{ flattenStructure ( output . Thing . AttributeName )}); err != nil { return fmt . Errorf ( \"error setting attribute_name: %w\" , err ) } } else { d . Set ( \"attribute_name\" , nil ) } Root TypeList of TypeString and AWS List of String # To read: input := service . ExampleOperationInput {} if v , ok := d . GetOk ( \"attribute_name\" ); ok && len ( v .([] interface {})) > 0 { input . AttributeName = flex . ExpandStringList ( v .([] interface {})) } To write: d . Set ( \"attribute_name\" , aws . StringValueSlice ( output . Thing . AttributeName )) Root TypeMap of TypeString and AWS Map of String # To read: input := service . ExampleOperationInput {} if v , ok := d . GetOk ( \"attribute_name\" ); ok && len ( v .( map [ string ] interface {})) > 0 { input . AttributeName = flex . ExpandStringMap ( v .( map [ string ] interface {})) } To write: d . Set ( \"attribute_name\" , aws . StringValueMap ( output . Thing . AttributeName )) Root TypeSet of Resource and AWS List of Structure # To read: input := service . ExampleOperationInput {} if v , ok := d . GetOk ( \"attribute_name\" ); ok && v .( * schema . Set ). Len () > 0 { input . AttributeName = expandStructures ( v .( * schema . Set ). List ()) } To write: if err := d . Set ( \"attribute_name\" , flattenStructures ( output . Thing . AttributeNames )); err != nil { return fmt . Errorf ( \"error setting attribute_name: %w\" , err ) } Root TypeSet of TypeString and AWS List of String # To read: input := service . ExampleOperationInput {} if v , ok := d . GetOk ( \"attribute_name\" ); ok && v .( * schema . Set ). Len () > 0 { input . AttributeName = flex . ExpandStringSet ( v .( * schema . Set )) } To write: d . Set ( \"attribute_name\" , aws . StringValueSlice ( output . Thing . AttributeName )) Root TypeString and AWS String # To read: input := service . ExampleOperationInput {} if v , ok := d . GetOk ( \"attribute_name\" ); ok { input . AttributeName = aws . String ( v .( string )) } To write: d . Set ( \"attribute_name\" , output . Thing . AttributeName ) Root TypeString and AWS Timestamp # To ensure that parsing the read string value does not fail, define attribute_name 's schema.Schema with an appropriate ValidateFunc : \"attribute_name\" : { Type : schema . TypeString , // ... ValidateFunc : validation . IsRFC3339Time , }, To read: input := service . ExampleOperationInput {} if v , ok := d . GetOk ( \"attribute_name\" ); ok { v , _ := time . Parse ( time . RFC3339 , v .( string )) input . AttributeName = aws . Time ( v ) } To write: if output . Thing . AttributeName != nil { d . Set ( \"attribute_name\" , aws . TimeValue ( output . Thing . AttributeName ). Format ( time . RFC3339 )) } else { d . Set ( \"attribute_name\" , nil ) } Nested TypeBool and AWS Boolean # To read, if always sending the attribute value is correct: func expandStructure ( tfMap map [ string ] interface {}) * service . Structure { // ... if v , ok := tfMap [ \"nested_attribute_name\" ].( bool ); ok { apiObject . NestedAttributeName = aws . Bool ( v ) } // ... } To read, if only sending the attribute value when true is preferred ( !v for opposite): func expandStructure ( tfMap map [ string ] interface {}) * service . Structure { // ... if v , ok := tfMap [ \"nested_attribute_name\" ].( bool ); ok && v { apiObject . NestedAttributeName = aws . Bool ( v ) } // ... } To write: func flattenStructure ( apiObject * service . Structure ) map [ string ] interface {} { // ... if v := apiObject . NestedAttributeName ; v != nil { tfMap [ \"nested_attribute_name\" ] = aws . BoolValue ( v ) } // ... } Nested TypeFloat and AWS Float # To read: func expandStructure ( tfMap map [ string ] interface {}) * service . Structure { // ... if v , ok := tfMap [ \"nested_attribute_name\" ].( float64 ); ok && v != 0.0 { apiObject . NestedAttributeName = aws . Float64 ( v ) } // ... } To write: func flattenStructure ( apiObject * service . Structure ) map [ string ] interface {} { // ... if v := apiObject . NestedAttributeName ; v != nil { tfMap [ \"nested_attribute_name\" ] = aws . Float64Value ( v ) } // ... } Nested TypeInt and AWS Integer # To read: func expandStructure ( tfMap map [ string ] interface {}) * service . Structure { // ... if v , ok := tfMap [ \"nested_attribute_name\" ].( int ); ok && v != 0 { apiObject . NestedAttributeName = aws . Int64 ( int64 ( v )) } // ... } To write: func flattenStructure ( apiObject * service . Structure ) map [ string ] interface {} { // ... if v := apiObject . NestedAttributeName ; v != nil { tfMap [ \"nested_attribute_name\" ] = aws . Int64Value ( v ) } // ... } Nested TypeList of Resource and AWS List of Structure # To read: func expandStructure ( tfMap map [ string ] interface {}) * service . Structure { // ... if v , ok := tfMap [ \"nested_attribute_name\" ].([] interface {}); ok && len ( v ) > 0 { apiObject . NestedAttributeName = expandStructures ( v ) } // ... } To write: func flattenStructure ( apiObject * service . Structure ) map [ string ] interface {} { // ... if v := apiObject . NestedAttributeName ; v != nil { tfMap [ \"nested_attribute_name\" ] = flattenNestedStructures ( v ) } // ... } Nested TypeList of Resource and AWS Structure # To read: func expandStructure ( tfMap map [ string ] interface {}) * service . Structure { // ... if v , ok := tfMap [ \"nested_attribute_name\" ].([] interface {}); ok && len ( v ) > 0 { apiObject . NestedAttributeName = expandStructure ( v [ 0 ].( map [ string ] interface {})) } // ... } To write: func flattenStructure ( apiObject * service . Structure ) map [ string ] interface {} { // ... if v := apiObject . NestedAttributeName ; v != nil { tfMap [ \"nested_attribute_name\" ] = [] interface {}{ flattenNestedStructure ( v )} } // ... } Nested TypeList of TypeString and AWS List of String # To read: func expandStructure ( tfMap map [ string ] interface {}) * service . Structure { // ... if v , ok := tfMap [ \"nested_attribute_name\" ].([] interface {}); ok && len ( v ) > 0 { apiObject . NestedAttributeName = flex . ExpandStringList ( v ) } // ... } To write: func flattenStructure ( apiObject * service . Structure ) map [ string ] interface {} { // ... if v := apiObject . NestedAttributeName ; v != nil { tfMap [ \"nested_attribute_name\" ] = aws . StringValueSlice ( v ) } // ... } Nested TypeMap of TypeString and AWS Map of String # To read: input := service . ExampleOperationInput {} if v , ok := tfMap [ \"nested_attribute_name\" ].( map [ string ] interface {}); ok && len ( v ) > 0 { apiObject . NestedAttributeName = flex . ExpandStringMap ( v ) } To write: func flattenStructure ( apiObject * service . Structure ) map [ string ] interface {} { // ... if v := apiObject . NestedAttributeName ; v != nil { tfMap [ \"nested_attribute_name\" ] = aws . StringValueMap ( v ) } // ... } Nested TypeSet of Resource and AWS List of Structure # To read: func expandStructure ( tfMap map [ string ] interface {}) * service . Structure { // ... if v , ok := tfMap [ \"nested_attribute_name\" ].( * schema . Set ); ok && v . Len () > 0 { apiObject . NestedAttributeName = expandStructures ( v . List ()) } // ... } To write: func flattenStructure ( apiObject * service . Structure ) map [ string ] interface {} { // ... if v := apiObject . NestedAttributeName ; v != nil { tfMap [ \"nested_attribute_name\" ] = flattenNestedStructures ( v ) } // ... } Nested TypeSet of TypeString and AWS List of String # To read: func expandStructure ( tfMap map [ string ] interface {}) * service . Structure { // ... if v , ok := tfMap [ \"nested_attribute_name\" ].( * schema . Set ); ok && v . Len () > 0 { apiObject . NestedAttributeName = flex . ExpandStringSet ( v ) } // ... } To write: func flattenStructure ( apiObject * service . Structure ) map [ string ] interface {} { // ... if v := apiObject . NestedAttributeName ; v != nil { tfMap [ \"nested_attribute_name\" ] = aws . StringValueSlice ( v ) } // ... } Nested TypeString and AWS String # To read: func expandStructure ( tfMap map [ string ] interface {}) * service . Structure { // ... if v , ok := tfMap [ \"nested_attribute_name\" ].( string ); ok && v != \"\" { apiObject . NestedAttributeName = aws . String ( v ) } // ... } To write: func flattenStructure ( apiObject * service . Structure ) map [ string ] interface {} { // ... if v := apiObject . NestedAttributeName ; v != nil { tfMap [ \"nested_attribute_name\" ] = aws . StringValue ( v ) } // ... } Nested TypeString and AWS Timestamp # To ensure that parsing the read string value does not fail, define nested_attribute_name 's schema.Schema with an appropriate ValidateFunc : \"nested_attribute_name\" : { Type : schema . TypeString , // ... ValidateFunc : validation . IsRFC3339Time , }, To read: func expandStructure ( tfMap map [ string ] interface {}) * service . Structure { // ... if v , ok := tfMap [ \"nested_attribute_name\" ].( string ); ok && v != \"\" { v , _ := time . Parse ( time . RFC3339 , v ) apiObject . NestedAttributeName = aws . Time ( v ) } // ... } To write: func flattenStructure ( apiObject * service . Structure ) map [ string ] interface {} { // ... if v := apiObject . NestedAttributeName ; v != nil { tfMap [ \"nested_attribute_name\" ] = aws . TimeValue ( v ). Format ( time . RFC3339 ) } // ... } Further Guidelines # This section includes additional topics related to data design and decision making from the Terraform AWS Provider maintainers. Binary Values # Certain resources may need to interact with binary (non UTF-8) data while the Terraform State only supports UTF-8 data. Configurations attempting to pass binary data to an attribute will receive an error from Terraform CLI. These attributes should expect and store the value as a Base64 string while performing any necessary encoding or decoding in the resource logic. Destroy State Values # During resource destroy operations, only previously applied Terraform State values are available to resource logic. Even if the configuration is updated in a manner where both the resource destroy is triggered (e.g., setting the resource meta-argument count = 0 ) and an attribute value is updated, the resource logic will only have the previously applied data values. Any usage of attribute values during destroy should explicitly note in the resource documentation that the desired value must be applied into the Terraform State before any apply to destroy the resource. Hashed Values # Attribute values may be very lengthy or potentially contain Sensitive Values . A potential solution might be to use a hashing algorithm, such as MD5 or SHA256, to convert the value before saving in the Terraform State to reduce its relative size or attempt to obfuscate the value. However, there are a few reasons not to do so: Terraform expects any planned values to match applied values. Ensuring proper handling during the various Terraform operations such as difference planning and Terraform State storage can be a burden. Hashed values are generally unusable in downstream attribute references. If a value is hashed, it cannot be successfully used in another resource or provider configuration that expects the real value. Terraform plan differences are meant to be human readable. If a value is hashed, operators will only see the relatively unhelpful hash differences abc123 -> def456 in plans. Any value hashing implementation will not be accepted. An exception to this guidance is if the remote system explicitly provides a separate hash value in responses, in which a resource can provide a separate attribute with that hashed value. Sensitive Values # Marking an Attribute in the Terraform Plugin SDK Schema with Sensitive has the following real world implications: All occurrences of the Attribute will have the value hidden in plan difference output. In the context of an Attribute within a Block, all Blocks will hide all values of the Attribute. In Terraform CLI 0.14 (with the provider_sensitive_attrs experiment enabled) and later, any downstream references to the value in other configuration will hide the value in plan difference output. The value is either always hidden or not as the Terraform Plugin SDK does not currently implement conditional support for this functionality. Since Terraform Configurations have no control over the behavior, hiding values from the plan difference can incur a potentially undesirable user experience cost for operators. Given that and especially with the improvements in Terraform CLI 0.14, the Terraform AWS Provider maintainers guiding principles for determining whether an Attribute should be marked as Sensitive is if an Attribute value: Objectively will always contain a credential, password, or other secret material. Operators can have differing opinions on what constitutes secret material and the maintainers will make best effort determinations, if necessary consulting with the HashiCorp Security team. If the Attribute is within a Block, that all occurrences of the Attribute value will objectively contain secret material. Some APIs (and therefore the Terraform AWS Provider resources) implement generic \"setting\" and \"value\" structures which likely will contain a mixture of secret and non-secret material. These will generally not be accepted for marking as Sensitive . If you are unsatisfied with sensitive value handling, the maintainers can recommend ensuring there is a covering issue in the Terraform CLI and/or Terraform Plugin SDK projects explaining the use case. Ultimately, Terraform Plugins including the Terraform AWS Provider cannot implement their own sensitive value abilities if the upstream projects do not implement the appropriate functionality. Virtual Attributes # Attributes which only exist within Terraform and not the remote system are typically referred as virtual attributes. Especially in the case of Destroy State Values , these attributes rely on the Implicit State Passthrough behavior of values in Terraform to be available in resource logic. A fictitous example of one of these may be a resource attribute such as a skip_waiting flag, which is used only in the resource logic to skip the typical behavior of waiting for operations to complete. If a virtual attribute has a default value that does not match the Zero Value Mapping for the type, it is recommended to explicitly call d.Set() with the default value in the schema.Resource Importer State function, for example: & schema . Resource { // ... other fields ... Importer : & schema . ResourceImporter { State : func ( d * schema . ResourceData , meta interface {}) ([] * schema . ResourceData , error ) { d . Set ( \"skip_waiting\" , true ) return [] * schema . ResourceData { d }, nil }, }, } This helps prevent an immediate plan difference after resource import unless the configuration has a non-default value. Glossary # Below is a listing of relevant terms and descriptions for data handling and conversion in the Terraform AWS Provider to establish common conventions throughout this documentation. This list is not exhaustive of all concepts of Terraform Plugins, the Terraform AWS Provider, or the data handling that occurs during Terraform runs, but these should generally provide enough context about the topics discussed here. AWS Go SDK : Library that converts Go code into AWS Service API compatible operations and data types. Currently refers to version 1 (v1) available since 2015, however version 2 (v2) will reach general availability status soon. Project . AWS Go SDK Model : AWS Go SDK compatible format of AWS Service API Model. AWS Go SDK Service : AWS Service API Go code generated from the AWS Go SDK Model. Generated by the AWS Go SDK code. AWS Service API : Logical boundary of an AWS service by API endpoint. Some large AWS services may be marketed with many different product names under the same service API (e.g., VPC functionality is part of the EC2 API) and vice-versa where some services may be marketed with one product name but are split into multiple service APIs (e.g., Single Sign-On functionality is split into the Identity Store and SSO Admin APIs). AWS Service API Model : Declarative description of the AWS Service API operations and data types. Generated by the AWS service teams. Used to operate the API and generate API clients such as the various AWS Software Development Kits (SDKs). Terraform Language (\"Configuration\"): Configuration syntax interpreted by the Terraform CLI. An implementation of HCL . Full Documentation . Terraform Plugin Protocol : Description of Terraform Plugin operations and data types. Currently based on the Remote Procedure Call (RPC) library gRPC . Terraform Plugin Go : Low-level library that converts Go code into Terraform Plugin Protocol compatible operations and data types. Not currently implemented in the Terraform AWS Provider. Project . Terraform Plugin SDK : High-level library that converts Go code into Terraform Plugin Protocol compatible operations and data types. Project . Terraform Plugin SDK Schema : Declarative description of types and domain specific behaviors for a Terraform provider, including resources and attributes. Full Documentation . Terraform State : Bindings between objects in a remote system (e.g., an EC2 VPC) and a Terraform configuration (e.g., an aws_vpc resource configuration). Full Documentation . AWS Service API Models use specific terminology to describe data and types: Enumeration : Collection of valid values for a Shape. Operation : An API call. Includes information about input, output, and error Shapes. Shape : Type description. boolean : Boolean value. float : Fractional numeric value. May contain value validation such as maximum or minimum. integer : Whole numeric value. May contain value validation such as maximum or minimum. list : Collection that contains member Shapes. May contain value validation such as maximum or minimum keys. map : Grouping of key Shape to value Shape. May contain value validation such as maximum or minimum keys. string : Sequence of characters. May contain value validation such as an enumeration, regular expression pattern, maximum length, or minimum length. structure : Object that contains member Shapes. May represent an error. timestamp : Date and time value. The Terraform Language uses the following terminology to describe data and types: Attribute (\"Argument\"): Assigns a name to a data value. Block (\"Configuration Block\"): Container type for Attributes or Blocks. null : Virtual value equivalent to the Attribute not being set. Types : Full Documentation . any : Virtual type representing any concrete type in type declarations. bool : Boolean value. list (\"tuple\"): Ordered collection of values. map (\"object\"): Grouping of string keys to values. number : Numeric value. Can be either whole or fractional numbers. set : Unordered collection of values. string : Sequence of characters. Terraform Plugin SDK Schemas use the following terminology to describe data and types: Behaviors : Full Documentation . Sensitive : Whether the value should be hidden from user interface output. StateFunc : Conversion function between the value set by the Terraform Plugin and the value seen by Terraform Plugin SDK (and ultimately the Terraform State). Element : Underylying value type for a collection or grouping Schema. Resource Data : Data representation of a Resource Schema. Translation layer between the Schema and Go code of a Terraform Plugin. In the Terraform Plugin SDK, the ResourceData Go type. Resource Schema : Grouping of Schema that represents a Terraform Resource. Schema : Represents an Attribute or Block. Has a Type and Behavior(s). Types : Full Documentation . TypeBool : Boolean value. TypeFloat : Fractional numeric value. TypeInt : Whole numeric value. TypeList : Ordered collection of values or Blocks. TypeMap : Grouping of key Type to value Type. TypeSet : Unordered collection of values or Blocks. TypeString : Sequence of characters value. Some other terms that may be used: Block Attribute (\"Child Attribute\", \"Nested Attribute\"): Block level Attribute. Expand Function : Function that converts Terraform Plugin SDK data into the equivalent AWS Go SDK type. Flatten Function : Function that converts an AWS Go SDK type into the equivalent Terraform Plugin SDK data. NullableTypeBool : Workaround \"schema type\" created to accept a boolean value that is not configured in addition to true and false. Not implemented in the Terraform Plugin SDK, but uses TypeString (where \"\" represents not configured) and additional validation. NullableTypeFloat : Workaround \"schema type\" created to accept a fractional numeric value that is not configured in addition to 0.0 . Not implemented in the Terraform Plugin SDK, but uses TypeString (where \"\" represents not configured) and additional validation. NullableTypeInt : Workaround \"schema type\" created to accept a whole numeric value that is not configured in addition to 0 . Not implemented in the Terraform Plugin SDK, but uses TypeString (where \"\" represents not configured) and additional validation. Root Attribute : Resource top level Attribute or Block. For additional reference, the Terraform documentation also includes a full glossary of terminology .","title":"Data Handling and Conversion"},{"location":"contributing/data-handling-and-conversion/#data-handling-and-conversion","text":"Please Note: This documentation is intended for Terraform AWS Provider code developers. Typical operators writing and applying Terraform configurations do not need to read or understand this material. The Terraform AWS Provider codebase bridges the implementation of a Terraform Plugin and an AWS API client to support AWS operations and data types as Terraform Resources. Data handling and conversion is a large portion of resource implementation given the domain specific implementations of each side of the provider. The first where Terraform is a generic infrastructure as code tool with a generic data model and the other where the details are driven by AWS API data modeling concepts. This guide is intended to explain and show preferred Terraform AWS Provider code implementations required to successfully translate data between these two systems. At the bottom of this documentation is a Glossary section , which may be a helpful reference while reading the other sections. Data Conversions in Terraform Providers Implicit State Passthrough Data Conversions in the Terraform AWS Provider Type Mapping Zero Value Mapping Root Attributes Versus Block Attributes Recommended Implementations Expand Functions for Blocks Flatten Functions for Blocks Root TypeBool and AWS Boolean Root TypeFloat and AWS Float Root TypeInt and AWS Integer Root TypeList of Resource and AWS List of Structure Root TypeList of Resource and AWS Structure Root TypeList of TypeString and AWS List of String Root TypeMap of TypeString and AWS Map of String Root TypeSet of Resource and AWS List of Structure Root TypeSet of TypeString and AWS List of String Root TypeString and AWS String Root TypeString and AWS Timestamp Nested TypeBool and AWS Boolean Nested TypeFloat and AWS Float Nested TypeInt and AWS Integer Nested TypeList of Resource and AWS List of Structure Nested TypeList of Resource and AWS Structure Nested TypeList of TypeString and AWS List of String Nested TypeMap of TypeString and AWS Map of String Nested TypeSet of Resource and AWS List of Structure Nested TypeSet of TypeString and AWS List of String Nested TypeString and AWS String Nested TypeString and AWS Timestamp Further Guidelines Binary Values Destroy State Values Hashed Values Sensitive Values Virtual Attributes Glossary","title":"Data Handling and Conversion"},{"location":"contributing/data-handling-and-conversion/#data-conversions-in-terraform-providers","text":"Before getting into highly specific documentation about the Terraform AWS Provider handling of data, it may be helpful to briefly highlight how Terraform Plugins (Terraform Providers in this case) interact with Terraform CLI and the Terraform State in general and where this documentation fits into the whole process. There are two primary data flows that are typically handled by resources within a Terraform Provider. Data is either being converted from a planned new Terraform State into making a remote system request or a remote system response is being converted into a applied new Terraform State. The semantics of how the data of the planned new Terraform State is surfaced to the resource implementation is determined by where a resource is in its lifecycle and mainly handled by Terraform CLI. This concept can be explored further in the Terraform Resource Instance Change Lifecycle documentation , with the caveat that some additional behaviors occur within the Terraform Plugin SDK as well (if the Terraform Plugin uses that implementation detail). As a generic walkthrough, the following data handling occurs when creating a Terraform Resource: An operator creates a Terraform configuration with a new resource defined and runs terraform apply Terraform CLI merges an empty prior state for the resource, along with the given configuration state, to create a planned new state for the resource Terraform CLI sends a Terraform Plugin Protocol request to create the new resource with its planned new state data If the Terraform Plugin is using a higher level library, such as the Terraform Plugin SDK, that library receives the request and translates the Terraform Plugin Protocol data types into the expected library types Terraform Plugin invokes the resource creation function with the planned new state data The planned new state data is converted into an remote system request (e.g., API creation request) that is invoked The remote system response is received and the data is converted into an applied new state If the Terraform Plugin is using a higher level library, such as the Terraform Plugin SDK, that library translates the library types back into Terraform Plugin Protocol data types Terraform Plugin responds to Terraform Plugin Protocol request with the new state data Terraform CLI verifies and stores the new state The highlighted lines are the focus of this documentation today. In the future however, the Terraform AWS Provider may replace certain functionality in the items mentioning the Terraform Plugin SDK above to workaround certain limitations of that particular library.","title":"Data Conversions in Terraform Providers"},{"location":"contributing/data-handling-and-conversion/#implicit-state-passthrough","text":"An important behavior to note with Terraform State handling is if the value of a particular root attribute or block is not refreshed during plan or apply operations, then the prior Terraform State is implicitly deep copied to the new Terraform State for that attribute or block. Given a resource with a writeable root attribute named not_set_attr that never calls d.Set(\"not_set_attr\", /* ... nil or value */) , the following happens: If the Terraform configuration contains not_set_attr = \"anything\" on resource creation, the Terraform State contains not_set_attr equal to \"anything\" after apply. If the Terraform configuration is updated to not_set_attr = \"updated\" , the Terraform State contains not_set_attr equal to \"updated\" after apply. If the attribute was meant to be associated with a remote system value, it will never update the Terraform State on plan or apply with the remote value. Effectively, it cannot perform drift detection with the remote value. This however does not apply for nested attributes and blocks if the parent block is refreshed. Given a resource with a root block named parent , nested child attributes named set_attr and not_set_attr , and that calls d.Set(\"parent\", /* ... only refreshes nested set_attr ... */) , the Terraform State for the nested not_set_attr will not be copied. There are valid use cases for passthrough attribute values such as these (see the Virtual Attributes section ), however the behavior can be confusing or incorrect for operators if the drift detection is expected. Typically these types of drift detection issues can be discovered by implementing resource import testing with state verification.","title":"Implicit State Passthrough"},{"location":"contributing/data-handling-and-conversion/#data-conversions-in-the-terraform-aws-provider","text":"To expand on the data handling that occurs specifically within the Terraform AWS Provider resource implementations, the above resource creation items become the below in practice given our current usage of the Terraform Plugin SDK: The Create / CreateContext function of a schema.Resource is invoked with *schema.ResourceData containing the planned new state data (conventionally named d ) and an AWS API client (conventionally named meta ). Note: Before reaching this point, the ResourceData was already translated from the Terraform Plugin Protocol data types by the Terraform Plugin SDK so values can be read by invoking d.Get() and d.GetOk() receiver methods with Attribute and Block names from the Schema of the schema.Resource . An AWS Go SDK operation input type (e.g., *ec2.CreateVpcInput ) is initialized For each necessary field to configure in the operation input type, the data is read from the ResourceData (e.g., d.Get() , d.GetOk() ) and converted into the AWS Go SDK type for the field (e.g., *string ) The AWS Go SDK operation is invoked and the output type (e.g., *ec2.CreateVpcOutput ) is initialized For each necessary Attribute, Block, or resource identifier to be saved in the state, the data is read from the AWS Go SDK type for the field ( *string ), if necessary converted into a ResourceData compatible type, and saved into a mutated ResourceData (e.g., d.Set() , d.SetId() ) Function is returned","title":"Data Conversions in the Terraform AWS Provider"},{"location":"contributing/data-handling-and-conversion/#type-mapping","text":"To further understand the necessary data conversions used throughout the Terraform AWS Provider codebase between AWS Go SDK types and the Terraform Plugin SDK, the following table can be referenced for most scenarios: AWS API Model AWS Go SDK Terraform Plugin SDK Terraform Language/State boolean *bool TypeBool ( bool ) bool float *float64 TypeFloat ( float64 ) number integer *int64 TypeInt ( int ) number list []*T TypeList ( []interface{} of T ) TypeSet ( *schema.Set of T ) list(any) set(any) map map[T1]*T2 TypeMap ( map[string]interface{} ) map(any) string *string TypeString ( string ) string structure struct TypeList ( []interface{} of map[string]interface{} ) list(object(any)) timestamp *time.Time TypeString (typically RFC3339 formatted) string You may notice there are type encoding differences the AWS Go SDK and Terraform Plugin SDK: AWS Go SDK types are all Go pointer types, while Terraform Plugin SDK types are not. AWS Go SDK structures are the Go struct type, while there is no semantically equivalent Terraform Plugin SDK type. Instead they are represented as a slice of interfaces with an underlying map of interfaces. AWS Go SDK types are all Go concrete types, while the Terraform Plugin SDK types for collections and maps are interfaces. AWS Go SDK whole numeric type is always 64-bit, while the Terraform Plugin SDK type is implementation-specific. Conceptually, the first and second items above the most problematic in the Terraform AWS Provider codebase. The first item because non-pointer types in Go cannot implement the concept of no value ( nil ). The Zero Value Mapping section will go into more details about the implications of this limitation. The second item because it can be confusing to always handle a structure (\"object\") type as a list. There are efforts to replace the Terraform Plugin type system with one similar the underlying Terraform CLI type system. As these efforts materialize, this documentation will be updated.","title":"Type Mapping"},{"location":"contributing/data-handling-and-conversion/#zero-value-mapping","text":"As mentioned in the Type Mapping section , there is a discrepency with how the Terraform Plugin SDK represents values and the reality that a Terraform State may not configure an Attribute. These values will default to the matching underlying Go type \"zero value\" if not set: Terraform Plugin SDK Go Type Zero Value TypeBool bool false TypeFloat float64 0.0 TypeInt int 0 TypeString string \"\" For Terraform resource logic this means that these special values must always be accounted for in implementation. The semantics of the API and its meaning of the zero value will determine whether: If it is not used/needed, then generally the zero value can safely be used to store an \"unset\" value and should be ignored when sending to the API. If it is used/needed, whether: A value can always be set and it is safe to always send to the API. Generally, boolean values fall into this category. A different default/sentinel value must be used as the \"unset\" value so it can either match the default of the API or be ignored when sending to the API. A special type implementation is required within the schema to workaround the limitation. The maintainers can provide guidance on appropriate solutions for cases not mentioned in the Recommended Implementation section .","title":"Zero Value Mapping"},{"location":"contributing/data-handling-and-conversion/#root-attributes-versus-block-attributes","text":"All Attributes and Blocks at the top level of schema.Resource Schema are considered \"root\" attributes. These will always be handled with receiver methods on ResourceData , such as reading with d.Get() , d.GetOk() , etc. and writing with d.Set() . Any nested Attributes and Blocks inside those root Blocks will then be handled with standard Go types according to the table in the Type Mapping section . By convention in the codebase, each level of Block handling beyond root attributes should be separated into \"expand\" functions that convert Terraform Plugin SDK data into the equivalent AWS Go SDK type (typically named expand{Service}{Type} ) and \"flatten\" functions that convert an AWS Go SDK type into the equivalent Terraform Plugin SDK data (typically named flatten{Service}{Type} ). The Recommended Implementations section will go into those details. NOTE: While it is possible in certain type scenarios to deeply read and write ResourceData information for a Block Attribute, this practice is discouraged in preference of only handling root Attributes and Blocks.","title":"Root Attributes Versus Block Attributes"},{"location":"contributing/data-handling-and-conversion/#recommended-implementations","text":"Given the various complexities around the Terraform Plugin SDK type system, this section contains recommended implementations for Terraform AWS Provider resource code based on the Type Mapping section and the features of the Terraform Plugin SDK and AWS Go SDK. The eventual goal and styling for many of these recommendations is to ease static analysis of the codebase and future potential code generation efforts. Some of these coding patterns may not be well represented in the codebase, as refactoring the many older styles over years of community development is a large task. However this is meant to represent the preferred implementations today. These will continue to evolve as this codebase and the Terraform Plugin ecosystem changes.","title":"Recommended Implementations"},{"location":"contributing/data-handling-and-conversion/#where-to-define-flex-functions","text":"Define FLatten and EXpand (i.e., flex) functions at the most local level possible. This table provides guidance on the preferred place to define flex functions based on usage. Where Used Where to Define Include Service in Name One resource (e.g., aws_instance ) Resource file (e.g., internal/service/ec2/instance.go ) No Few resources in one service (e.g., EC2 ) Resource file or service flex file (e.g., internal/service/ec2/flex.go ) No Widely used in one service (e.g., EC2 ) Service flex file (e.g., internal/service/ec2/flex.go ) No Two services (e.g., EC2 and EKS ) Define a copy in each service If helpful 3+ services internal/flex/flex.go Yes","title":"Where to Define Flex Functions"},{"location":"contributing/data-handling-and-conversion/#expand-functions-for-blocks","text":"func expandStructure ( tfMap map [ string ] interface {}) * service . Structure { if tfMap == nil { return nil } apiObject := & service . Structure {} // ... nested attribute handling ... return apiObject } func expandStructures ( tfList [] interface {}) [] * service . Structure { if len ( tfList ) == 0 { return nil } var apiObjects [] * service . Structure for _ , tfMapRaw := range tfList { tfMap , ok := tfMapRaw .( map [ string ] interface {}) if ! ok { continue } apiObject := expandStructure ( tfMap ) if apiObject == nil { continue } apiObjects = append ( apiObjects , apiObject ) } return apiObjects }","title":"Expand Functions for Blocks"},{"location":"contributing/data-handling-and-conversion/#flatten-functions-for-blocks","text":"func flattenStructure ( apiObject * service . Structure ) map [ string ] interface {} { if apiObject == nil { return nil } tfMap := map [ string ] interface {}{} // ... nested attribute handling ... return tfMap } func flattenStructures ( apiObjects [] * service . Structure ) [] interface {} { if len ( apiObjects ) == 0 { return nil } var tfList [] interface {} for _ , apiObject := range apiObjects { if apiObject == nil { continue } tfList = append ( tfList , flattenStructure ( apiObject )) } return tfList }","title":"Flatten Functions for Blocks"},{"location":"contributing/data-handling-and-conversion/#root-typebool-and-aws-boolean","text":"To read, if always sending the attribute value is correct: input := service . ExampleOperationInput { AttributeName : aws . String ( d . Get ( \"attribute_name\" ).( bool )) } Otherwise to read, if only sending the attribute value when true is preferred ( !ok for opposite): input := service . ExampleOperationInput {} if v , ok := d . GetOk ( \"attribute_name\" ); ok { input . AttributeName = aws . Bool ( v .( bool )) } To write: d . Set ( \"attribute_name\" , output . Thing . AttributeName )","title":"Root TypeBool and AWS Boolean"},{"location":"contributing/data-handling-and-conversion/#root-typefloat-and-aws-float","text":"To read: input := service . ExampleOperationInput {} if v , ok := d . GetOk ( \"attribute_name\" ); ok { input . AttributeName = aws . Float64 ( v .( float64 )) } To write: d . Set ( \"attribute_name\" , output . Thing . AttributeName )","title":"Root TypeFloat and AWS Float"},{"location":"contributing/data-handling-and-conversion/#root-typeint-and-aws-integer","text":"To read: input := service . ExampleOperationInput {} if v , ok := d . GetOk ( \"attribute_name\" ); ok { input . AttributeName = aws . Int64 ( int64 ( v .( int ))) } To write: d . Set ( \"attribute_name\" , output . Thing . AttributeName )","title":"Root TypeInt and AWS Integer"},{"location":"contributing/data-handling-and-conversion/#root-typelist-of-resource-and-aws-list-of-structure","text":"To read: input := service . ExampleOperationInput {} if v , ok := d . GetOk ( \"attribute_name\" ); ok && len ( v .([] interface {})) > 0 { input . AttributeName = expandStructures ( v .([] interface {})) } To write: if err := d . Set ( \"attribute_name\" , flattenStructures ( output . Thing . AttributeName )); err != nil { return fmt . Errorf ( \"error setting attribute_name: %w\" , err ) }","title":"Root TypeList of Resource and AWS List of Structure"},{"location":"contributing/data-handling-and-conversion/#root-typelist-of-resource-and-aws-structure","text":"To read: input := service . ExampleOperationInput {} if v , ok := d . GetOk ( \"attribute_name\" ); ok && len ( v .([] interface {})) > 0 && v .([] interface {})[ 0 ] != nil { input . AttributeName = expandStructure ( v .([] interface {})[ 0 ].( map [ string ] interface {})) } To write ( likely to have helper function introduced soon ): if output . Thing . AttributeName != nil { if err := d . Set ( \"attribute_name\" , [] interface {}{ flattenStructure ( output . Thing . AttributeName )}); err != nil { return fmt . Errorf ( \"error setting attribute_name: %w\" , err ) } } else { d . Set ( \"attribute_name\" , nil ) }","title":"Root TypeList of Resource and AWS Structure"},{"location":"contributing/data-handling-and-conversion/#root-typelist-of-typestring-and-aws-list-of-string","text":"To read: input := service . ExampleOperationInput {} if v , ok := d . GetOk ( \"attribute_name\" ); ok && len ( v .([] interface {})) > 0 { input . AttributeName = flex . ExpandStringList ( v .([] interface {})) } To write: d . Set ( \"attribute_name\" , aws . StringValueSlice ( output . Thing . AttributeName ))","title":"Root TypeList of TypeString and AWS List of String"},{"location":"contributing/data-handling-and-conversion/#root-typemap-of-typestring-and-aws-map-of-string","text":"To read: input := service . ExampleOperationInput {} if v , ok := d . GetOk ( \"attribute_name\" ); ok && len ( v .( map [ string ] interface {})) > 0 { input . AttributeName = flex . ExpandStringMap ( v .( map [ string ] interface {})) } To write: d . Set ( \"attribute_name\" , aws . StringValueMap ( output . Thing . AttributeName ))","title":"Root TypeMap of TypeString and AWS Map of String"},{"location":"contributing/data-handling-and-conversion/#root-typeset-of-resource-and-aws-list-of-structure","text":"To read: input := service . ExampleOperationInput {} if v , ok := d . GetOk ( \"attribute_name\" ); ok && v .( * schema . Set ). Len () > 0 { input . AttributeName = expandStructures ( v .( * schema . Set ). List ()) } To write: if err := d . Set ( \"attribute_name\" , flattenStructures ( output . Thing . AttributeNames )); err != nil { return fmt . Errorf ( \"error setting attribute_name: %w\" , err ) }","title":"Root TypeSet of Resource and AWS List of Structure"},{"location":"contributing/data-handling-and-conversion/#root-typeset-of-typestring-and-aws-list-of-string","text":"To read: input := service . ExampleOperationInput {} if v , ok := d . GetOk ( \"attribute_name\" ); ok && v .( * schema . Set ). Len () > 0 { input . AttributeName = flex . ExpandStringSet ( v .( * schema . Set )) } To write: d . Set ( \"attribute_name\" , aws . StringValueSlice ( output . Thing . AttributeName ))","title":"Root TypeSet of TypeString and AWS List of String"},{"location":"contributing/data-handling-and-conversion/#root-typestring-and-aws-string","text":"To read: input := service . ExampleOperationInput {} if v , ok := d . GetOk ( \"attribute_name\" ); ok { input . AttributeName = aws . String ( v .( string )) } To write: d . Set ( \"attribute_name\" , output . Thing . AttributeName )","title":"Root TypeString and AWS String"},{"location":"contributing/data-handling-and-conversion/#root-typestring-and-aws-timestamp","text":"To ensure that parsing the read string value does not fail, define attribute_name 's schema.Schema with an appropriate ValidateFunc : \"attribute_name\" : { Type : schema . TypeString , // ... ValidateFunc : validation . IsRFC3339Time , }, To read: input := service . ExampleOperationInput {} if v , ok := d . GetOk ( \"attribute_name\" ); ok { v , _ := time . Parse ( time . RFC3339 , v .( string )) input . AttributeName = aws . Time ( v ) } To write: if output . Thing . AttributeName != nil { d . Set ( \"attribute_name\" , aws . TimeValue ( output . Thing . AttributeName ). Format ( time . RFC3339 )) } else { d . Set ( \"attribute_name\" , nil ) }","title":"Root TypeString and AWS Timestamp"},{"location":"contributing/data-handling-and-conversion/#nested-typebool-and-aws-boolean","text":"To read, if always sending the attribute value is correct: func expandStructure ( tfMap map [ string ] interface {}) * service . Structure { // ... if v , ok := tfMap [ \"nested_attribute_name\" ].( bool ); ok { apiObject . NestedAttributeName = aws . Bool ( v ) } // ... } To read, if only sending the attribute value when true is preferred ( !v for opposite): func expandStructure ( tfMap map [ string ] interface {}) * service . Structure { // ... if v , ok := tfMap [ \"nested_attribute_name\" ].( bool ); ok && v { apiObject . NestedAttributeName = aws . Bool ( v ) } // ... } To write: func flattenStructure ( apiObject * service . Structure ) map [ string ] interface {} { // ... if v := apiObject . NestedAttributeName ; v != nil { tfMap [ \"nested_attribute_name\" ] = aws . BoolValue ( v ) } // ... }","title":"Nested TypeBool and AWS Boolean"},{"location":"contributing/data-handling-and-conversion/#nested-typefloat-and-aws-float","text":"To read: func expandStructure ( tfMap map [ string ] interface {}) * service . Structure { // ... if v , ok := tfMap [ \"nested_attribute_name\" ].( float64 ); ok && v != 0.0 { apiObject . NestedAttributeName = aws . Float64 ( v ) } // ... } To write: func flattenStructure ( apiObject * service . Structure ) map [ string ] interface {} { // ... if v := apiObject . NestedAttributeName ; v != nil { tfMap [ \"nested_attribute_name\" ] = aws . Float64Value ( v ) } // ... }","title":"Nested TypeFloat and AWS Float"},{"location":"contributing/data-handling-and-conversion/#nested-typeint-and-aws-integer","text":"To read: func expandStructure ( tfMap map [ string ] interface {}) * service . Structure { // ... if v , ok := tfMap [ \"nested_attribute_name\" ].( int ); ok && v != 0 { apiObject . NestedAttributeName = aws . Int64 ( int64 ( v )) } // ... } To write: func flattenStructure ( apiObject * service . Structure ) map [ string ] interface {} { // ... if v := apiObject . NestedAttributeName ; v != nil { tfMap [ \"nested_attribute_name\" ] = aws . Int64Value ( v ) } // ... }","title":"Nested TypeInt and AWS Integer"},{"location":"contributing/data-handling-and-conversion/#nested-typelist-of-resource-and-aws-list-of-structure","text":"To read: func expandStructure ( tfMap map [ string ] interface {}) * service . Structure { // ... if v , ok := tfMap [ \"nested_attribute_name\" ].([] interface {}); ok && len ( v ) > 0 { apiObject . NestedAttributeName = expandStructures ( v ) } // ... } To write: func flattenStructure ( apiObject * service . Structure ) map [ string ] interface {} { // ... if v := apiObject . NestedAttributeName ; v != nil { tfMap [ \"nested_attribute_name\" ] = flattenNestedStructures ( v ) } // ... }","title":"Nested TypeList of Resource and AWS List of Structure"},{"location":"contributing/data-handling-and-conversion/#nested-typelist-of-resource-and-aws-structure","text":"To read: func expandStructure ( tfMap map [ string ] interface {}) * service . Structure { // ... if v , ok := tfMap [ \"nested_attribute_name\" ].([] interface {}); ok && len ( v ) > 0 { apiObject . NestedAttributeName = expandStructure ( v [ 0 ].( map [ string ] interface {})) } // ... } To write: func flattenStructure ( apiObject * service . Structure ) map [ string ] interface {} { // ... if v := apiObject . NestedAttributeName ; v != nil { tfMap [ \"nested_attribute_name\" ] = [] interface {}{ flattenNestedStructure ( v )} } // ... }","title":"Nested TypeList of Resource and AWS Structure"},{"location":"contributing/data-handling-and-conversion/#nested-typelist-of-typestring-and-aws-list-of-string","text":"To read: func expandStructure ( tfMap map [ string ] interface {}) * service . Structure { // ... if v , ok := tfMap [ \"nested_attribute_name\" ].([] interface {}); ok && len ( v ) > 0 { apiObject . NestedAttributeName = flex . ExpandStringList ( v ) } // ... } To write: func flattenStructure ( apiObject * service . Structure ) map [ string ] interface {} { // ... if v := apiObject . NestedAttributeName ; v != nil { tfMap [ \"nested_attribute_name\" ] = aws . StringValueSlice ( v ) } // ... }","title":"Nested TypeList of TypeString and AWS List of String"},{"location":"contributing/data-handling-and-conversion/#nested-typemap-of-typestring-and-aws-map-of-string","text":"To read: input := service . ExampleOperationInput {} if v , ok := tfMap [ \"nested_attribute_name\" ].( map [ string ] interface {}); ok && len ( v ) > 0 { apiObject . NestedAttributeName = flex . ExpandStringMap ( v ) } To write: func flattenStructure ( apiObject * service . Structure ) map [ string ] interface {} { // ... if v := apiObject . NestedAttributeName ; v != nil { tfMap [ \"nested_attribute_name\" ] = aws . StringValueMap ( v ) } // ... }","title":"Nested TypeMap of TypeString and AWS Map of String"},{"location":"contributing/data-handling-and-conversion/#nested-typeset-of-resource-and-aws-list-of-structure","text":"To read: func expandStructure ( tfMap map [ string ] interface {}) * service . Structure { // ... if v , ok := tfMap [ \"nested_attribute_name\" ].( * schema . Set ); ok && v . Len () > 0 { apiObject . NestedAttributeName = expandStructures ( v . List ()) } // ... } To write: func flattenStructure ( apiObject * service . Structure ) map [ string ] interface {} { // ... if v := apiObject . NestedAttributeName ; v != nil { tfMap [ \"nested_attribute_name\" ] = flattenNestedStructures ( v ) } // ... }","title":"Nested TypeSet of Resource and AWS List of Structure"},{"location":"contributing/data-handling-and-conversion/#nested-typeset-of-typestring-and-aws-list-of-string","text":"To read: func expandStructure ( tfMap map [ string ] interface {}) * service . Structure { // ... if v , ok := tfMap [ \"nested_attribute_name\" ].( * schema . Set ); ok && v . Len () > 0 { apiObject . NestedAttributeName = flex . ExpandStringSet ( v ) } // ... } To write: func flattenStructure ( apiObject * service . Structure ) map [ string ] interface {} { // ... if v := apiObject . NestedAttributeName ; v != nil { tfMap [ \"nested_attribute_name\" ] = aws . StringValueSlice ( v ) } // ... }","title":"Nested TypeSet of TypeString and AWS List of String"},{"location":"contributing/data-handling-and-conversion/#nested-typestring-and-aws-string","text":"To read: func expandStructure ( tfMap map [ string ] interface {}) * service . Structure { // ... if v , ok := tfMap [ \"nested_attribute_name\" ].( string ); ok && v != \"\" { apiObject . NestedAttributeName = aws . String ( v ) } // ... } To write: func flattenStructure ( apiObject * service . Structure ) map [ string ] interface {} { // ... if v := apiObject . NestedAttributeName ; v != nil { tfMap [ \"nested_attribute_name\" ] = aws . StringValue ( v ) } // ... }","title":"Nested TypeString and AWS String"},{"location":"contributing/data-handling-and-conversion/#nested-typestring-and-aws-timestamp","text":"To ensure that parsing the read string value does not fail, define nested_attribute_name 's schema.Schema with an appropriate ValidateFunc : \"nested_attribute_name\" : { Type : schema . TypeString , // ... ValidateFunc : validation . IsRFC3339Time , }, To read: func expandStructure ( tfMap map [ string ] interface {}) * service . Structure { // ... if v , ok := tfMap [ \"nested_attribute_name\" ].( string ); ok && v != \"\" { v , _ := time . Parse ( time . RFC3339 , v ) apiObject . NestedAttributeName = aws . Time ( v ) } // ... } To write: func flattenStructure ( apiObject * service . Structure ) map [ string ] interface {} { // ... if v := apiObject . NestedAttributeName ; v != nil { tfMap [ \"nested_attribute_name\" ] = aws . TimeValue ( v ). Format ( time . RFC3339 ) } // ... }","title":"Nested TypeString and AWS Timestamp"},{"location":"contributing/data-handling-and-conversion/#further-guidelines","text":"This section includes additional topics related to data design and decision making from the Terraform AWS Provider maintainers.","title":"Further Guidelines"},{"location":"contributing/data-handling-and-conversion/#binary-values","text":"Certain resources may need to interact with binary (non UTF-8) data while the Terraform State only supports UTF-8 data. Configurations attempting to pass binary data to an attribute will receive an error from Terraform CLI. These attributes should expect and store the value as a Base64 string while performing any necessary encoding or decoding in the resource logic.","title":"Binary Values"},{"location":"contributing/data-handling-and-conversion/#destroy-state-values","text":"During resource destroy operations, only previously applied Terraform State values are available to resource logic. Even if the configuration is updated in a manner where both the resource destroy is triggered (e.g., setting the resource meta-argument count = 0 ) and an attribute value is updated, the resource logic will only have the previously applied data values. Any usage of attribute values during destroy should explicitly note in the resource documentation that the desired value must be applied into the Terraform State before any apply to destroy the resource.","title":"Destroy State Values"},{"location":"contributing/data-handling-and-conversion/#hashed-values","text":"Attribute values may be very lengthy or potentially contain Sensitive Values . A potential solution might be to use a hashing algorithm, such as MD5 or SHA256, to convert the value before saving in the Terraform State to reduce its relative size or attempt to obfuscate the value. However, there are a few reasons not to do so: Terraform expects any planned values to match applied values. Ensuring proper handling during the various Terraform operations such as difference planning and Terraform State storage can be a burden. Hashed values are generally unusable in downstream attribute references. If a value is hashed, it cannot be successfully used in another resource or provider configuration that expects the real value. Terraform plan differences are meant to be human readable. If a value is hashed, operators will only see the relatively unhelpful hash differences abc123 -> def456 in plans. Any value hashing implementation will not be accepted. An exception to this guidance is if the remote system explicitly provides a separate hash value in responses, in which a resource can provide a separate attribute with that hashed value.","title":"Hashed Values"},{"location":"contributing/data-handling-and-conversion/#sensitive-values","text":"Marking an Attribute in the Terraform Plugin SDK Schema with Sensitive has the following real world implications: All occurrences of the Attribute will have the value hidden in plan difference output. In the context of an Attribute within a Block, all Blocks will hide all values of the Attribute. In Terraform CLI 0.14 (with the provider_sensitive_attrs experiment enabled) and later, any downstream references to the value in other configuration will hide the value in plan difference output. The value is either always hidden or not as the Terraform Plugin SDK does not currently implement conditional support for this functionality. Since Terraform Configurations have no control over the behavior, hiding values from the plan difference can incur a potentially undesirable user experience cost for operators. Given that and especially with the improvements in Terraform CLI 0.14, the Terraform AWS Provider maintainers guiding principles for determining whether an Attribute should be marked as Sensitive is if an Attribute value: Objectively will always contain a credential, password, or other secret material. Operators can have differing opinions on what constitutes secret material and the maintainers will make best effort determinations, if necessary consulting with the HashiCorp Security team. If the Attribute is within a Block, that all occurrences of the Attribute value will objectively contain secret material. Some APIs (and therefore the Terraform AWS Provider resources) implement generic \"setting\" and \"value\" structures which likely will contain a mixture of secret and non-secret material. These will generally not be accepted for marking as Sensitive . If you are unsatisfied with sensitive value handling, the maintainers can recommend ensuring there is a covering issue in the Terraform CLI and/or Terraform Plugin SDK projects explaining the use case. Ultimately, Terraform Plugins including the Terraform AWS Provider cannot implement their own sensitive value abilities if the upstream projects do not implement the appropriate functionality.","title":"Sensitive Values"},{"location":"contributing/data-handling-and-conversion/#virtual-attributes","text":"Attributes which only exist within Terraform and not the remote system are typically referred as virtual attributes. Especially in the case of Destroy State Values , these attributes rely on the Implicit State Passthrough behavior of values in Terraform to be available in resource logic. A fictitous example of one of these may be a resource attribute such as a skip_waiting flag, which is used only in the resource logic to skip the typical behavior of waiting for operations to complete. If a virtual attribute has a default value that does not match the Zero Value Mapping for the type, it is recommended to explicitly call d.Set() with the default value in the schema.Resource Importer State function, for example: & schema . Resource { // ... other fields ... Importer : & schema . ResourceImporter { State : func ( d * schema . ResourceData , meta interface {}) ([] * schema . ResourceData , error ) { d . Set ( \"skip_waiting\" , true ) return [] * schema . ResourceData { d }, nil }, }, } This helps prevent an immediate plan difference after resource import unless the configuration has a non-default value.","title":"Virtual Attributes"},{"location":"contributing/data-handling-and-conversion/#glossary","text":"Below is a listing of relevant terms and descriptions for data handling and conversion in the Terraform AWS Provider to establish common conventions throughout this documentation. This list is not exhaustive of all concepts of Terraform Plugins, the Terraform AWS Provider, or the data handling that occurs during Terraform runs, but these should generally provide enough context about the topics discussed here. AWS Go SDK : Library that converts Go code into AWS Service API compatible operations and data types. Currently refers to version 1 (v1) available since 2015, however version 2 (v2) will reach general availability status soon. Project . AWS Go SDK Model : AWS Go SDK compatible format of AWS Service API Model. AWS Go SDK Service : AWS Service API Go code generated from the AWS Go SDK Model. Generated by the AWS Go SDK code. AWS Service API : Logical boundary of an AWS service by API endpoint. Some large AWS services may be marketed with many different product names under the same service API (e.g., VPC functionality is part of the EC2 API) and vice-versa where some services may be marketed with one product name but are split into multiple service APIs (e.g., Single Sign-On functionality is split into the Identity Store and SSO Admin APIs). AWS Service API Model : Declarative description of the AWS Service API operations and data types. Generated by the AWS service teams. Used to operate the API and generate API clients such as the various AWS Software Development Kits (SDKs). Terraform Language (\"Configuration\"): Configuration syntax interpreted by the Terraform CLI. An implementation of HCL . Full Documentation . Terraform Plugin Protocol : Description of Terraform Plugin operations and data types. Currently based on the Remote Procedure Call (RPC) library gRPC . Terraform Plugin Go : Low-level library that converts Go code into Terraform Plugin Protocol compatible operations and data types. Not currently implemented in the Terraform AWS Provider. Project . Terraform Plugin SDK : High-level library that converts Go code into Terraform Plugin Protocol compatible operations and data types. Project . Terraform Plugin SDK Schema : Declarative description of types and domain specific behaviors for a Terraform provider, including resources and attributes. Full Documentation . Terraform State : Bindings between objects in a remote system (e.g., an EC2 VPC) and a Terraform configuration (e.g., an aws_vpc resource configuration). Full Documentation . AWS Service API Models use specific terminology to describe data and types: Enumeration : Collection of valid values for a Shape. Operation : An API call. Includes information about input, output, and error Shapes. Shape : Type description. boolean : Boolean value. float : Fractional numeric value. May contain value validation such as maximum or minimum. integer : Whole numeric value. May contain value validation such as maximum or minimum. list : Collection that contains member Shapes. May contain value validation such as maximum or minimum keys. map : Grouping of key Shape to value Shape. May contain value validation such as maximum or minimum keys. string : Sequence of characters. May contain value validation such as an enumeration, regular expression pattern, maximum length, or minimum length. structure : Object that contains member Shapes. May represent an error. timestamp : Date and time value. The Terraform Language uses the following terminology to describe data and types: Attribute (\"Argument\"): Assigns a name to a data value. Block (\"Configuration Block\"): Container type for Attributes or Blocks. null : Virtual value equivalent to the Attribute not being set. Types : Full Documentation . any : Virtual type representing any concrete type in type declarations. bool : Boolean value. list (\"tuple\"): Ordered collection of values. map (\"object\"): Grouping of string keys to values. number : Numeric value. Can be either whole or fractional numbers. set : Unordered collection of values. string : Sequence of characters. Terraform Plugin SDK Schemas use the following terminology to describe data and types: Behaviors : Full Documentation . Sensitive : Whether the value should be hidden from user interface output. StateFunc : Conversion function between the value set by the Terraform Plugin and the value seen by Terraform Plugin SDK (and ultimately the Terraform State). Element : Underylying value type for a collection or grouping Schema. Resource Data : Data representation of a Resource Schema. Translation layer between the Schema and Go code of a Terraform Plugin. In the Terraform Plugin SDK, the ResourceData Go type. Resource Schema : Grouping of Schema that represents a Terraform Resource. Schema : Represents an Attribute or Block. Has a Type and Behavior(s). Types : Full Documentation . TypeBool : Boolean value. TypeFloat : Fractional numeric value. TypeInt : Whole numeric value. TypeList : Ordered collection of values or Blocks. TypeMap : Grouping of key Type to value Type. TypeSet : Unordered collection of values or Blocks. TypeString : Sequence of characters value. Some other terms that may be used: Block Attribute (\"Child Attribute\", \"Nested Attribute\"): Block level Attribute. Expand Function : Function that converts Terraform Plugin SDK data into the equivalent AWS Go SDK type. Flatten Function : Function that converts an AWS Go SDK type into the equivalent Terraform Plugin SDK data. NullableTypeBool : Workaround \"schema type\" created to accept a boolean value that is not configured in addition to true and false. Not implemented in the Terraform Plugin SDK, but uses TypeString (where \"\" represents not configured) and additional validation. NullableTypeFloat : Workaround \"schema type\" created to accept a fractional numeric value that is not configured in addition to 0.0 . Not implemented in the Terraform Plugin SDK, but uses TypeString (where \"\" represents not configured) and additional validation. NullableTypeInt : Workaround \"schema type\" created to accept a whole numeric value that is not configured in addition to 0 . Not implemented in the Terraform Plugin SDK, but uses TypeString (where \"\" represents not configured) and additional validation. Root Attribute : Resource top level Attribute or Block. For additional reference, the Terraform documentation also includes a full glossary of terminology .","title":"Glossary"},{"location":"contributing/development-environment/","text":"Development Environment Setup # Requirements # Terraform 0.12.26+ (to run acceptance tests) Go 1.17+ (to build the provider plugin) Quick Start # If you wish to work on the provider, you'll first need Go installed on your machine (please check the requirements before proceeding). Note: This project uses Go Modules making it safe to work with it outside of your existing GOPATH . The instructions that follow assume a directory in your home directory outside of the standard GOPATH (i.e $HOME/development/hashicorp/ ). Clone repository to: $HOME/development/hashicorp/ $ mkdir -p $HOME /development/hashicorp/ ; cd $HOME /development/hashicorp/ $ git clone git@github.com:hashicorp/terraform-provider-aws ... Enter the provider directory and run make tools . This will install the needed tools for the provider. $ make tools To compile the provider, run make build . This will build the provider and put the provider binary in the $GOPATH/bin directory. $ make build ... $ $GOPATH /bin/terraform-provider-aws ... Testing the Provider # In order to test the provider, you can run make test . Note: Make sure no AWS_ACCESS_KEY_ID or AWS_SECRET_ACCESS_KEY variables are set, and there's no [default] section in the AWS credentials file ~/.aws/credentials . $ make test In order to run the full suite of Acceptance tests, run make testacc . Note: Acceptance tests create real resources, and often cost money to run. Please read Running and Writing Acceptance Tests in the contribution guidelines for more information on usage. $ make testacc Using the Provider # With Terraform v0.14 and later, development overrides for provider developers can be leveraged in order to use the provider built from source. To do this, populate a Terraform CLI configuration file ( ~/.terraformrc for all platforms other than Windows; terraform.rc in the %APPDATA% directory when using Windows) with at least the following options: provider_installation { dev_overrides { \"hashicorp/aws\" = \"[REPLACE WITH GOPATH]/bin\" } direct {} }","title":"Development Environment Setup"},{"location":"contributing/development-environment/#development-environment-setup","text":"","title":"Development Environment Setup"},{"location":"contributing/development-environment/#requirements","text":"Terraform 0.12.26+ (to run acceptance tests) Go 1.17+ (to build the provider plugin)","title":"Requirements"},{"location":"contributing/development-environment/#quick-start","text":"If you wish to work on the provider, you'll first need Go installed on your machine (please check the requirements before proceeding). Note: This project uses Go Modules making it safe to work with it outside of your existing GOPATH . The instructions that follow assume a directory in your home directory outside of the standard GOPATH (i.e $HOME/development/hashicorp/ ). Clone repository to: $HOME/development/hashicorp/ $ mkdir -p $HOME /development/hashicorp/ ; cd $HOME /development/hashicorp/ $ git clone git@github.com:hashicorp/terraform-provider-aws ... Enter the provider directory and run make tools . This will install the needed tools for the provider. $ make tools To compile the provider, run make build . This will build the provider and put the provider binary in the $GOPATH/bin directory. $ make build ... $ $GOPATH /bin/terraform-provider-aws ...","title":"Quick Start"},{"location":"contributing/development-environment/#testing-the-provider","text":"In order to test the provider, you can run make test . Note: Make sure no AWS_ACCESS_KEY_ID or AWS_SECRET_ACCESS_KEY variables are set, and there's no [default] section in the AWS credentials file ~/.aws/credentials . $ make test In order to run the full suite of Acceptance tests, run make testacc . Note: Acceptance tests create real resources, and often cost money to run. Please read Running and Writing Acceptance Tests in the contribution guidelines for more information on usage. $ make testacc","title":"Testing the Provider"},{"location":"contributing/development-environment/#using-the-provider","text":"With Terraform v0.14 and later, development overrides for provider developers can be leveraged in order to use the provider built from source. To do this, populate a Terraform CLI configuration file ( ~/.terraformrc for all platforms other than Windows; terraform.rc in the %APPDATA% directory when using Windows) with at least the following options: provider_installation { dev_overrides { \"hashicorp/aws\" = \"[REPLACE WITH GOPATH]/bin\" } direct {} }","title":"Using the Provider"},{"location":"contributing/error-handling/","text":"Error Handling # Please Note: This documentation is intended for Terraform AWS Provider code developers. Typical operators writing and applying Terraform configurations do not need to read or understand this material. The Terraform AWS Provider codebase bridges the implementation of a Terraform Plugin and an AWS API client to support AWS operations and data types as Terraform Resources. An important aspect of performing resource and remote actions is properly handling those operations, but those operations are not guaranteed to succeed every time. Some common examples include where network connections are unreliable, necessary permissions are not properly setup, incorrect Terraform configurations, or the remote system responds unexpectedly. All these situations lead to an unexpected workflow action that must be surfaced to the Terraform user interface for operators to troubleshoot. This guide is intended to explain and show various Terraform AWS Provider code implementations that are considered best practice for surfacing these issues properly to operators and code maintainers. For further details about how the AWS SDK for Go v1 and the Terraform AWS Provider resource logic handle retryable errors, see the Retries and Waiters documentation . General Guidelines and Helpers Naming and Check Style Wrap Errors AWS SDK for Go v1 Errors AWS SDK for Go v1 Error Helpers Use AWS SDK for Go v1 Error Code Constants Terraform Plugin SDK Types and Helpers Resource Lifecycle Guidelines Resource Creation d.IsNewResource() Checks Creation Error Message Context Resource Deletion Resource Already Deleted Deletion Error Message Context Resource Read Singular Data Source Errors Plural Data Source Errors Read Error Message Context Resource Update Update Error Message Context General Guidelines and Helpers # Naming and Check Style # Following typical Go conventions, error variables in the Terraform AWS Provider codebase should be named err , e.g. result , err := strconv . Itoa ( \"oh no!\" ) The code that then checks these errors should prefer if conditionals that usually return (or in the case of looping constructs, break / continue ) early, especially in the case of multiple error checks, e.g. if /* ... something checking err first ... */ { // ... return, break, continue, etc. ... } if err != nil { // ... return, break, continue, etc. ... } // all good! This is in preference of some other styles of error checking, such as switch conditionals without a condition. Wrap Errors # Go implements error wrapping, which means that a deeply nested function call can return a particular error type, while each function up the stack can provide additional error message context without losing the ability to determine the original error. Additional information about this concept can be found on the Go blog entry titled Working with Errors in Go 1.13 . For most use cases in this codebase, this means if code is receiving an error and needs to return it, it should implement fmt.Errorf() and the %w verb, e.g. return fmt . Errorf ( \"adding some additional message: %w\" , err ) This type of error wrapping should be applied to all Terraform resource logic. It should also be applied to any nested functions that contains two or more error conditions (e.g., a function that calls an update API and waits for the update to finish) so practitioners and code maintainers have a clear idea which generated the error. When returning errors in those situations, it is important to only include necessary additional context. Resource logic will typically include the information such as the type of operation and resource identifier (e.g., error updating Service Thing (%s): %w ), so these messages can be more terse such as error waiting for completion: %w . AWS SDK for Go v1 Errors # The AWS SDK for Go v1 documentation includes a section on handling errors , which is recommended reading. For the purposes of this documentation, the most important concepts with handling these errors are: Each response error (which eventually implements awserr.Error ) has a string error code ( Code ) and string error message ( Message ). When printed as a string, they format as: Code: Message , e.g., InvalidParameterValueException: IAM Role arn:aws:iam::123456789012:role/XXX cannot be assumed by AWS Backup . Error handling is almost exclusively done via those string fields and not other response information, such as HTTP Status Codes. When the error code is non-specific, the error message should also be checked. Unfortunately, AWS APIs generally do not provide documentation or API modeling with the contents of these messages and often the Terraform AWS Provider code must rely on substring matching. Not all errors are returned in the response error from an AWS API operation. This is service- and sometimes API-call-specific. For example, the EC2 DeleteVpcEndpoints API call can return a \"successful\" response (in terms of no response error) but include information in an Unsuccessful field in the response body. When working with AWS SDK for Go v1 errors, it is preferred to use the helpers outlined below and use the %w format verb. Code should generally avoid type assertions with the underlying awserr.Error type or calling its Code() , Error() , Message() , or String() receiver methods. Using the %v , %#v , or %+v format verbs generally provides extraneous information that is not helpful to operators or code maintainers. AWS SDK for Go Error Helpers # To simplify operations with AWS SDK for Go error types, the following helpers are available via the github.com/hashicorp/aws-sdk-go-base/v2/awsv1shim/v2/tfawserr Go package: tfawserr.ErrCodeEquals(err, \"Code\") : Preferred when the error code is specific enough for the check condition. For example, a ResourceNotFoundError code provides enough information that the requested API resource identifier/Amazon Resource Name does not exist. tfawserr.ErrMessageContains(err, \"Code\", \"MessageContains\") : Does simple substring matching for the error message. The recommendation for error message checking is to be just specific enough to capture the anticipated issue, but not include too much matching as the AWS API can change over time without notice. The maintainers have observed changes in wording and capitalization cause unexpected issues in the past. For example, given this error code and message: InvalidParameterValueException: IAM Role arn:aws:iam::123456789012:role/XXX cannot be assumed by AWS Backup An error check for this might be: if tfawserr . ErrMessageContains ( err , backup . ErrCodeInvalidParameterValueException , \"cannot be assumed\" ) { /* ... */ } The Amazon Resource Name in the error message will be different for every environment and does not add value to the check. The AWS Backup suffix is also extraneous and could change should the service ever rename. Use AWS SDK for Go v1 Error Code Constants # Each AWS SDK for Go v1 service API typically implements common error codes, which get exported as public constants in the SDK. In the AWS SDK for Go v1 API Reference , these can be found in each of the service packages under the Constants section (typically named ErrCode{ExceptionName} ). If an AWS SDK for Go service API is missing an error code constant, an AWS Support case should be submitted and a new constant can be added to internal/service/{SERVICE}/errors.go file (created if not present), e.g. const ( ErrCodeInvalidParameterException = \"InvalidParameterException\" ) Then referencing code can use it via: // imports tf { SERVICE } \"github.com/hashicorp/terraform-provider-aws/internal/service/{SERVICE}\" // logic tfawserr . ErrCodeEquals ( err , tf { SERVICE }. ErrCodeInvalidParameterException ) e.g. // imports tfec2 \"github.com/hashicorp/terraform-provider-aws/internal/service/ec2\" // logic tfawserr . ErrCodeEquals ( err , tfec2 . ErrCodeInvalidParameterException ) Terraform Plugin SDK Types and Helpers # The Terraform Plugin SDK includes some error types which are used in certain operations and typically preferred over implementing new types: resource.NotFoundError resource.TimeoutError : Returned from resource.Retry() , resource.RetryContext() , (resource.StateChangeConf).WaitForState() , and (resource.StateChangeConf).WaitForStateContext() The Terraform AWS Provider codebase implements some additional helpers for working with these in the github.com/hashicorp/terraform-provider-aws/internal/tfresource package: tfresource.NotFound(err) : Returns true if the error is a resource.NotFoundError . tfresource.TimedOut(err) : Returns true if the error is a resource.TimeoutError and contains no LastError . This typically signifies that the retry logic was never signaled for a retry, which can happen when AWS API operations are automatically retrying before returning. Resource Lifecycle Guidelines # Terraform CLI and the Terraform Plugin SDK have certain expectations and automatic behaviors depending on the lifecycle operation of a resource. This section highlights some common issues that can occur and their expected resolution. Resource Creation # Invoked in the resource via the schema.Resource type Create / CreateContext function. d.IsNewResource() Checks # During resource creation, Terraform CLI expects either a properly applied state for the new resource or an error. To signal proper resource existence, the Terraform Plugin SDK uses an underlying resource identifier (set via d.SetId(/* some value */) ). If for some reason the resource creation is returned without an error, but also without the resource identifier being set, Terraform CLI will return an error such as: Error: Provider produced inconsistent result after apply When applying changes to aws_sns_topic_subscription.sqs, provider \"registry.terraform.io/hashicorp/aws\" produced an unexpected new value: Root resource was present, but now absent. This is a bug in the provider, which should be reported in the provider's own issue tracker. A typical pattern in resource implementations in the Create / CreateContext function is to return the Read / ReadContext function at the end to fill in the Terraform State for all attributes. Another typical pattern in resource implementations in the Read / ReadContext function is to remove the resource from the Terraform State if the remote system returns an error or status that indicates the remote resource no longer exists by explicitly calling d.SetId(\"\") and returning no error. If the remote system is not strongly read-after-write consistent (eventually consistent), this means the resource creation can return no error and also return no resource state. To prevent this type of Terraform CLI error, the resource implementation should also check against d.IsNewResource() before removing from the Terraform State and returning no error. If that check is true , then remote operation error (or one synthesized from the non-existent status) should be returned instead. While adding this check will not fix the resource implementation to handle the eventually consistent nature of the remote system, the error being returned will be less opaque for operators and code maintainers to troubleshoot. In the Terraform AWS Provider, an initial fix for the Terraform CLI error will typically look like: func resourceServiceThingCreate ( d * schema . ResourceData , meta interface {}) error { /* ... */ return resourceServiceThingRead ( d , meta ) } func resourceServiceThingRead ( d * schema . ResourceData , meta interface {}) error { /* ... */ output , err := conn . DescribeServiceThing ( input ) if ! d . IsNewResource () && tfawserr . ErrCodeEquals ( err , \"ResourceNotFoundException\" ) { log . Printf ( \"[WARN] {Service} {Thing} (%s) not found, removing from state\" , d . Id ()) d . SetId ( \"\" ) return nil } if err != nil { return fmt . Errorf ( \"error reading {Service} {Thing} (%s): %w\" , d . Id (), err ) } /* ... */ } If the remote system is not strongly read-after-write consistent, see the Retries and Waiters documentation on Resource Lifecycle Retries for how to prevent consistency-type errors. Creation Error Message Context # Returning errors during creation should include additional messaging about the location or cause of the error for operators and code maintainers by wrapping with fmt.Errorf() : if err != nil { return fmt . Errorf ( \"error creating {SERVICE} {THING}: %w\" , err ) } e.g. if err != nil { return fmt . Errorf ( \"error creating EC2 VPC: %w\" , err ) } Code that also uses waiters or other operations that return errors should follow a similar pattern, including the resource identifier since it has typically been set before this execution: if _ , err := VpcAvailable ( conn , d . Id ()); err != nil { return fmt . Errorf ( \"error waiting for EC2 VPC (%s) availability: %w\" , d . Id (), err ) } Resource Deletion # Invoked in the resource via the schema.Resource type Delete / DeleteContext function. Resource Already Deleted # A typical pattern for resource deletion is to immediately perform the remote system deletion operation without checking existence. This is generally acceptable as operators are encouraged to always refresh their Terraform State prior to performing changes. However in certain scenarios, such as external systems modifying the remote system prior to the Terraform execution, it is certainly still possible that the remote system will return an error signifying that remote resource does not exist. In these cases, resources should implement logic that catches the error and returns no error. NOTE: The Terraform Plugin SDK automatically handles the equivalent of d.SetId(\"\") on deletion, so it is not necessary to include it. For example in the Terraform AWS Provider: func resourceServiceThingDelete ( d * schema . ResourceData , meta interface {}) error { /* ... */ output , err := conn . DeleteServiceThing ( input ) if tfawserr . ErrCodeEquals ( err , \"ResourceNotFoundException\" ) { return nil } if err != nil { return fmt . Errorf ( \"error deleting {Service} {Thing} (%s): %w\" , d . Id (), err ) } /* ... */ } Deletion Error Message Context # Returning errors during deletion should include the resource identifier and additional messaging about the location or cause of the error for operators and code maintainers by wrapping with fmt.Errorf() : if err != nil { return fmt . Errorf ( \"error deleting {SERVICE} {THING} (%s): %w\" , d . Id (), err ) } e.g. if err != nil { return fmt . Errorf ( \"error deleting EC2 VPC (%s): %w\" , d . Id (), err ) } Code that also uses waiters or other operations that return errors should follow a similar pattern: if _ , err := VpcDeleted ( conn , d . Id ()); err != nil { return fmt . Errorf ( \"error waiting for EC2 VPC (%s) deletion: %w\" , d . Id (), err ) } Resource Read # Invoked in the resource via the schema.Resource type Read / ReadContext function. Singular Data Source Errors # A data source which is expected to return Terraform State about a single remote resource is commonly referred to as a \"singular\" data source. Implementation-wise, it may use any available describe or listing functionality from the remote system to retrieve the information. In addition to any remote operation and other data handling errors that should be returned, these two additional cases should be covered: Returning an error when zero results are found. Returning an error when multiple results are found. For remote operations that are designed to return an error when the remote resource is not found, this error is typically just passed through similar to other remote operation errors. For remote operations that are designed to return a successful result whether there is zero, one, or multiple multiple results the error must be generated. For example in pseudo-code: output , err := conn . ListServiceThings ( input ) if err != nil { return fmt . Errorf ( \"error listing {Service} {Thing}s: %w\" , err ) } if output == nil || len ( output . Results ) == 0 { return fmt . Errorf ( \"no {Service} {Thing} found matching criteria; try different search\" ) } if len ( output . Results ) > 1 { return fmt . Errorf ( \"multiple {Service} {Thing} found matching criteria; try different search\" ) } Plural Data Source Errors # An emergent concept is a data source that returns multiple results, acting similar to any available listing functionality available from the remote system. These types of data sources should return no error if zero results are returned and no error if multiple results are found. Remote operation and other data handling errors should still be returned. Read Error Message Context # Returning errors during read should include the resource identifier (for managed resources) and additional messaging about the location or cause of the error for operators and code maintainers by wrapping with fmt.Errorf() : if err != nil { return fmt . Errorf ( \"error reading {SERVICE} {THING} (%s): %w\" , d . Id (), err ) } e.g. if err != nil { return fmt . Errorf ( \"error reading EC2 VPC (%s): %w\" , d . Id (), err ) } Resource Update # Invoked in the resource via the schema.Resource type Update / UpdateContext function. Update Error Message Context # Returning errors during update should include the resource identifier and additional messaging about the location or cause of the error for operators and code maintainers by wrapping with fmt.Errorf() : if err != nil { return fmt . Errorf ( \"error updating {SERVICE} {THING} (%s): %w\" , d . Id (), err ) } e.g. if err != nil { return fmt . Errorf ( \"error updating EC2 VPC (%s): %w\" , d . Id (), err ) } Code that also uses waiters or other operations that return errors should follow a similar pattern: if _ , err := VpcAvailable ( conn , d . Id ()); err != nil { return fmt . Errorf ( \"error waiting for EC2 VPC (%s) update: %w\" , d . Id (), err ) }","title":"Error Handling"},{"location":"contributing/error-handling/#error-handling","text":"Please Note: This documentation is intended for Terraform AWS Provider code developers. Typical operators writing and applying Terraform configurations do not need to read or understand this material. The Terraform AWS Provider codebase bridges the implementation of a Terraform Plugin and an AWS API client to support AWS operations and data types as Terraform Resources. An important aspect of performing resource and remote actions is properly handling those operations, but those operations are not guaranteed to succeed every time. Some common examples include where network connections are unreliable, necessary permissions are not properly setup, incorrect Terraform configurations, or the remote system responds unexpectedly. All these situations lead to an unexpected workflow action that must be surfaced to the Terraform user interface for operators to troubleshoot. This guide is intended to explain and show various Terraform AWS Provider code implementations that are considered best practice for surfacing these issues properly to operators and code maintainers. For further details about how the AWS SDK for Go v1 and the Terraform AWS Provider resource logic handle retryable errors, see the Retries and Waiters documentation . General Guidelines and Helpers Naming and Check Style Wrap Errors AWS SDK for Go v1 Errors AWS SDK for Go v1 Error Helpers Use AWS SDK for Go v1 Error Code Constants Terraform Plugin SDK Types and Helpers Resource Lifecycle Guidelines Resource Creation d.IsNewResource() Checks Creation Error Message Context Resource Deletion Resource Already Deleted Deletion Error Message Context Resource Read Singular Data Source Errors Plural Data Source Errors Read Error Message Context Resource Update Update Error Message Context","title":"Error Handling"},{"location":"contributing/error-handling/#general-guidelines-and-helpers","text":"","title":"General Guidelines and Helpers"},{"location":"contributing/error-handling/#naming-and-check-style","text":"Following typical Go conventions, error variables in the Terraform AWS Provider codebase should be named err , e.g. result , err := strconv . Itoa ( \"oh no!\" ) The code that then checks these errors should prefer if conditionals that usually return (or in the case of looping constructs, break / continue ) early, especially in the case of multiple error checks, e.g. if /* ... something checking err first ... */ { // ... return, break, continue, etc. ... } if err != nil { // ... return, break, continue, etc. ... } // all good! This is in preference of some other styles of error checking, such as switch conditionals without a condition.","title":"Naming and Check Style"},{"location":"contributing/error-handling/#wrap-errors","text":"Go implements error wrapping, which means that a deeply nested function call can return a particular error type, while each function up the stack can provide additional error message context without losing the ability to determine the original error. Additional information about this concept can be found on the Go blog entry titled Working with Errors in Go 1.13 . For most use cases in this codebase, this means if code is receiving an error and needs to return it, it should implement fmt.Errorf() and the %w verb, e.g. return fmt . Errorf ( \"adding some additional message: %w\" , err ) This type of error wrapping should be applied to all Terraform resource logic. It should also be applied to any nested functions that contains two or more error conditions (e.g., a function that calls an update API and waits for the update to finish) so practitioners and code maintainers have a clear idea which generated the error. When returning errors in those situations, it is important to only include necessary additional context. Resource logic will typically include the information such as the type of operation and resource identifier (e.g., error updating Service Thing (%s): %w ), so these messages can be more terse such as error waiting for completion: %w .","title":"Wrap Errors"},{"location":"contributing/error-handling/#aws-sdk-for-go-v1-errors","text":"The AWS SDK for Go v1 documentation includes a section on handling errors , which is recommended reading. For the purposes of this documentation, the most important concepts with handling these errors are: Each response error (which eventually implements awserr.Error ) has a string error code ( Code ) and string error message ( Message ). When printed as a string, they format as: Code: Message , e.g., InvalidParameterValueException: IAM Role arn:aws:iam::123456789012:role/XXX cannot be assumed by AWS Backup . Error handling is almost exclusively done via those string fields and not other response information, such as HTTP Status Codes. When the error code is non-specific, the error message should also be checked. Unfortunately, AWS APIs generally do not provide documentation or API modeling with the contents of these messages and often the Terraform AWS Provider code must rely on substring matching. Not all errors are returned in the response error from an AWS API operation. This is service- and sometimes API-call-specific. For example, the EC2 DeleteVpcEndpoints API call can return a \"successful\" response (in terms of no response error) but include information in an Unsuccessful field in the response body. When working with AWS SDK for Go v1 errors, it is preferred to use the helpers outlined below and use the %w format verb. Code should generally avoid type assertions with the underlying awserr.Error type or calling its Code() , Error() , Message() , or String() receiver methods. Using the %v , %#v , or %+v format verbs generally provides extraneous information that is not helpful to operators or code maintainers.","title":"AWS SDK for Go v1 Errors"},{"location":"contributing/error-handling/#aws-sdk-for-go-error-helpers","text":"To simplify operations with AWS SDK for Go error types, the following helpers are available via the github.com/hashicorp/aws-sdk-go-base/v2/awsv1shim/v2/tfawserr Go package: tfawserr.ErrCodeEquals(err, \"Code\") : Preferred when the error code is specific enough for the check condition. For example, a ResourceNotFoundError code provides enough information that the requested API resource identifier/Amazon Resource Name does not exist. tfawserr.ErrMessageContains(err, \"Code\", \"MessageContains\") : Does simple substring matching for the error message. The recommendation for error message checking is to be just specific enough to capture the anticipated issue, but not include too much matching as the AWS API can change over time without notice. The maintainers have observed changes in wording and capitalization cause unexpected issues in the past. For example, given this error code and message: InvalidParameterValueException: IAM Role arn:aws:iam::123456789012:role/XXX cannot be assumed by AWS Backup An error check for this might be: if tfawserr . ErrMessageContains ( err , backup . ErrCodeInvalidParameterValueException , \"cannot be assumed\" ) { /* ... */ } The Amazon Resource Name in the error message will be different for every environment and does not add value to the check. The AWS Backup suffix is also extraneous and could change should the service ever rename.","title":"AWS SDK for Go Error Helpers"},{"location":"contributing/error-handling/#use-aws-sdk-for-go-v1-error-code-constants","text":"Each AWS SDK for Go v1 service API typically implements common error codes, which get exported as public constants in the SDK. In the AWS SDK for Go v1 API Reference , these can be found in each of the service packages under the Constants section (typically named ErrCode{ExceptionName} ). If an AWS SDK for Go service API is missing an error code constant, an AWS Support case should be submitted and a new constant can be added to internal/service/{SERVICE}/errors.go file (created if not present), e.g. const ( ErrCodeInvalidParameterException = \"InvalidParameterException\" ) Then referencing code can use it via: // imports tf { SERVICE } \"github.com/hashicorp/terraform-provider-aws/internal/service/{SERVICE}\" // logic tfawserr . ErrCodeEquals ( err , tf { SERVICE }. ErrCodeInvalidParameterException ) e.g. // imports tfec2 \"github.com/hashicorp/terraform-provider-aws/internal/service/ec2\" // logic tfawserr . ErrCodeEquals ( err , tfec2 . ErrCodeInvalidParameterException )","title":"Use AWS SDK for Go v1 Error Code Constants"},{"location":"contributing/error-handling/#terraform-plugin-sdk-types-and-helpers","text":"The Terraform Plugin SDK includes some error types which are used in certain operations and typically preferred over implementing new types: resource.NotFoundError resource.TimeoutError : Returned from resource.Retry() , resource.RetryContext() , (resource.StateChangeConf).WaitForState() , and (resource.StateChangeConf).WaitForStateContext() The Terraform AWS Provider codebase implements some additional helpers for working with these in the github.com/hashicorp/terraform-provider-aws/internal/tfresource package: tfresource.NotFound(err) : Returns true if the error is a resource.NotFoundError . tfresource.TimedOut(err) : Returns true if the error is a resource.TimeoutError and contains no LastError . This typically signifies that the retry logic was never signaled for a retry, which can happen when AWS API operations are automatically retrying before returning.","title":"Terraform Plugin SDK Types and Helpers"},{"location":"contributing/error-handling/#resource-lifecycle-guidelines","text":"Terraform CLI and the Terraform Plugin SDK have certain expectations and automatic behaviors depending on the lifecycle operation of a resource. This section highlights some common issues that can occur and their expected resolution.","title":"Resource Lifecycle Guidelines"},{"location":"contributing/error-handling/#resource-creation","text":"Invoked in the resource via the schema.Resource type Create / CreateContext function.","title":"Resource Creation"},{"location":"contributing/error-handling/#disnewresource-checks","text":"During resource creation, Terraform CLI expects either a properly applied state for the new resource or an error. To signal proper resource existence, the Terraform Plugin SDK uses an underlying resource identifier (set via d.SetId(/* some value */) ). If for some reason the resource creation is returned without an error, but also without the resource identifier being set, Terraform CLI will return an error such as: Error: Provider produced inconsistent result after apply When applying changes to aws_sns_topic_subscription.sqs, provider \"registry.terraform.io/hashicorp/aws\" produced an unexpected new value: Root resource was present, but now absent. This is a bug in the provider, which should be reported in the provider's own issue tracker. A typical pattern in resource implementations in the Create / CreateContext function is to return the Read / ReadContext function at the end to fill in the Terraform State for all attributes. Another typical pattern in resource implementations in the Read / ReadContext function is to remove the resource from the Terraform State if the remote system returns an error or status that indicates the remote resource no longer exists by explicitly calling d.SetId(\"\") and returning no error. If the remote system is not strongly read-after-write consistent (eventually consistent), this means the resource creation can return no error and also return no resource state. To prevent this type of Terraform CLI error, the resource implementation should also check against d.IsNewResource() before removing from the Terraform State and returning no error. If that check is true , then remote operation error (or one synthesized from the non-existent status) should be returned instead. While adding this check will not fix the resource implementation to handle the eventually consistent nature of the remote system, the error being returned will be less opaque for operators and code maintainers to troubleshoot. In the Terraform AWS Provider, an initial fix for the Terraform CLI error will typically look like: func resourceServiceThingCreate ( d * schema . ResourceData , meta interface {}) error { /* ... */ return resourceServiceThingRead ( d , meta ) } func resourceServiceThingRead ( d * schema . ResourceData , meta interface {}) error { /* ... */ output , err := conn . DescribeServiceThing ( input ) if ! d . IsNewResource () && tfawserr . ErrCodeEquals ( err , \"ResourceNotFoundException\" ) { log . Printf ( \"[WARN] {Service} {Thing} (%s) not found, removing from state\" , d . Id ()) d . SetId ( \"\" ) return nil } if err != nil { return fmt . Errorf ( \"error reading {Service} {Thing} (%s): %w\" , d . Id (), err ) } /* ... */ } If the remote system is not strongly read-after-write consistent, see the Retries and Waiters documentation on Resource Lifecycle Retries for how to prevent consistency-type errors.","title":"d.IsNewResource() Checks"},{"location":"contributing/error-handling/#creation-error-message-context","text":"Returning errors during creation should include additional messaging about the location or cause of the error for operators and code maintainers by wrapping with fmt.Errorf() : if err != nil { return fmt . Errorf ( \"error creating {SERVICE} {THING}: %w\" , err ) } e.g. if err != nil { return fmt . Errorf ( \"error creating EC2 VPC: %w\" , err ) } Code that also uses waiters or other operations that return errors should follow a similar pattern, including the resource identifier since it has typically been set before this execution: if _ , err := VpcAvailable ( conn , d . Id ()); err != nil { return fmt . Errorf ( \"error waiting for EC2 VPC (%s) availability: %w\" , d . Id (), err ) }","title":"Creation Error Message Context"},{"location":"contributing/error-handling/#resource-deletion","text":"Invoked in the resource via the schema.Resource type Delete / DeleteContext function.","title":"Resource Deletion"},{"location":"contributing/error-handling/#resource-already-deleted","text":"A typical pattern for resource deletion is to immediately perform the remote system deletion operation without checking existence. This is generally acceptable as operators are encouraged to always refresh their Terraform State prior to performing changes. However in certain scenarios, such as external systems modifying the remote system prior to the Terraform execution, it is certainly still possible that the remote system will return an error signifying that remote resource does not exist. In these cases, resources should implement logic that catches the error and returns no error. NOTE: The Terraform Plugin SDK automatically handles the equivalent of d.SetId(\"\") on deletion, so it is not necessary to include it. For example in the Terraform AWS Provider: func resourceServiceThingDelete ( d * schema . ResourceData , meta interface {}) error { /* ... */ output , err := conn . DeleteServiceThing ( input ) if tfawserr . ErrCodeEquals ( err , \"ResourceNotFoundException\" ) { return nil } if err != nil { return fmt . Errorf ( \"error deleting {Service} {Thing} (%s): %w\" , d . Id (), err ) } /* ... */ }","title":"Resource Already Deleted"},{"location":"contributing/error-handling/#deletion-error-message-context","text":"Returning errors during deletion should include the resource identifier and additional messaging about the location or cause of the error for operators and code maintainers by wrapping with fmt.Errorf() : if err != nil { return fmt . Errorf ( \"error deleting {SERVICE} {THING} (%s): %w\" , d . Id (), err ) } e.g. if err != nil { return fmt . Errorf ( \"error deleting EC2 VPC (%s): %w\" , d . Id (), err ) } Code that also uses waiters or other operations that return errors should follow a similar pattern: if _ , err := VpcDeleted ( conn , d . Id ()); err != nil { return fmt . Errorf ( \"error waiting for EC2 VPC (%s) deletion: %w\" , d . Id (), err ) }","title":"Deletion Error Message Context"},{"location":"contributing/error-handling/#resource-read","text":"Invoked in the resource via the schema.Resource type Read / ReadContext function.","title":"Resource Read"},{"location":"contributing/error-handling/#singular-data-source-errors","text":"A data source which is expected to return Terraform State about a single remote resource is commonly referred to as a \"singular\" data source. Implementation-wise, it may use any available describe or listing functionality from the remote system to retrieve the information. In addition to any remote operation and other data handling errors that should be returned, these two additional cases should be covered: Returning an error when zero results are found. Returning an error when multiple results are found. For remote operations that are designed to return an error when the remote resource is not found, this error is typically just passed through similar to other remote operation errors. For remote operations that are designed to return a successful result whether there is zero, one, or multiple multiple results the error must be generated. For example in pseudo-code: output , err := conn . ListServiceThings ( input ) if err != nil { return fmt . Errorf ( \"error listing {Service} {Thing}s: %w\" , err ) } if output == nil || len ( output . Results ) == 0 { return fmt . Errorf ( \"no {Service} {Thing} found matching criteria; try different search\" ) } if len ( output . Results ) > 1 { return fmt . Errorf ( \"multiple {Service} {Thing} found matching criteria; try different search\" ) }","title":"Singular Data Source Errors"},{"location":"contributing/error-handling/#plural-data-source-errors","text":"An emergent concept is a data source that returns multiple results, acting similar to any available listing functionality available from the remote system. These types of data sources should return no error if zero results are returned and no error if multiple results are found. Remote operation and other data handling errors should still be returned.","title":"Plural Data Source Errors"},{"location":"contributing/error-handling/#read-error-message-context","text":"Returning errors during read should include the resource identifier (for managed resources) and additional messaging about the location or cause of the error for operators and code maintainers by wrapping with fmt.Errorf() : if err != nil { return fmt . Errorf ( \"error reading {SERVICE} {THING} (%s): %w\" , d . Id (), err ) } e.g. if err != nil { return fmt . Errorf ( \"error reading EC2 VPC (%s): %w\" , d . Id (), err ) }","title":"Read Error Message Context"},{"location":"contributing/error-handling/#resource-update","text":"Invoked in the resource via the schema.Resource type Update / UpdateContext function.","title":"Resource Update"},{"location":"contributing/error-handling/#update-error-message-context","text":"Returning errors during update should include the resource identifier and additional messaging about the location or cause of the error for operators and code maintainers by wrapping with fmt.Errorf() : if err != nil { return fmt . Errorf ( \"error updating {SERVICE} {THING} (%s): %w\" , d . Id (), err ) } e.g. if err != nil { return fmt . Errorf ( \"error updating EC2 VPC (%s): %w\" , d . Id (), err ) } Code that also uses waiters or other operations that return errors should follow a similar pattern: if _ , err := VpcAvailable ( conn , d . Id ()); err != nil { return fmt . Errorf ( \"error waiting for EC2 VPC (%s) update: %w\" , d . Id (), err ) }","title":"Update Error Message Context"},{"location":"contributing/faq/","text":"Frequently Asked Questions # Who are the maintainers? # The HashiCorp Terraform AWS provider team is : Mary Cutrali, Product Manager - GitHub @maryelizbeth Twitter @marycutrali Simon Davis, Engineering Manager - GitHub @breathingdust Justin Retzolk, Technical Community Manager - GitHub @justinretzolk Angie Pinilla, Engineer - GitHub @angie44 Dirk Avery, Engineer - GitHub @YakDriver Graham Davison, Engineer - GitHub @gdavison Kerim Satirli, Developer Advocate - GitHub @ksatirli Kit Ewbank, Engineer - GitHub @ewbankkit Zoe Helding, Engineer - GitHub @zhelding Adrian Johnson, Engineer - GitHub @johnsonaj Why isn\u2019t my PR merged yet? # Unfortunately, due to the volume of issues and new pull requests we receive, we are unable to give each one the full attention that we would like. We always focus on the contributions that provide the greatest value to the most community members. For more information on how we prioritize pull requests, see the prioritization guide . How do you decide what gets merged for each release? # We have a large backlog of pull requests to get through and the team are moving through them as quick as we can. All pull requests must be reviewed by a HashiCorp engineer before inclusion. This is to ensure that the design of the addition fits with what provider users have come to expect, and to ensure that testing and best practices are adhered to. This is particularly important for such a large codebase, to ensure that we sustain its maintainability as its grows. The number one factor we look at when deciding what issues to look at are your \ud83d\udc4d reactions to the original issue/PR description as these can be easily discovered . Comments that further explain desired use cases or poor user experience are also heavily factored. The items with the most support are always on our radar, and we commit to keep the community updated on their status and potential timelines. We publish a roadmap every quarter which describes major themes or specific product areas of focus. What is excluded from the public roadmap is work performed under NDA with AWS on new services, and any ad-hoc work we pick up during the quarter. This ad-hoc work can be responding to bugs, gardening day activity, customer prioritization, and technical debt items. We also are investing time to improve the contributing experience by improving documentation, adding more linter coverage to ensure that incoming PR's can be in as good shape as possible. This will allow us to get through them quicker. My PR hasn't been merged and it now has merge conflicts/failed checks, should I keep it up to date? # We realize that sometimes pull requests sit for a considerable amount of time without being addressed. During this time period they may accumulate merge conflicts and failed linter checks as the provider codebase moves forward. As maintainers we have no expectation that you keep your PR up to date, these issues will be addressed at review time most often by the maintainers themselves. Obviously we would hope that your PR is mergeable when first raised! The mergeability of the PR does not affect its prioritization for review. How often do you release? # We release weekly on Thursday. We release often to ensure we can bring value to the community at a frequent cadence and to ensure we are in a good place to react to AWS region launches and service announcements. Backward Compatibility Promise # Our policy is described on the Terraform website here . While we do our best to prevent breaking changes until major version releases of the provider, it is generally recommended to pin the provider version in your configuration . Due to the constant release pace of AWS and the relatively infrequent major version releases of the provider, there can be cases where a minor version update may contain unexpected changes depending on your configuration or environment. These may include items such as a resource requiring additional IAM permissions to support newer functionality. We typically base these decisions on a pragmatic compromise between introducing a relatively minor one-time inconvenience for a subset of the community versus better overall user experience for the entire community. Once a major release is published, will new features and fixes be backported to previous versions? # Generally new features and fixes will only be added to the most recent major version. Due to the high touch nature of provider development and the extensive regression testing required to ensure stability, maintaining multiple versions of the provider is not sustainable at this time. An exception to this could be a discovered security vulnerability for which backporting may be the most reasonable course of action. These would be reviewed on a case by case basis. AWS just announced a new region, when will I see it in the provider. # Normally pretty quickly. We usually see the region appear within the aws-go-sdk within a couple days of the announcement. Depending on when it lands, we can often get it out within the current or following weekly release. Comparatively, adding support for a new region in the S3 backend can take a little longer, as it is shipped as part of Terraform Core and not via the AWS Provider. Please note that this new region requires a manual process to enable in your account. Once enabled in the console, it takes a few minutes for everything to work properly. If the region is not enabled properly, or the enablement process is still in progress, you may receive errors like these: $ terraform apply Error: error validating provider credentials: error calling sts:GetCallerIdentity: InvalidClientTokenId: The security token included in the request is invalid. status code: 403, request id: 142f947b-b2c3-11e9-9959-c11ab17bcc63 on main.tf line 1, in provider \"aws\": 1: provider \"aws\" { To use this new region before support has been added to the Terraform AWS Provider, you can disable the provider's automatic region validation via: provider \"aws\" { # ... potentially other configuration ... region = \"af-south-1\" skip_region_validation = true } How can I help? # Great question, if you have contributed before check out issues with the help-wanted label. These are normally enhancement issues that will have a great impact, but the maintainers are unable to develop them in the near future. If you are just getting started, take a look at issues with the good-first-issue label. Items with these labels will always be given priority for response. Check out the Contributing Guide for additional information. How can I become a maintainer? # This is an area under active research. Stay tuned!","title":"Frequently Asked Questions"},{"location":"contributing/faq/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"contributing/faq/#who-are-the-maintainers","text":"The HashiCorp Terraform AWS provider team is : Mary Cutrali, Product Manager - GitHub @maryelizbeth Twitter @marycutrali Simon Davis, Engineering Manager - GitHub @breathingdust Justin Retzolk, Technical Community Manager - GitHub @justinretzolk Angie Pinilla, Engineer - GitHub @angie44 Dirk Avery, Engineer - GitHub @YakDriver Graham Davison, Engineer - GitHub @gdavison Kerim Satirli, Developer Advocate - GitHub @ksatirli Kit Ewbank, Engineer - GitHub @ewbankkit Zoe Helding, Engineer - GitHub @zhelding Adrian Johnson, Engineer - GitHub @johnsonaj","title":"Who are the maintainers?"},{"location":"contributing/faq/#why-isnt-my-pr-merged-yet","text":"Unfortunately, due to the volume of issues and new pull requests we receive, we are unable to give each one the full attention that we would like. We always focus on the contributions that provide the greatest value to the most community members. For more information on how we prioritize pull requests, see the prioritization guide .","title":"Why isn\u2019t my PR merged yet?"},{"location":"contributing/faq/#how-do-you-decide-what-gets-merged-for-each-release","text":"We have a large backlog of pull requests to get through and the team are moving through them as quick as we can. All pull requests must be reviewed by a HashiCorp engineer before inclusion. This is to ensure that the design of the addition fits with what provider users have come to expect, and to ensure that testing and best practices are adhered to. This is particularly important for such a large codebase, to ensure that we sustain its maintainability as its grows. The number one factor we look at when deciding what issues to look at are your \ud83d\udc4d reactions to the original issue/PR description as these can be easily discovered . Comments that further explain desired use cases or poor user experience are also heavily factored. The items with the most support are always on our radar, and we commit to keep the community updated on their status and potential timelines. We publish a roadmap every quarter which describes major themes or specific product areas of focus. What is excluded from the public roadmap is work performed under NDA with AWS on new services, and any ad-hoc work we pick up during the quarter. This ad-hoc work can be responding to bugs, gardening day activity, customer prioritization, and technical debt items. We also are investing time to improve the contributing experience by improving documentation, adding more linter coverage to ensure that incoming PR's can be in as good shape as possible. This will allow us to get through them quicker.","title":"How do you decide what gets merged for each release?"},{"location":"contributing/faq/#my-pr-hasnt-been-merged-and-it-now-has-merge-conflictsfailed-checks-should-i-keep-it-up-to-date","text":"We realize that sometimes pull requests sit for a considerable amount of time without being addressed. During this time period they may accumulate merge conflicts and failed linter checks as the provider codebase moves forward. As maintainers we have no expectation that you keep your PR up to date, these issues will be addressed at review time most often by the maintainers themselves. Obviously we would hope that your PR is mergeable when first raised! The mergeability of the PR does not affect its prioritization for review.","title":"My PR hasn't been merged and it now has merge conflicts/failed checks, should I keep it up to date?"},{"location":"contributing/faq/#how-often-do-you-release","text":"We release weekly on Thursday. We release often to ensure we can bring value to the community at a frequent cadence and to ensure we are in a good place to react to AWS region launches and service announcements.","title":"How often do you release?"},{"location":"contributing/faq/#backward-compatibility-promise","text":"Our policy is described on the Terraform website here . While we do our best to prevent breaking changes until major version releases of the provider, it is generally recommended to pin the provider version in your configuration . Due to the constant release pace of AWS and the relatively infrequent major version releases of the provider, there can be cases where a minor version update may contain unexpected changes depending on your configuration or environment. These may include items such as a resource requiring additional IAM permissions to support newer functionality. We typically base these decisions on a pragmatic compromise between introducing a relatively minor one-time inconvenience for a subset of the community versus better overall user experience for the entire community.","title":"Backward Compatibility Promise"},{"location":"contributing/faq/#once-a-major-release-is-published-will-new-features-and-fixes-be-backported-to-previous-versions","text":"Generally new features and fixes will only be added to the most recent major version. Due to the high touch nature of provider development and the extensive regression testing required to ensure stability, maintaining multiple versions of the provider is not sustainable at this time. An exception to this could be a discovered security vulnerability for which backporting may be the most reasonable course of action. These would be reviewed on a case by case basis.","title":"Once a major release is published, will new features and fixes be backported to previous versions?"},{"location":"contributing/faq/#aws-just-announced-a-new-region-when-will-i-see-it-in-the-provider","text":"Normally pretty quickly. We usually see the region appear within the aws-go-sdk within a couple days of the announcement. Depending on when it lands, we can often get it out within the current or following weekly release. Comparatively, adding support for a new region in the S3 backend can take a little longer, as it is shipped as part of Terraform Core and not via the AWS Provider. Please note that this new region requires a manual process to enable in your account. Once enabled in the console, it takes a few minutes for everything to work properly. If the region is not enabled properly, or the enablement process is still in progress, you may receive errors like these: $ terraform apply Error: error validating provider credentials: error calling sts:GetCallerIdentity: InvalidClientTokenId: The security token included in the request is invalid. status code: 403, request id: 142f947b-b2c3-11e9-9959-c11ab17bcc63 on main.tf line 1, in provider \"aws\": 1: provider \"aws\" { To use this new region before support has been added to the Terraform AWS Provider, you can disable the provider's automatic region validation via: provider \"aws\" { # ... potentially other configuration ... region = \"af-south-1\" skip_region_validation = true }","title":"AWS just announced a new region, when will I see it in the provider."},{"location":"contributing/faq/#how-can-i-help","text":"Great question, if you have contributed before check out issues with the help-wanted label. These are normally enhancement issues that will have a great impact, but the maintainers are unable to develop them in the near future. If you are just getting started, take a look at issues with the good-first-issue label. Items with these labels will always be given priority for response. Check out the Contributing Guide for additional information.","title":"How can I help?"},{"location":"contributing/faq/#how-can-i-become-a-maintainer","text":"This is an area under active research. Stay tuned!","title":"How can I become a maintainer?"},{"location":"contributing/issue-reporting-and-lifecycle/","text":"Issue Reporting and Lifecycle # Issue Reporting Checklists Bug Reports Feature Requests Questions Issue Lifecycle Issue Reporting Checklists # We welcome issues of all kinds including feature requests, bug reports, and general questions. Below you'll find checklists with guidelines for well-formed issues of each type. Bug Reports # [ ] Test against latest release : Make sure you test against the latest released version. It is possible we already fixed the bug you're experiencing. [ ] Search for possible duplicate reports : It's helpful to keep bug reports consolidated to one thread, so do a quick search on existing bug reports to check if anybody else has reported the same thing. You can scope searches by the label \"bug\" to help narrow things down. [ ] Include steps to reproduce : Provide steps to reproduce the issue, along with your .tf files, with secrets removed, so we can try to reproduce it. Without this, it makes it much harder to fix the issue. [ ] For panics, include crash.log : If you experienced a panic, please create a gist of the entire generated crash log for us to look at. Double check no sensitive items were in the log. Feature Requests # [ ] Search for possible duplicate requests : It's helpful to keep requests consolidated to one thread, so do a quick search on existing requests to check if anybody else has reported the same thing. You can scope searches by the label \"enhancement\" to help narrow things down. [ ] Include a use case description : In addition to describing the behavior of the feature you'd like to see added, it's helpful to also lay out the reason why the feature would be important and how it would benefit Terraform users. Questions # [ ] Search for answers in Terraform documentation : We're happy to answer questions in GitHub Issues, but it helps reduce issue churn and maintainer workload if you work to find answers to common questions in the documentation . Oftentimes Question issues result in documentation updates to help future users, so if you don't find an answer, you can give us pointers for where you'd expect to see it in the docs. Issue Lifecycle # Note: For detailed information on how issues are prioritized, see the prioritization guide . The issue is reported. The issue is verified and categorized by a Terraform collaborator. Categorization is done via GitHub labels. We generally use a two-label system of (1) issue/PR type, and (2) section of the codebase. Type is one of \"bug\", \"enhancement\", \"documentation\", or \"question\", and section is usually the AWS service name. An initial triage process determines whether the issue is critical and must be addressed immediately, or can be left open for community discussion. The issue is addressed in a pull request or commit. The issue number will be referenced in the commit message so that the code that fixes it is clearly linked. The issue is closed. Sometimes, valid issues will be closed because they are tracked elsewhere or non-actionable. The issue is still indexed and available for future viewers, or can be re-opened if necessary.","title":"Issue Reporting and Lifecycle"},{"location":"contributing/issue-reporting-and-lifecycle/#issue-reporting-and-lifecycle","text":"Issue Reporting Checklists Bug Reports Feature Requests Questions Issue Lifecycle","title":"Issue Reporting and Lifecycle"},{"location":"contributing/issue-reporting-and-lifecycle/#issue-reporting-checklists","text":"We welcome issues of all kinds including feature requests, bug reports, and general questions. Below you'll find checklists with guidelines for well-formed issues of each type.","title":"Issue Reporting Checklists"},{"location":"contributing/issue-reporting-and-lifecycle/#bug-reports","text":"[ ] Test against latest release : Make sure you test against the latest released version. It is possible we already fixed the bug you're experiencing. [ ] Search for possible duplicate reports : It's helpful to keep bug reports consolidated to one thread, so do a quick search on existing bug reports to check if anybody else has reported the same thing. You can scope searches by the label \"bug\" to help narrow things down. [ ] Include steps to reproduce : Provide steps to reproduce the issue, along with your .tf files, with secrets removed, so we can try to reproduce it. Without this, it makes it much harder to fix the issue. [ ] For panics, include crash.log : If you experienced a panic, please create a gist of the entire generated crash log for us to look at. Double check no sensitive items were in the log.","title":"Bug Reports"},{"location":"contributing/issue-reporting-and-lifecycle/#feature-requests","text":"[ ] Search for possible duplicate requests : It's helpful to keep requests consolidated to one thread, so do a quick search on existing requests to check if anybody else has reported the same thing. You can scope searches by the label \"enhancement\" to help narrow things down. [ ] Include a use case description : In addition to describing the behavior of the feature you'd like to see added, it's helpful to also lay out the reason why the feature would be important and how it would benefit Terraform users.","title":"Feature Requests"},{"location":"contributing/issue-reporting-and-lifecycle/#questions","text":"[ ] Search for answers in Terraform documentation : We're happy to answer questions in GitHub Issues, but it helps reduce issue churn and maintainer workload if you work to find answers to common questions in the documentation . Oftentimes Question issues result in documentation updates to help future users, so if you don't find an answer, you can give us pointers for where you'd expect to see it in the docs.","title":"Questions"},{"location":"contributing/issue-reporting-and-lifecycle/#issue-lifecycle","text":"Note: For detailed information on how issues are prioritized, see the prioritization guide . The issue is reported. The issue is verified and categorized by a Terraform collaborator. Categorization is done via GitHub labels. We generally use a two-label system of (1) issue/PR type, and (2) section of the codebase. Type is one of \"bug\", \"enhancement\", \"documentation\", or \"question\", and section is usually the AWS service name. An initial triage process determines whether the issue is critical and must be addressed immediately, or can be left open for community discussion. The issue is addressed in a pull request or commit. The issue number will be referenced in the commit message so that the code that fixes it is clearly linked. The issue is closed. Sometimes, valid issues will be closed because they are tracked elsewhere or non-actionable. The issue is still indexed and available for future viewers, or can be re-opened if necessary.","title":"Issue Lifecycle"},{"location":"contributing/maintaining/","text":"Maintaining the Terraform AWS Provider # Pull Requests Pull Request Review Process Dependency Updates Go Default Version Update AWS Go SDK Updates golangci-lint Updates Terraform Plugin SDK Updates tfproviderdocs Updates tfproviderlint Updates yaml.v2 Updates Pull Request Merge Process Breaking Changes Branch Dictionary Environment Variable Dictionary Label Dictionary Release Process Community Maintainers # Members of the community who participate in any aspects of maintaining the provider must adhere to the HashiCorp Community Guidelines . Triage # Incoming issues are classified using labels. These are assigned either by automation, or manually during the triage process. We follow a two-label system where we classify by type and by the area of the provider they affect. A full listing of the labels and how they are used can be found in the Label Dictionary . Pull Requests # Pull Request Review Process # Throughout the review process our first priority is to interact with contributors with kindness, empathy and in accordance with the Guidelines and Principles of Hashicorp. Our contributors are often working within the provider as a hobby, or not in their main line of work so we need to give adequate time for response. By default this is a week, but it is worth considering taking on the work to complete the PR ourselves if the administrative effort of waiting for a response is greater than just resolving the issues ourselves (Don't wait the week, or add a context shift for yourself and the contributor to fix a typo). As long as we use their commits, contributions will be recorded by Github and as always ensure to thank the contributor for their work. Roadmap items are another area where we would consider taking on the work ourselves more quickly in order to meet the commitments made to our users. Notes for each type of pull request are (or will be) available in subsections below. If you plan to be responsible for the pull request through the merge/closure process, assign it to yourself Add bug , enhancement , new-data-source , new-resource , or technical-debt labels to match expectations from change Perform a quick scan of open issues and ensure they are referenced in the pull request description (e.g., Closes #1234 , Relates #5678 ). Edit the description yourself and mention this to the author: This pull request appears to be related to/solve #1234 , so I have edited the pull request description to denote the issue reference. Review the contents of the pull request and ensure the change follows the relevant section of the Contributing Guide If the change is not acceptable, leave a long form comment about the reasoning and close the pull request If the change is acceptable with modifications, leave a pull request review marked using the Request Changes option (for maintainer pull requests with minor modification requests, giving feedback with the Approve option is recommended so they do not need to wait for another round of review) If the author is unresponsive for changes (by default we give two weeks), determine importance and level of effort to finish the pull request yourself including their commits or close the pull request Run relevant acceptance testing ( locally or in TeamCity) against AWS Commercial and AWS GovCloud (US) to ensure no new failures are being introduced Approve the pull request with a comment outlining what steps you took that ensure the change is acceptable, e.g., acceptance testing output Looks good, thanks @username ! :rocket: Output from acceptance testing in AWS Commercial: ``` --- PASS: TestAcc... --- PASS: TestAcc... ``` Output from acceptance testing in AWS GovCloud (US): ``` --- PASS: TestAcc... --- PASS: TestAcc... ``` Dependency Updates # Go Default Version Update # This project typically upgrades its Go version for development and testing shortly after release to get the latest and greatest Go functionality. Before beginning the update process, ensure that you review the new version release notes to look for any areas of possible friction when updating. Create an issue to cover the update noting down any areas of particular interest or friction. Ensure that the following steps are tracked within the issue and completed within the resulting pull request. Update go version in go.mod Verify make test lint works as expected Verify goreleaser build --snapshot succeeds for all currently supported architectures Verify goenv support for the new version Update development-environment.md Update .go-version Update CHANGELOG.md detailing the update and mention any notes practitioners need to be aware of. See #9992 / #10206 for a recent example. AWS Go SDK Updates # Almost exclusively, github.com/aws/aws-sdk-go updates are additive in nature. It is generally safe to only scan through them before approving and merging. If you have any concerns about any of the service client updates such as suspicious code removals in the update, or deprecations introduced, run the acceptance testing for potentially affected resources before merging. Authentication changes: Occasionally, there will be changes listed in the authentication pieces of the AWS Go SDK codebase, e.g., changes to aws/session . The AWS Go SDK CHANGELOG should include a relevant description of these changes under a heading such as SDK Enhancements or SDK Bug Fixes . If they seem worthy of a callout in the Terraform AWS Provider CHANGELOG , then upon merging we should include a similar message prefixed with the provider subsystem, e.g., * provider: ... . Additionally, if a CHANGELOG addition seemed appropriate, this dependency and version should also be updated in the Terraform S3 Backend, which currently lives in Terraform Core. An example of this can be found with https://github.com/hashicorp/terraform-provider-aws/pull/9305 and https://github.com/hashicorp/terraform/pull/22055. CloudFront changes: CloudFront service client updates have previously caused an issue when a new field introduced in the SDK was not included with Terraform and caused all requests to error (https://github.com/hashicorp/terraform-provider-aws/issues/4091). As a precaution, if you see CloudFront updates, run all the CloudFront resource acceptance testing before merging ( TestAccCloudFront ). New Regions: These are added to the AWS Go SDK aws/endpoints/defaults.go file and generally noted in the AWS Go SDK CHANGELOG as aws/endpoints: Updated Regions . Since April 2019, new regions added to AWS now require being explicitly enabled before they can be used. Examples of this can be found when me-south-1 was announced: Terraform AWS Provider issue Terraform AWS Provider AWS Go SDK update pull request Terraform AWS Provider data source update pull request Terraform S3 Backend issue Terraform S3 Backend pull request Typically our process for new regions is as follows: Create new (if not existing) Terraform AWS Provider issue: Support Automatic Region Validation for XX-XXXXX-# (Location) Create new (if not existing) Terraform S3 Backend issue: backend/s3: Support Automatic Region Validation for XX-XXXXX-# (Location) Enable the new region in an AWS testing account and verify AWS Go SDK update works with the new region with export AWS_DEFAULT_REGION=XX-XXXXX-# with the new region and run the TestAccDataSourceAwsRegion_ acceptance testing or by building the provider and testing a configuration like the following: provider \"aws\" { region = \"me-south-1\" } data \"aws_region\" \"current\" {} output \"region\" { value = data.aws_region.current.name } Merge AWS Go SDK update in Terraform AWS Provider and close issue with the following information: Support for automatic validation of this new region has been merged and will release with version <x.y.z> of the Terraform AWS Provider, later this week. --- Please note that this new region requires [ a manual process to enable ]( https://docs.aws.amazon.com/general/latest/gr/rande-manage.html#rande-manage-enable ). Once enabled in the console, it takes a few minutes for everything to work properly. If the region is not enabled properly, or the enablement process is still in progress, you can receive errors like these: ```console $ terraform apply Error: error validating provider credentials: error calling sts:GetCallerIdentity: InvalidClientTokenId: The security token included in the request is invalid. status code: 403, request id: 142f947b-b2c3-11e9-9959-c11ab17bcc63 on main.tf line 1, in provider \"aws\": 1: provider \"aws\" { ``` --- To use this new region before support has been added to Terraform AWS Provider version in use, you must disable the provider's automatic region validation via: ```hcl provider \"aws\" { # ... potentially other configuration ... region = \"me-south-1\" skip_region_validation = true } ``` Update the Terraform AWS Provider CHANGELOG with the following: NOTES: * provider: Region validation now automatically supports the new `XX-XXXXX-#` (Location) region. For AWS operations to work in the new region, the region must be explicitly enabled as outlined in the [ AWS Documentation ]( https://docs.aws.amazon.com/general/latest/gr/rande-manage.html#rande-manage-enable ). When the region is not enabled, the Terraform AWS Provider will return errors during credential validation (e.g., `error validating provider credentials: error calling sts:GetCallerIdentity: InvalidClientTokenId: The security token included in the request is invalid` ) or AWS operations will throw their own errors (e.g., `data.aws_availability_zones.available: Error fetching Availability Zones: AuthFailure: AWS was not able to validate the provided access credentials` ). [GH-####] ENHANCEMENTS: * provider: Support automatic region validation for `XX-XXXXX-#` [GH-####] Follow the Contributing Guide to submit updates for various data sources to support the new region Submit the dependency update to the Terraform S3 Backend by running the following: go get github.com/aws/aws-sdk-go@v#.#.# go mod tidy Create a S3 Bucket in the new region and verify AWS Go SDK update works with new region by building the Terraform S3 Backend and testing a configuration like the following: terraform { backend \"s3\" { bucket = \"XXX\" key = \"test\" region = \"me-south-1\" } } output \"test\" { value = timestamp () } After approval, merge AWS Go SDK update in Terraform S3 Backend and close issue with the following information: Support for automatic validation of this new region has been merged and will release with the next version of the Terraform. This was verified on a build of Terraform with the update: ```hcl terraform { backend \"s3\" { bucket = \"XXX\" key = \"test\" region = \"me-south-1\" } } output \"test\" { value = timestamp () } ``` Outputs: ```console $ terraform init ... Terraform has been successfully initialized! ``` --- Please note that this new region requires [ a manual process to enable ]( https://docs.aws.amazon.com/general/latest/gr/rande-manage.html#rande-manage-enable ). Once enabled in the console, it takes a few minutes for everything to work properly. If the region is not enabled properly, or the enablement process is still in progress, you can receive errors like these: ```console $ terraform init Initializing the backend... Error: error validating provider credentials: error calling sts:GetCallerIdentity: InvalidClientTokenId: The security token included in the request is invalid. ``` --- To use this new region before this update is released, you must disable the Terraform S3 Backend's automatic region validation via: ```hcl terraform { # ... potentially other configuration ... backend \"s3\" { # ... other configuration ... region = \"me-south-1\" skip_region_validation = true } } ``` Update the Terraform S3 Backend CHANGELOG with the following: NOTES: * backend/s3: Region validation now automatically supports the new `XX-XXXXX-#` (Location) region. For AWS operations to work in the new region, the region must be explicitly enabled as outlined in the [ AWS Documentation ]( https://docs.aws.amazon.com/general/latest/gr/rande-manage.html#rande-manage-enable ). When the region is not enabled, the Terraform S3 Backend will return errors during credential validation (e.g., `error validating provider credentials: error calling sts:GetCallerIdentity: InvalidClientTokenId: The security token included in the request is invalid` ). [GH-####] ENHANCEMENTS: * backend/s3: Support automatic region validation for `XX-XXXXX-#` [GH-####] golangci-lint Updates # Merge if CI passes. Terraform Plugin SDK Updates # Except for trivial changes, run the full acceptance testing suite against the pull request and verify there are no new or unexpected failures. tfproviderdocs Updates # Merge if CI passes. tfproviderlint Updates # Merge if CI passes. yaml.v2 Updates # Run the acceptance testing pattern, TestAccCloudFormationStack(_dataSource)?_yaml , and merge if passing. Pull Request Merge Process # Add this pull request to the upcoming release milestone Add any linked issues that will be closed by the pull request to the same upcoming release milestone Merge the pull request Delete the branch (if the branch is on this repository) Determine if the pull request should have a CHANGELOG entry by reviewing the Pull Request Types to CHANGELOG section , and follow the CHANGELOG specification here Leave a comment on any issues closed by the pull request noting that it has been merged and when to expect the release containing it, e.g. The fix for this has been merged and will release with version X.Y.Z of the Terraform AWS Provider, expected in the XXX timeframe. Breaking Changes # When breaking changes to the provider are necessary we release them in a major version. If an issue or PR necessitates a breaking change, then the following procedure should be observed: Add the breaking-change label. Add the issue/PR to the next major version milestone. Leave a comment why this is a breaking change or otherwise only being considered for a major version update. If possible, detail any changes that might be made for the contributor to accomplish the task without a breaking change. Branch Dictionary # The following branch conventions are used: Branch Example Description main main Main, unreleased code branch. release/* release/2.x Backport branches for previous major releases. Additional branch naming recommendations can be found in the Pull Request Submission and Lifecycle documentation . Environment Variable Dictionary # Environment variables (beyond standard AWS Go SDK ones) used by acceptance testing. See also the internal/acctest package. Variable Description ACM_CERTIFICATE_ROOT_DOMAIN Root domain name to use with ACM Certificate testing. ACM_CERTIFICATE_MULTIPLE_ISSUED_DOMAIN Domain name of ACM Certificate with a multiple issued certificates. DEPRECATED: Should be replaced with aws_acm_certficate resource usage in tests. ACM_CERTIFICATE_MULTIPLE_ISSUED_MOST_RECENT_ARN Amazon Resource Name of most recent ACM Certificate with a multiple issued certificates. DEPRECATED: Should be replaced with aws_acm_certficate resource usage in tests. ACM_CERTIFICATE_SINGLE_ISSUED_DOMAIN Domain name of ACM Certificate with a single issued certificate. DEPRECATED: Should be replaced with aws_acm_certficate resource usage in tests. ACM_CERTIFICATE_SINGLE_ISSUED_MOST_RECENT_ARN Amazon Resource Name of most recent ACM Certificate with a single issued certificate. DEPRECATED: Should be replaced with aws_acm_certficate resource usage in tests. ADM_CLIENT_ID Identifier for Amazon Device Manager Client in Pinpoint testing. AMPLIFY_DOMAIN_NAME Domain name to use for Amplify domain association testing. AMPLIFY_GITHUB_ACCESS_TOKEN GitHub access token used for AWS Amplify testing. AMPLIFY_GITHUB_REPOSITORY GitHub repository used for AWS Amplify testing. ADM_CLIENT_SECRET Secret for Amazon Device Manager Client in Pinpoint testing. APNS_BUNDLE_ID Identifier for Apple Push Notification Service Bundle in Pinpoint testing. APNS_CERTIFICATE Certificate (PEM format) for Apple Push Notification Service in Pinpoint testing. APNS_CERTIFICATE_PRIVATE_KEY Private key for Apple Push Notification Service in Pinpoint testing. APNS_SANDBOX_BUNDLE_ID Identifier for Sandbox Apple Push Notification Service Bundle in Pinpoint testing. APNS_SANDBOX_CERTIFICATE Certificate (PEM format) for Sandbox Apple Push Notification Service in Pinpoint testing. APNS_SANDBOX_CERTIFICATE_PRIVATE_KEY Private key for Sandbox Apple Push Notification Service in Pinpoint testing. APNS_SANDBOX_CREDENTIAL Credential contents for Sandbox Apple Push Notification Service in SNS Application Platform testing. Conflicts with APNS_SANDBOX_CREDENTIAL_PATH . APNS_SANDBOX_CREDENTIAL_PATH Path to credential for Sandbox Apple Push Notification Service in SNS Application Platform testing. Conflicts with APNS_SANDBOX_CREDENTIAL . APNS_SANDBOX_PRINCIPAL Principal contents for Sandbox Apple Push Notification Service in SNS Application Platform testing. Conflicts with APNS_SANDBOX_PRINCIPAL_PATH . APNS_SANDBOX_PRINCIPAL_PATH Path to principal for Sandbox Apple Push Notification Service in SNS Application Platform testing. Conflicts with APNS_SANDBOX_PRINCIPAL . APNS_SANDBOX_TEAM_ID Identifier for Sandbox Apple Push Notification Service Team in Pinpoint testing. APNS_SANDBOX_TOKEN_KEY Token key file content (.p8 format) for Sandbox Apple Push Notification Service in Pinpoint testing. APNS_SANDBOX_TOKEN_KEY_ID Identifier for Sandbox Apple Push Notification Service Token Key in Pinpoint testing. APNS_TEAM_ID Identifier for Apple Push Notification Service Team in Pinpoint testing. APNS_TOKEN_KEY Token key file content (.p8 format) for Apple Push Notification Service in Pinpoint testing. APNS_TOKEN_KEY_ID Identifier for Apple Push Notification Service Token Key in Pinpoint testing. APNS_VOIP_BUNDLE_ID Identifier for VOIP Apple Push Notification Service Bundle in Pinpoint testing. APNS_VOIP_CERTIFICATE Certificate (PEM format) for VOIP Apple Push Notification Service in Pinpoint testing. APNS_VOIP_CERTIFICATE_PRIVATE_KEY Private key for VOIP Apple Push Notification Service in Pinpoint testing. APNS_VOIP_TEAM_ID Identifier for VOIP Apple Push Notification Service Team in Pinpoint testing. APNS_VOIP_TOKEN_KEY Token key file content (.p8 format) for VOIP Apple Push Notification Service in Pinpoint testing. APNS_VOIP_TOKEN_KEY_ID Identifier for VOIP Apple Push Notification Service Token Key in Pinpoint testing. APPRUNNER_CUSTOM_DOMAIN A custom domain endpoint (root domain, subdomain, or wildcard) for AppRunner Custom Domain Association testing. AWS_ALTERNATE_ACCESS_KEY_ID AWS access key ID with access to a secondary AWS account for tests requiring multiple accounts. Requires AWS_ALTERNATE_SECRET_ACCESS_KEY . Conflicts with AWS_ALTERNATE_PROFILE . AWS_ALTERNATE_SECRET_ACCESS_KEY AWS secret access key with access to a secondary AWS account for tests requiring multiple accounts. Requires AWS_ALTERNATE_ACCESS_KEY_ID . Conflicts with AWS_ALTERNATE_PROFILE . AWS_ALTERNATE_PROFILE AWS profile with access to a secondary AWS account for tests requiring multiple accounts. Conflicts with AWS_ALTERNATE_ACCESS_KEY_ID and AWS_ALTERNATE_SECRET_ACCESS_KEY . AWS_ALTERNATE_REGION Secondary AWS region for tests requiring multiple regions. Defaults to us-east-1 . AWS_API_GATEWAY_DOMAIN_NAME_CERTIFICATE_BODY Certificate body of publicly trusted certificate for API Gateway Domain Name testing. AWS_API_GATEWAY_DOMAIN_NAME_CERTIFICATE_CHAIN Certificate chain of publicly trusted certificate for API Gateway Domain Name testing. AWS_API_GATEWAY_DOMAIN_NAME_CERTIFICATE_PRIVATE_KEY Private key of publicly trusted certificate for API Gateway Domain Name testing. AWS_API_GATEWAY_DOMAIN_NAME_REGIONAL_CERTIFICATE_NAME_ENABLED Flag to enable API Gateway Domain Name regional certificate upload testing. AWS_CODEBUILD_BITBUCKET_SOURCE_LOCATION BitBucket source URL for CodeBuild testing. CodeBuild must have access to this repository via OAuth or Source Credentials. Defaults to https://terraform@bitbucket.org/terraform/aws-test.git . AWS_CODEBUILD_GITHUB_SOURCE_LOCATION GitHub source URL for CodeBuild testing. CodeBuild must have access to this repository via OAuth or Source Credentials. Defaults to https://github.com/hashibot-test/aws-test.git . AWS_DEFAULT_REGION Primary AWS region for tests. Defaults to us-west-2 . AWS_DETECTIVE_MEMBER_EMAIL Email address for Detective Member testing. A valid email address associated with an AWS root account is required for tests to pass. AWS_EC2_CLASSIC_REGION AWS region for EC2-Classic testing. Defaults to us-east-1 in AWS Commercial and AWS_DEFAULT_REGION otherwise. AWS_EC2_CLIENT_VPN_LIMIT Concurrency limit for Client VPN acceptance tests. Default is 5 if not specified. AWS_EC2_EIP_PUBLIC_IPV4_POOL Identifier for EC2 Public IPv4 Pool for EC2 EIP testing. AWS_GUARDDUTY_MEMBER_ACCOUNT_ID Identifier of AWS Account for GuardDuty Member testing. DEPRECATED: Should be replaced with standard alternate account handling for tests. AWS_GUARDDUTY_MEMBER_EMAIL Email address for GuardDuty Member testing. DEPRECATED: It may be possible to use a placeholder email address instead. AWS_LAMBDA_IMAGE_LATEST_ID ECR repository image URI (tagged as latest ) for Lambda container image acceptance tests. AWS_LAMBDA_IMAGE_V1_ID ECR repository image URI (tagged as v1 ) for Lambda container image acceptance tests. AWS_LAMBDA_IMAGE_V2_ID ECR repository image URI (tagged as v2 ) for Lambda container image acceptance tests. DX_CONNECTION_ID Identifier for Direct Connect Connection testing. DX_VIRTUAL_INTERFACE_ID Identifier for Direct Connect Virtual Interface testing. EC2_SECURITY_GROUP_RULES_PER_GROUP_LIMIT EC2 Quota for Rules per Security Group. Defaults to 50. DEPRECATED: Can be augmented or replaced with Service Quotas lookup. EVENT_BRIDGE_PARTNER_EVENT_BUS_NAME Amazon EventBridge partner event bus name. EVENT_BRIDGE_PARTNER_EVENT_SOURCE_NAME Amazon EventBridge partner event source name. GCM_API_KEY API Key for Google Cloud Messaging in Pinpoint and SNS Platform Application testing. GITHUB_TOKEN GitHub token for CodePipeline testing. GRAFANA_SSO_GROUP_ID AWS SSO group ID for Grafana testing. GRAFANA_SSO_USER_ID AWS SSO user ID for Grafana testing. MACIE_MEMBER_ACCOUNT_ID Identifier of AWS Account for Macie Member testing. DEPRECATED: Should be replaced with standard alternate account handling for tests. QUICKSIGHT_NAMESPACE QuickSight namespace name for testing. ROUTE53DOMAINS_DOMAIN_NAME Registered domain for Route 53 Domains testing. SAGEMAKER_IMAGE_VERSION_BASE_IMAGE SageMaker base image to use for tests. SERVICEQUOTAS_INCREASE_ON_CREATE_QUOTA_CODE Quota Code for Service Quotas testing (submits support case). SERVICEQUOTAS_INCREASE_ON_CREATE_SERVICE_CODE Service Code for Service Quotas testing (submits support case). SERVICEQUOTAS_INCREASE_ON_CREATE_VALUE Value of quota increase for Service Quotas testing (submits support case). SES_DOMAIN_IDENTITY_ROOT_DOMAIN Root domain name of publicly accessible and Route 53 configurable domain for SES Domain Identity testing. SWF_DOMAIN_TESTING_ENABLED Enables SWF Domain testing (API does not support deletions). TEST_AWS_ORGANIZATION_ACCOUNT_EMAIL_DOMAIN Email address for Organizations Account testing. TEST_AWS_SES_VERIFIED_EMAIL_ARN Verified SES Email Identity for use in Cognito User Pool testing. TF_ACC Enables Go tests containing resource.Test() and resource.ParallelTest() . TF_ACC_ASSUME_ROLE_ARN Amazon Resource Name of existing IAM Role to use for limited permissions acceptance testing. TF_TEST_CLOUDFRONT_RETAIN Flag to disable but dangle CloudFront Distributions during testing to reduce feedback time (must be manually destroyed afterwards) Label Dictionary # Label Description Automation Introduces a breaking change in current functionality; breaking changes are usually deferred to the next major release. None Addresses a defect in current functionality. None Results from or addresses a Terraform crash or kernel panic. None Used to indicate dependency changes. Added by Hashibot. Introduces or discusses updates to documentation. None Requests to existing resources that expand the functionality or scope. None Introduces or discusses updates to examples. None Call to action for new contributors looking for a place to start. Smaller or straightforward issues. None Call to action for Hacktoberfest (OSS Initiative). None Issues or PRs labelled with this are ignored by Hashibot. None Call to action for contributors. Indicates an area of the codebase we\u2019d like to expand/work on but don\u2019t have the bandwidth inside the team. None Waiting for first response or review from a maintainer. Added to all new issues or PRs by GitHub action in .github/workflows/issues.yml or PRs by Hashibot in .hashibot.hcl unless they were submitted by a maintainer. Introduces a new data source. None Introduces a new resrouce. None Proposes new design or functionality. None Pertains to the provider itself, rather than any interaction with AWS. Added by Hashibot when the code change is in an area configured in .hashibot.hcl Includes a question about existing functionality; most questions will be re-routed to discuss.hashicorp.com. None Pertains to a degraded workflow resulting from an upstream patch or internal enhancement; usually categorized as a bug. None Pertains to a service or feature announced at reinvent. None Indicates the service that is covered or introduced (i.e. service/s3) Added by Hashibot when the code change matches a service definition in .hashibot.hcl . Managed by automation to categorize the size of a PR Added by Hashibot to indicate the size of the PR. Old or inactive issues managed by automation, if no further action taken these will get closed. Added by a Github Action, configuration is found: .github/workflows/stale.yml . Addresses areas of the codebase that need refactoring or redesign. None On a PR this indicates expanded test coverage. On an Issue this proposes expanded coverage or enhancement to test infrastructure. None Requires additional research by the maintainers. None Addresses functionality related to the Terraform core binary. None Addresses functionality related to the cloud provider. None Maintainers are waiting on response from community or contributor. None Release Process # Create a milestone for the next release after this release (generally, the next milestone will be a minor version increase unless previously decided for a major or patch version) Check the existing release milestone for open items and either work through them or move them to the next milestone Run the HashiCorp (non-OSS) TeamCity release job either via: Slack command: /tcrelease aws #.#.# (no v prefix) Web interface: With the DEPLOYMENT_TARGET_VERSION matching the expected release milestone and DEPLOYMENT_NEXT_VERSION matching the next release milestone Wait for the TeamCity release job to complete either by watching the build logs or Slack notifications Close the release milestone Create a new GitHub release with the release title exactly matching the tag and milestone (e.g., v2.22.0 ) and copy the entries from the CHANGELOG to the release notes.","title":"Maintaining the Terraform AWS Provider"},{"location":"contributing/maintaining/#maintaining-the-terraform-aws-provider","text":"Pull Requests Pull Request Review Process Dependency Updates Go Default Version Update AWS Go SDK Updates golangci-lint Updates Terraform Plugin SDK Updates tfproviderdocs Updates tfproviderlint Updates yaml.v2 Updates Pull Request Merge Process Breaking Changes Branch Dictionary Environment Variable Dictionary Label Dictionary Release Process","title":"Maintaining the Terraform AWS Provider"},{"location":"contributing/maintaining/#community-maintainers","text":"Members of the community who participate in any aspects of maintaining the provider must adhere to the HashiCorp Community Guidelines .","title":"Community Maintainers"},{"location":"contributing/maintaining/#triage","text":"Incoming issues are classified using labels. These are assigned either by automation, or manually during the triage process. We follow a two-label system where we classify by type and by the area of the provider they affect. A full listing of the labels and how they are used can be found in the Label Dictionary .","title":"Triage"},{"location":"contributing/maintaining/#pull-requests","text":"","title":"Pull Requests"},{"location":"contributing/maintaining/#pull-request-review-process","text":"Throughout the review process our first priority is to interact with contributors with kindness, empathy and in accordance with the Guidelines and Principles of Hashicorp. Our contributors are often working within the provider as a hobby, or not in their main line of work so we need to give adequate time for response. By default this is a week, but it is worth considering taking on the work to complete the PR ourselves if the administrative effort of waiting for a response is greater than just resolving the issues ourselves (Don't wait the week, or add a context shift for yourself and the contributor to fix a typo). As long as we use their commits, contributions will be recorded by Github and as always ensure to thank the contributor for their work. Roadmap items are another area where we would consider taking on the work ourselves more quickly in order to meet the commitments made to our users. Notes for each type of pull request are (or will be) available in subsections below. If you plan to be responsible for the pull request through the merge/closure process, assign it to yourself Add bug , enhancement , new-data-source , new-resource , or technical-debt labels to match expectations from change Perform a quick scan of open issues and ensure they are referenced in the pull request description (e.g., Closes #1234 , Relates #5678 ). Edit the description yourself and mention this to the author: This pull request appears to be related to/solve #1234 , so I have edited the pull request description to denote the issue reference. Review the contents of the pull request and ensure the change follows the relevant section of the Contributing Guide If the change is not acceptable, leave a long form comment about the reasoning and close the pull request If the change is acceptable with modifications, leave a pull request review marked using the Request Changes option (for maintainer pull requests with minor modification requests, giving feedback with the Approve option is recommended so they do not need to wait for another round of review) If the author is unresponsive for changes (by default we give two weeks), determine importance and level of effort to finish the pull request yourself including their commits or close the pull request Run relevant acceptance testing ( locally or in TeamCity) against AWS Commercial and AWS GovCloud (US) to ensure no new failures are being introduced Approve the pull request with a comment outlining what steps you took that ensure the change is acceptable, e.g., acceptance testing output Looks good, thanks @username ! :rocket: Output from acceptance testing in AWS Commercial: ``` --- PASS: TestAcc... --- PASS: TestAcc... ``` Output from acceptance testing in AWS GovCloud (US): ``` --- PASS: TestAcc... --- PASS: TestAcc... ```","title":"Pull Request Review Process"},{"location":"contributing/maintaining/#dependency-updates","text":"","title":"Dependency Updates"},{"location":"contributing/maintaining/#go-default-version-update","text":"This project typically upgrades its Go version for development and testing shortly after release to get the latest and greatest Go functionality. Before beginning the update process, ensure that you review the new version release notes to look for any areas of possible friction when updating. Create an issue to cover the update noting down any areas of particular interest or friction. Ensure that the following steps are tracked within the issue and completed within the resulting pull request. Update go version in go.mod Verify make test lint works as expected Verify goreleaser build --snapshot succeeds for all currently supported architectures Verify goenv support for the new version Update development-environment.md Update .go-version Update CHANGELOG.md detailing the update and mention any notes practitioners need to be aware of. See #9992 / #10206 for a recent example.","title":"Go Default Version Update"},{"location":"contributing/maintaining/#aws-go-sdk-updates","text":"Almost exclusively, github.com/aws/aws-sdk-go updates are additive in nature. It is generally safe to only scan through them before approving and merging. If you have any concerns about any of the service client updates such as suspicious code removals in the update, or deprecations introduced, run the acceptance testing for potentially affected resources before merging. Authentication changes: Occasionally, there will be changes listed in the authentication pieces of the AWS Go SDK codebase, e.g., changes to aws/session . The AWS Go SDK CHANGELOG should include a relevant description of these changes under a heading such as SDK Enhancements or SDK Bug Fixes . If they seem worthy of a callout in the Terraform AWS Provider CHANGELOG , then upon merging we should include a similar message prefixed with the provider subsystem, e.g., * provider: ... . Additionally, if a CHANGELOG addition seemed appropriate, this dependency and version should also be updated in the Terraform S3 Backend, which currently lives in Terraform Core. An example of this can be found with https://github.com/hashicorp/terraform-provider-aws/pull/9305 and https://github.com/hashicorp/terraform/pull/22055. CloudFront changes: CloudFront service client updates have previously caused an issue when a new field introduced in the SDK was not included with Terraform and caused all requests to error (https://github.com/hashicorp/terraform-provider-aws/issues/4091). As a precaution, if you see CloudFront updates, run all the CloudFront resource acceptance testing before merging ( TestAccCloudFront ). New Regions: These are added to the AWS Go SDK aws/endpoints/defaults.go file and generally noted in the AWS Go SDK CHANGELOG as aws/endpoints: Updated Regions . Since April 2019, new regions added to AWS now require being explicitly enabled before they can be used. Examples of this can be found when me-south-1 was announced: Terraform AWS Provider issue Terraform AWS Provider AWS Go SDK update pull request Terraform AWS Provider data source update pull request Terraform S3 Backend issue Terraform S3 Backend pull request Typically our process for new regions is as follows: Create new (if not existing) Terraform AWS Provider issue: Support Automatic Region Validation for XX-XXXXX-# (Location) Create new (if not existing) Terraform S3 Backend issue: backend/s3: Support Automatic Region Validation for XX-XXXXX-# (Location) Enable the new region in an AWS testing account and verify AWS Go SDK update works with the new region with export AWS_DEFAULT_REGION=XX-XXXXX-# with the new region and run the TestAccDataSourceAwsRegion_ acceptance testing or by building the provider and testing a configuration like the following: provider \"aws\" { region = \"me-south-1\" } data \"aws_region\" \"current\" {} output \"region\" { value = data.aws_region.current.name } Merge AWS Go SDK update in Terraform AWS Provider and close issue with the following information: Support for automatic validation of this new region has been merged and will release with version <x.y.z> of the Terraform AWS Provider, later this week. --- Please note that this new region requires [ a manual process to enable ]( https://docs.aws.amazon.com/general/latest/gr/rande-manage.html#rande-manage-enable ). Once enabled in the console, it takes a few minutes for everything to work properly. If the region is not enabled properly, or the enablement process is still in progress, you can receive errors like these: ```console $ terraform apply Error: error validating provider credentials: error calling sts:GetCallerIdentity: InvalidClientTokenId: The security token included in the request is invalid. status code: 403, request id: 142f947b-b2c3-11e9-9959-c11ab17bcc63 on main.tf line 1, in provider \"aws\": 1: provider \"aws\" { ``` --- To use this new region before support has been added to Terraform AWS Provider version in use, you must disable the provider's automatic region validation via: ```hcl provider \"aws\" { # ... potentially other configuration ... region = \"me-south-1\" skip_region_validation = true } ``` Update the Terraform AWS Provider CHANGELOG with the following: NOTES: * provider: Region validation now automatically supports the new `XX-XXXXX-#` (Location) region. For AWS operations to work in the new region, the region must be explicitly enabled as outlined in the [ AWS Documentation ]( https://docs.aws.amazon.com/general/latest/gr/rande-manage.html#rande-manage-enable ). When the region is not enabled, the Terraform AWS Provider will return errors during credential validation (e.g., `error validating provider credentials: error calling sts:GetCallerIdentity: InvalidClientTokenId: The security token included in the request is invalid` ) or AWS operations will throw their own errors (e.g., `data.aws_availability_zones.available: Error fetching Availability Zones: AuthFailure: AWS was not able to validate the provided access credentials` ). [GH-####] ENHANCEMENTS: * provider: Support automatic region validation for `XX-XXXXX-#` [GH-####] Follow the Contributing Guide to submit updates for various data sources to support the new region Submit the dependency update to the Terraform S3 Backend by running the following: go get github.com/aws/aws-sdk-go@v#.#.# go mod tidy Create a S3 Bucket in the new region and verify AWS Go SDK update works with new region by building the Terraform S3 Backend and testing a configuration like the following: terraform { backend \"s3\" { bucket = \"XXX\" key = \"test\" region = \"me-south-1\" } } output \"test\" { value = timestamp () } After approval, merge AWS Go SDK update in Terraform S3 Backend and close issue with the following information: Support for automatic validation of this new region has been merged and will release with the next version of the Terraform. This was verified on a build of Terraform with the update: ```hcl terraform { backend \"s3\" { bucket = \"XXX\" key = \"test\" region = \"me-south-1\" } } output \"test\" { value = timestamp () } ``` Outputs: ```console $ terraform init ... Terraform has been successfully initialized! ``` --- Please note that this new region requires [ a manual process to enable ]( https://docs.aws.amazon.com/general/latest/gr/rande-manage.html#rande-manage-enable ). Once enabled in the console, it takes a few minutes for everything to work properly. If the region is not enabled properly, or the enablement process is still in progress, you can receive errors like these: ```console $ terraform init Initializing the backend... Error: error validating provider credentials: error calling sts:GetCallerIdentity: InvalidClientTokenId: The security token included in the request is invalid. ``` --- To use this new region before this update is released, you must disable the Terraform S3 Backend's automatic region validation via: ```hcl terraform { # ... potentially other configuration ... backend \"s3\" { # ... other configuration ... region = \"me-south-1\" skip_region_validation = true } } ``` Update the Terraform S3 Backend CHANGELOG with the following: NOTES: * backend/s3: Region validation now automatically supports the new `XX-XXXXX-#` (Location) region. For AWS operations to work in the new region, the region must be explicitly enabled as outlined in the [ AWS Documentation ]( https://docs.aws.amazon.com/general/latest/gr/rande-manage.html#rande-manage-enable ). When the region is not enabled, the Terraform S3 Backend will return errors during credential validation (e.g., `error validating provider credentials: error calling sts:GetCallerIdentity: InvalidClientTokenId: The security token included in the request is invalid` ). [GH-####] ENHANCEMENTS: * backend/s3: Support automatic region validation for `XX-XXXXX-#` [GH-####]","title":"AWS Go SDK Updates"},{"location":"contributing/maintaining/#golangci-lint-updates","text":"Merge if CI passes.","title":"golangci-lint Updates"},{"location":"contributing/maintaining/#terraform-plugin-sdk-updates","text":"Except for trivial changes, run the full acceptance testing suite against the pull request and verify there are no new or unexpected failures.","title":"Terraform Plugin SDK Updates"},{"location":"contributing/maintaining/#tfproviderdocs-updates","text":"Merge if CI passes.","title":"tfproviderdocs Updates"},{"location":"contributing/maintaining/#tfproviderlint-updates","text":"Merge if CI passes.","title":"tfproviderlint Updates"},{"location":"contributing/maintaining/#yamlv2-updates","text":"Run the acceptance testing pattern, TestAccCloudFormationStack(_dataSource)?_yaml , and merge if passing.","title":"yaml.v2 Updates"},{"location":"contributing/maintaining/#pull-request-merge-process","text":"Add this pull request to the upcoming release milestone Add any linked issues that will be closed by the pull request to the same upcoming release milestone Merge the pull request Delete the branch (if the branch is on this repository) Determine if the pull request should have a CHANGELOG entry by reviewing the Pull Request Types to CHANGELOG section , and follow the CHANGELOG specification here Leave a comment on any issues closed by the pull request noting that it has been merged and when to expect the release containing it, e.g. The fix for this has been merged and will release with version X.Y.Z of the Terraform AWS Provider, expected in the XXX timeframe.","title":"Pull Request Merge Process"},{"location":"contributing/maintaining/#breaking-changes","text":"When breaking changes to the provider are necessary we release them in a major version. If an issue or PR necessitates a breaking change, then the following procedure should be observed: Add the breaking-change label. Add the issue/PR to the next major version milestone. Leave a comment why this is a breaking change or otherwise only being considered for a major version update. If possible, detail any changes that might be made for the contributor to accomplish the task without a breaking change.","title":"Breaking Changes"},{"location":"contributing/maintaining/#branch-dictionary","text":"The following branch conventions are used: Branch Example Description main main Main, unreleased code branch. release/* release/2.x Backport branches for previous major releases. Additional branch naming recommendations can be found in the Pull Request Submission and Lifecycle documentation .","title":"Branch Dictionary"},{"location":"contributing/maintaining/#environment-variable-dictionary","text":"Environment variables (beyond standard AWS Go SDK ones) used by acceptance testing. See also the internal/acctest package. Variable Description ACM_CERTIFICATE_ROOT_DOMAIN Root domain name to use with ACM Certificate testing. ACM_CERTIFICATE_MULTIPLE_ISSUED_DOMAIN Domain name of ACM Certificate with a multiple issued certificates. DEPRECATED: Should be replaced with aws_acm_certficate resource usage in tests. ACM_CERTIFICATE_MULTIPLE_ISSUED_MOST_RECENT_ARN Amazon Resource Name of most recent ACM Certificate with a multiple issued certificates. DEPRECATED: Should be replaced with aws_acm_certficate resource usage in tests. ACM_CERTIFICATE_SINGLE_ISSUED_DOMAIN Domain name of ACM Certificate with a single issued certificate. DEPRECATED: Should be replaced with aws_acm_certficate resource usage in tests. ACM_CERTIFICATE_SINGLE_ISSUED_MOST_RECENT_ARN Amazon Resource Name of most recent ACM Certificate with a single issued certificate. DEPRECATED: Should be replaced with aws_acm_certficate resource usage in tests. ADM_CLIENT_ID Identifier for Amazon Device Manager Client in Pinpoint testing. AMPLIFY_DOMAIN_NAME Domain name to use for Amplify domain association testing. AMPLIFY_GITHUB_ACCESS_TOKEN GitHub access token used for AWS Amplify testing. AMPLIFY_GITHUB_REPOSITORY GitHub repository used for AWS Amplify testing. ADM_CLIENT_SECRET Secret for Amazon Device Manager Client in Pinpoint testing. APNS_BUNDLE_ID Identifier for Apple Push Notification Service Bundle in Pinpoint testing. APNS_CERTIFICATE Certificate (PEM format) for Apple Push Notification Service in Pinpoint testing. APNS_CERTIFICATE_PRIVATE_KEY Private key for Apple Push Notification Service in Pinpoint testing. APNS_SANDBOX_BUNDLE_ID Identifier for Sandbox Apple Push Notification Service Bundle in Pinpoint testing. APNS_SANDBOX_CERTIFICATE Certificate (PEM format) for Sandbox Apple Push Notification Service in Pinpoint testing. APNS_SANDBOX_CERTIFICATE_PRIVATE_KEY Private key for Sandbox Apple Push Notification Service in Pinpoint testing. APNS_SANDBOX_CREDENTIAL Credential contents for Sandbox Apple Push Notification Service in SNS Application Platform testing. Conflicts with APNS_SANDBOX_CREDENTIAL_PATH . APNS_SANDBOX_CREDENTIAL_PATH Path to credential for Sandbox Apple Push Notification Service in SNS Application Platform testing. Conflicts with APNS_SANDBOX_CREDENTIAL . APNS_SANDBOX_PRINCIPAL Principal contents for Sandbox Apple Push Notification Service in SNS Application Platform testing. Conflicts with APNS_SANDBOX_PRINCIPAL_PATH . APNS_SANDBOX_PRINCIPAL_PATH Path to principal for Sandbox Apple Push Notification Service in SNS Application Platform testing. Conflicts with APNS_SANDBOX_PRINCIPAL . APNS_SANDBOX_TEAM_ID Identifier for Sandbox Apple Push Notification Service Team in Pinpoint testing. APNS_SANDBOX_TOKEN_KEY Token key file content (.p8 format) for Sandbox Apple Push Notification Service in Pinpoint testing. APNS_SANDBOX_TOKEN_KEY_ID Identifier for Sandbox Apple Push Notification Service Token Key in Pinpoint testing. APNS_TEAM_ID Identifier for Apple Push Notification Service Team in Pinpoint testing. APNS_TOKEN_KEY Token key file content (.p8 format) for Apple Push Notification Service in Pinpoint testing. APNS_TOKEN_KEY_ID Identifier for Apple Push Notification Service Token Key in Pinpoint testing. APNS_VOIP_BUNDLE_ID Identifier for VOIP Apple Push Notification Service Bundle in Pinpoint testing. APNS_VOIP_CERTIFICATE Certificate (PEM format) for VOIP Apple Push Notification Service in Pinpoint testing. APNS_VOIP_CERTIFICATE_PRIVATE_KEY Private key for VOIP Apple Push Notification Service in Pinpoint testing. APNS_VOIP_TEAM_ID Identifier for VOIP Apple Push Notification Service Team in Pinpoint testing. APNS_VOIP_TOKEN_KEY Token key file content (.p8 format) for VOIP Apple Push Notification Service in Pinpoint testing. APNS_VOIP_TOKEN_KEY_ID Identifier for VOIP Apple Push Notification Service Token Key in Pinpoint testing. APPRUNNER_CUSTOM_DOMAIN A custom domain endpoint (root domain, subdomain, or wildcard) for AppRunner Custom Domain Association testing. AWS_ALTERNATE_ACCESS_KEY_ID AWS access key ID with access to a secondary AWS account for tests requiring multiple accounts. Requires AWS_ALTERNATE_SECRET_ACCESS_KEY . Conflicts with AWS_ALTERNATE_PROFILE . AWS_ALTERNATE_SECRET_ACCESS_KEY AWS secret access key with access to a secondary AWS account for tests requiring multiple accounts. Requires AWS_ALTERNATE_ACCESS_KEY_ID . Conflicts with AWS_ALTERNATE_PROFILE . AWS_ALTERNATE_PROFILE AWS profile with access to a secondary AWS account for tests requiring multiple accounts. Conflicts with AWS_ALTERNATE_ACCESS_KEY_ID and AWS_ALTERNATE_SECRET_ACCESS_KEY . AWS_ALTERNATE_REGION Secondary AWS region for tests requiring multiple regions. Defaults to us-east-1 . AWS_API_GATEWAY_DOMAIN_NAME_CERTIFICATE_BODY Certificate body of publicly trusted certificate for API Gateway Domain Name testing. AWS_API_GATEWAY_DOMAIN_NAME_CERTIFICATE_CHAIN Certificate chain of publicly trusted certificate for API Gateway Domain Name testing. AWS_API_GATEWAY_DOMAIN_NAME_CERTIFICATE_PRIVATE_KEY Private key of publicly trusted certificate for API Gateway Domain Name testing. AWS_API_GATEWAY_DOMAIN_NAME_REGIONAL_CERTIFICATE_NAME_ENABLED Flag to enable API Gateway Domain Name regional certificate upload testing. AWS_CODEBUILD_BITBUCKET_SOURCE_LOCATION BitBucket source URL for CodeBuild testing. CodeBuild must have access to this repository via OAuth or Source Credentials. Defaults to https://terraform@bitbucket.org/terraform/aws-test.git . AWS_CODEBUILD_GITHUB_SOURCE_LOCATION GitHub source URL for CodeBuild testing. CodeBuild must have access to this repository via OAuth or Source Credentials. Defaults to https://github.com/hashibot-test/aws-test.git . AWS_DEFAULT_REGION Primary AWS region for tests. Defaults to us-west-2 . AWS_DETECTIVE_MEMBER_EMAIL Email address for Detective Member testing. A valid email address associated with an AWS root account is required for tests to pass. AWS_EC2_CLASSIC_REGION AWS region for EC2-Classic testing. Defaults to us-east-1 in AWS Commercial and AWS_DEFAULT_REGION otherwise. AWS_EC2_CLIENT_VPN_LIMIT Concurrency limit for Client VPN acceptance tests. Default is 5 if not specified. AWS_EC2_EIP_PUBLIC_IPV4_POOL Identifier for EC2 Public IPv4 Pool for EC2 EIP testing. AWS_GUARDDUTY_MEMBER_ACCOUNT_ID Identifier of AWS Account for GuardDuty Member testing. DEPRECATED: Should be replaced with standard alternate account handling for tests. AWS_GUARDDUTY_MEMBER_EMAIL Email address for GuardDuty Member testing. DEPRECATED: It may be possible to use a placeholder email address instead. AWS_LAMBDA_IMAGE_LATEST_ID ECR repository image URI (tagged as latest ) for Lambda container image acceptance tests. AWS_LAMBDA_IMAGE_V1_ID ECR repository image URI (tagged as v1 ) for Lambda container image acceptance tests. AWS_LAMBDA_IMAGE_V2_ID ECR repository image URI (tagged as v2 ) for Lambda container image acceptance tests. DX_CONNECTION_ID Identifier for Direct Connect Connection testing. DX_VIRTUAL_INTERFACE_ID Identifier for Direct Connect Virtual Interface testing. EC2_SECURITY_GROUP_RULES_PER_GROUP_LIMIT EC2 Quota for Rules per Security Group. Defaults to 50. DEPRECATED: Can be augmented or replaced with Service Quotas lookup. EVENT_BRIDGE_PARTNER_EVENT_BUS_NAME Amazon EventBridge partner event bus name. EVENT_BRIDGE_PARTNER_EVENT_SOURCE_NAME Amazon EventBridge partner event source name. GCM_API_KEY API Key for Google Cloud Messaging in Pinpoint and SNS Platform Application testing. GITHUB_TOKEN GitHub token for CodePipeline testing. GRAFANA_SSO_GROUP_ID AWS SSO group ID for Grafana testing. GRAFANA_SSO_USER_ID AWS SSO user ID for Grafana testing. MACIE_MEMBER_ACCOUNT_ID Identifier of AWS Account for Macie Member testing. DEPRECATED: Should be replaced with standard alternate account handling for tests. QUICKSIGHT_NAMESPACE QuickSight namespace name for testing. ROUTE53DOMAINS_DOMAIN_NAME Registered domain for Route 53 Domains testing. SAGEMAKER_IMAGE_VERSION_BASE_IMAGE SageMaker base image to use for tests. SERVICEQUOTAS_INCREASE_ON_CREATE_QUOTA_CODE Quota Code for Service Quotas testing (submits support case). SERVICEQUOTAS_INCREASE_ON_CREATE_SERVICE_CODE Service Code for Service Quotas testing (submits support case). SERVICEQUOTAS_INCREASE_ON_CREATE_VALUE Value of quota increase for Service Quotas testing (submits support case). SES_DOMAIN_IDENTITY_ROOT_DOMAIN Root domain name of publicly accessible and Route 53 configurable domain for SES Domain Identity testing. SWF_DOMAIN_TESTING_ENABLED Enables SWF Domain testing (API does not support deletions). TEST_AWS_ORGANIZATION_ACCOUNT_EMAIL_DOMAIN Email address for Organizations Account testing. TEST_AWS_SES_VERIFIED_EMAIL_ARN Verified SES Email Identity for use in Cognito User Pool testing. TF_ACC Enables Go tests containing resource.Test() and resource.ParallelTest() . TF_ACC_ASSUME_ROLE_ARN Amazon Resource Name of existing IAM Role to use for limited permissions acceptance testing. TF_TEST_CLOUDFRONT_RETAIN Flag to disable but dangle CloudFront Distributions during testing to reduce feedback time (must be manually destroyed afterwards)","title":"Environment Variable Dictionary"},{"location":"contributing/maintaining/#label-dictionary","text":"Label Description Automation Introduces a breaking change in current functionality; breaking changes are usually deferred to the next major release. None Addresses a defect in current functionality. None Results from or addresses a Terraform crash or kernel panic. None Used to indicate dependency changes. Added by Hashibot. Introduces or discusses updates to documentation. None Requests to existing resources that expand the functionality or scope. None Introduces or discusses updates to examples. None Call to action for new contributors looking for a place to start. Smaller or straightforward issues. None Call to action for Hacktoberfest (OSS Initiative). None Issues or PRs labelled with this are ignored by Hashibot. None Call to action for contributors. Indicates an area of the codebase we\u2019d like to expand/work on but don\u2019t have the bandwidth inside the team. None Waiting for first response or review from a maintainer. Added to all new issues or PRs by GitHub action in .github/workflows/issues.yml or PRs by Hashibot in .hashibot.hcl unless they were submitted by a maintainer. Introduces a new data source. None Introduces a new resrouce. None Proposes new design or functionality. None Pertains to the provider itself, rather than any interaction with AWS. Added by Hashibot when the code change is in an area configured in .hashibot.hcl Includes a question about existing functionality; most questions will be re-routed to discuss.hashicorp.com. None Pertains to a degraded workflow resulting from an upstream patch or internal enhancement; usually categorized as a bug. None Pertains to a service or feature announced at reinvent. None Indicates the service that is covered or introduced (i.e. service/s3) Added by Hashibot when the code change matches a service definition in .hashibot.hcl . Managed by automation to categorize the size of a PR Added by Hashibot to indicate the size of the PR. Old or inactive issues managed by automation, if no further action taken these will get closed. Added by a Github Action, configuration is found: .github/workflows/stale.yml . Addresses areas of the codebase that need refactoring or redesign. None On a PR this indicates expanded test coverage. On an Issue this proposes expanded coverage or enhancement to test infrastructure. None Requires additional research by the maintainers. None Addresses functionality related to the Terraform core binary. None Addresses functionality related to the cloud provider. None Maintainers are waiting on response from community or contributor. None","title":"Label Dictionary"},{"location":"contributing/maintaining/#release-process","text":"Create a milestone for the next release after this release (generally, the next milestone will be a minor version increase unless previously decided for a major or patch version) Check the existing release milestone for open items and either work through them or move them to the next milestone Run the HashiCorp (non-OSS) TeamCity release job either via: Slack command: /tcrelease aws #.#.# (no v prefix) Web interface: With the DEPLOYMENT_TARGET_VERSION matching the expected release milestone and DEPLOYMENT_NEXT_VERSION matching the next release milestone Wait for the TeamCity release job to complete either by watching the build logs or Slack notifications Close the release milestone Create a new GitHub release with the release title exactly matching the tag and milestone (e.g., v2.22.0 ) and copy the entries from the CHANGELOG to the release notes.","title":"Release Process"},{"location":"contributing/naming/","text":"Naming Conventions for the AWS Provider # Service Identifier Packages Resources and Data Sources Files MixedCaps Functions Variables and Constants Acceptance and Unit Tests Test Support Functions Acceptance Test Configurations Service Identifier # In the AWS Provider, a service identifier should consistently identify an AWS service from code to documentation to provider use by a practitioner. Prominent places you will see service identifiers: The package name (e.g., internal/service/<serviceidentifier> ) In resource and data source names (e.g., aws_<serviceidentifier>_thing ) Documentation file names (e.g., website/docs/r/<serviceidentifier>_thing ) Typically, choosing the AWS Provider identifier for a service is simple. AWS consistently uses one name and we use that name as the identifier. However, some services are not simple. To provide consistency, and to help contributors and practitioners know what to expect, we provide this rule for defining a service identifier: Rule # Determine the service package name for AWS Go SDK v2 . Determine the AWS CLI v2 command corresponding to the service (i.e., the word following aws in CLI commands; e.g., for aws sts get-caller-identity , sts is the command , get-caller-identity is the subcommand ). If the SDK and CLI agree, use that. If the service only exists in one, use that. If they differ, use the shorter of the two. Use lowercase letters and do not include any underscores ( _ ). How Well Is It Followed? # With 156+ services having some level of implementation, the following is a summary of how well this rule is currently followed. For AWS provider service package names, only five packages violate this rule: appautoscaling should be applicationautoscaling , codedeploy should be deploy , elasticsearch should be es , cloudwatchlogs should be logs , and simpledb should be sdb . For the service identifiers used in resource and data source configuration names (e.g., aws_acmpca_certificate_authority ), 32 wholly or partially violate the rule. EC2, ELB, ELBv2, and RDS have legacy but heavily used resources and data sources that do not or inconsistently use service identifiers. The remaining 28 services violate the rule in a consistent way: appautoscaling should be applicationautoscaling , codedeploy should be deploy , elasticsearch should be es , cloudwatch_log should be logs , simpledb should be sdb , prometheus should be amp , api_gateway should be apigateway , cloudcontrolapi should be cloudcontrol , cognito_identity should be cognitoidentity , cognito should be cognitoidp , config should be configservice , dx should be directconnect , directory_service should be ds , elastic_beanstalk should be elasticbeanstalk , cloudwatch_event should be events , kinesis_firehose should be firehose , msk should be kafka , mskconnect should be kafkaconnect , kinesis_analytics should be kinesisanalytics , kinesis_video should be kinesisvideo , lex should be lexmodels , media_convert should be mediaconvert , media_package should be mediapackage , media_store should be mediastore , route53_resolver should be route53resolver , relevant s3 should be s3control , serverlessapplicationrepository should be serverlessrepo , and service_discovery should be servicediscovery . Packages # Package names are not seen or used by practitioners. However, they should still be carefully considered. Rule # For service packages (i.e., packages under internal/service ), use the AWS Provider service identifier as the package name. For other packages, use a short name for the package. Common Go lengths are 3-9 characters. Use a descriptive name. The name should capture the key purpose of the package. Use lowercase letters and do not include any underscores ( _ ). Avoid useless names like helper . These names convey zero information. Everything in the AWS Provider is helping something or someone do something so the name helper doesn't narrow down the purpose of the package within the codebase. Use a name that is not too narrow or too broad as Go packages should not be too big or too small. Tiny packages can be combined using a broader name encompassing both. For example, verify is a good name because it tells you what the package does and allows a broad set of validation, comparison, and checking functionality. Resources and Data Sources # When creating a new resource or data source, it is important to get names right. Once practitioners rely on names, we can only change them through breaking changes. If you are unsure about what to call a resource or data source, discuss it with the community and maintainers. Rule # Follow the AWS SDK for Go v2 . Almost always, the API operations make determining the name simple. For example, the Amazon CloudWatch Evidently service includes CreateExperiment , GetExperiment , UpdateExperiment , and DeleteExperiment . Thus, the resource (or data source) name is \"Experiment.\" Give a resource its Terraform configuration (i.e., HCL) name (e.g., aws_imagebuilder_image_pipeline ) by joining these three parts with underscores: aws prefix Service identifier (service identifiers do not include underscores), all lower case (e.g., imagebuilder ) Resource (or data source) name in snake case (spaces replaced with underscores, if any), all lower case (e.g., image_pipeline ) Name the main resource function Resource<ResourceName>() , with the resource name in MixedCaps . Do not include the service name or identifier. For example, define ResourceImagePipeline() in a file called internal/service/imagebuilder/image_pipeline.go . Similarly, name the main data source function DataSource<ResourceName>() , with the data source name in MixedCaps . Do not include the service name or identifier. For example, define DataSourceImagePipeline() in a file called internal/service/imagebuilder/image_pipeline_data_source.go . Files # File names should follow Go and Markdown conventions with these additional points. Resource and Data Source Documentation Rule # Resource markdown goes in the website/docs/r directory. Data source markdown goes in the website/docs/d directory. Use the service identifier and resource or data source name, separated by an underscore ( _ ). All letters are lowercase. Use .html.markdown as the extension. Do not include \"aws\" in the name. A correct example is accessanalyzer_analyzer.html.markdown . An incorrect example is service_discovery_instance.html.markdown because the service identifier should not include an underscore. Go File Rule # Resource and data source files are in the internal/service/<service> directory. Do not include the service as part of the file name. Data sources should include _data_source after the data source name (e.g., application_data_source.go ). Put unit and acceptance tests in a file ending with _test.go (e.g., custom_domain_association_test.go ). Use snake case for multiword names (i.e., all letters are lowercase, words separated by underscores). Use the .go extension. Idiomatic names for common non-resource, non-data-source files include consts.go (service-wide constants), find.go (finders), flex.go (FLatteners and EXpanders), generate.go (directives for code generation), id.go (ID creators and parsers), status.go (status functions), sweep.go (sweepers), tags_gen.go (generated tag code), validate.go (validators), and wait.go (waiters). MixedCaps # Write multiword names in Go using MixedCaps (or mixedCaps ) rather than underscores. Initialisms and other abbreviations are a key difference between many camel/Pascal case interpretations and mixedCaps. Abbreviations in mixedCaps should be the correct, human-readable case. After all, names in code are for humans . (The mixedCaps convention aligns with HashiCorp's emphasis on pragmatism and beauty.) For example, an initialism such as \"VPC\" should either be all capitalized (\"VPC\") or all lower case (\"vpc\"), never \"Vpc\" or \"vPC.\" Similarly, in mixedCaps, \"DynamoDB\" should either be \"DynamoDB\" or \"dynamoDB\", depending on whether an initial cap is needed or not, and never \"dynamoDb\" or \"DynamoDb.\" Some services in the AWS SDK for Go, typically older services, do not follow this Go convention. Rule # Use mixedCaps for function, type, method, variable, and constant names in the Terraform AWS Provider Go code. Functions # In general, follow Go best practices for good function naming. This rule is for functions defined outside of the test context (i.e., not in a file ending with _test.go ). For test functions, see Test Support Functions or Acceptance Test Configurations below. Rule # Only export functions (capitalize) when necessary, i.e., when the function is used outside the current package, including in the _test ( .test ) package. Use MixedCaps (exported) or mixedCaps (not exported). Do not use underscores for multiwords. Do not include the service name in the function name. (If functions are used outside the current package, the import package clarifies a function's origin. For example, the EC2 function FindVPCEndpointByID() is used outside the internal/service/ec2 package but where it is used, the call is tfec2.FindVPCEndpointByID() .) For CRUD functions for resources, use this format: resource<ResourceName><CRUDFunction> . For example, resourceImageRecipeUpdate() , resourceBaiduChannelRead() . For data sources, for Read functions, use this format: dataSource<DataSourceName>Read . For example, dataSourceBrokerRead() , dataSourceEngineVersionRead() . To improve readability, consider including the resource name in helper function names that pertain only to that resource. For example, for an expander function for an \"App\" resource and a \"Campaign Hook\" expander, use expandAppCampaignHook() . Do not include \"AWS\" or \"Aws\" in the name. Variables and Constants # In general, follow Go best practices for good variable and constant naming. Rule # Only export variables and constants (capitalize) when necessary, i.e., the variable or constant is used outside the current package, including in the _test ( .test ) package. Use MixedCaps (exported) or mixedCaps (not exported). Do not use underscores for multiwords. Do not include the service name in variable or constant names. (If variables or constants are used outside the current package, the import package clarifies its origin. For example, IAM's PropagationTimeout is widely used outside of IAM but each instance is through the package import alias, tfiam.PropagationTimeout . \"IAM\" is unnecessary in the constant name.) To improve readability, consider including the resource name in variable and constant names that pertain only to that resource. For example, for a string constant for a \"Role\" resource and a \"not found\" status, use roleStatusNotFound or RoleStatusNotFound , if used outside the service's package. Do not include \"AWS\" or \"Aws\" in the name. NOTE: Give priority to using constants from the AWS SDK for Go rather than defining new constants for the same values. Acceptance and Unit Tests # With about 6000 acceptance and unit tests, following these naming conventions is essential to organization and (human) context switching between services. There are three types of tests in the AWS Provider: (regular) acceptance tests, serialized acceptance tests, and unit tests. All are functions that take a variable of type *testing.T . Acceptance tests and unit tests have exported (i.e., capitalized) names while serialized tests do not. Serialized tests are called by another exported acceptance test, often ending with _serial . The majority of tests in the AWS provider are acceptance tests. Acceptance Test Rule # Acceptance test names have a minimum of two (e.g., TestAccBackupPlan_tags ) or a maximum of three (e.g., TestAccDynamoDBTable_Replica_multiple ) parts, joined with underscores: First part: All have a prefix (i.e., TestAcc ), service name (e.g., Backup , DynamoDB ), and resource name (e.g., Plan , Table ), MixedCaps without underscores between. Do not include \"AWS\" or \"Aws\" in the name. Middle part (Optional): Test group (e.g., Replica ), uppercase, MixedCaps . Consider a metaphor where tests are chapters in a book. If it is helpful, tests can be grouped together like chapters in a book that are sometimes grouped into parts or sections of the book. Last part: Test identifier (e.g., basic , tags , or multiple ), lowercase, mixedCaps ). The identifier should make the test's purpose clear but be concise. For example, the identifier conflictsWithCloudFrontDefaultCertificate (41 characters) conveys no more information than conflictDefaultCertificate (26 characters), since \"CloudFront\" is implied and \"with\" is always implicit. Avoid words that convey no meaning or whose meaning is implied. For example, \"with\" (e.g., _withTags ) is not needed because we imply the name is telling us what the test is with . withTags can be simplified to tags . Serialized Acceptance Test Rule # The names of serialized acceptance tests follow the regular acceptance test name rule except serialized acceptance test names: Start with testAcc instead of TestAcc Do not include the name of the service (e.g., a serialized acceptance test would be called testAccApp_basic not testAccAmplifyApp_basic ). Unit Test Rule # Unit test names follow the same rule as acceptance test names except unit test names: Start with Test , not TestAcc Do not include the name of the service Usually do not have any underscores If they test a function, should include the function name (e.g., a unit test of ExpandListener() should be called TestExpandListener() ) Test Support Functions # This rule is for functions defined in the test context (i.e., in a file ending with _test.go ) that do not return a string with Terraform configuration. For non-test functions, see Functions above. Or, see Acceptance Test Configurations below. Rule # Only export functions (capitalize) when necessary, i.e., when the function is used outside the current package. This is very rare. Use MixedCaps (exported) or mixedCaps (not exported). Do not use underscores for multiwords. Do not include the service name in the function name. For example, testAccCheckAMPWorkspaceExists() should be named testAccCheckWorkspaceExists() instead, dropping the service name. Several types of support functions occur commonly and should follow these patterns: Destroy: testAccCheck<Resource>Destroy Disappears: testAccCheck<Resource>Disappears Exists: testAccCheck<Resource>Exists Not Recreated: testAccCheck<Resource>NotRecreated PreCheck: testAccPreCheck (often, only one PreCheck is needed per service so no resource name is needed) Recreated: testAccCheck<Resource>Recreated Do not include \"AWS\" or \"Aws\" in the name. Acceptance Test Configurations # This rule is for functions defined in the test context (i.e., in a file ending with _test.go ) that return a string with Terraform configuration. For test support functions, see Test Support Functions above. Or, for non-test functions, see Functions above. NOTE: This rule is not widely used currently. However, new functions and functions you change should follow it. Rule # Only export functions (capitalize) when necessary, i.e., when the function is used outside the current package. This is very rare. Use MixedCaps (exported) or mixedCaps (not exported). Do not use underscores for multiwords. Do not include the service name in the function name. Follow this pattern: testAccConfig<Resource>_<TestGroup>_<configDescription> _<TestGroup> is optional. Refer to the Acceptance Test Rule test group discussion. Especially when an acceptance test only uses one configuration, the <configDescription> should be the same as the test identifier discussed in the Acceptance Test Rule . Do not include \"AWS\" or \"Aws\" in the name.","title":"Naming Conventions for the AWS Provider"},{"location":"contributing/naming/#naming-conventions-for-the-aws-provider","text":"Service Identifier Packages Resources and Data Sources Files MixedCaps Functions Variables and Constants Acceptance and Unit Tests Test Support Functions Acceptance Test Configurations","title":"Naming Conventions for the AWS Provider"},{"location":"contributing/naming/#service-identifier","text":"In the AWS Provider, a service identifier should consistently identify an AWS service from code to documentation to provider use by a practitioner. Prominent places you will see service identifiers: The package name (e.g., internal/service/<serviceidentifier> ) In resource and data source names (e.g., aws_<serviceidentifier>_thing ) Documentation file names (e.g., website/docs/r/<serviceidentifier>_thing ) Typically, choosing the AWS Provider identifier for a service is simple. AWS consistently uses one name and we use that name as the identifier. However, some services are not simple. To provide consistency, and to help contributors and practitioners know what to expect, we provide this rule for defining a service identifier:","title":"Service Identifier"},{"location":"contributing/naming/#rule","text":"Determine the service package name for AWS Go SDK v2 . Determine the AWS CLI v2 command corresponding to the service (i.e., the word following aws in CLI commands; e.g., for aws sts get-caller-identity , sts is the command , get-caller-identity is the subcommand ). If the SDK and CLI agree, use that. If the service only exists in one, use that. If they differ, use the shorter of the two. Use lowercase letters and do not include any underscores ( _ ).","title":"Rule"},{"location":"contributing/naming/#how-well-is-it-followed","text":"With 156+ services having some level of implementation, the following is a summary of how well this rule is currently followed. For AWS provider service package names, only five packages violate this rule: appautoscaling should be applicationautoscaling , codedeploy should be deploy , elasticsearch should be es , cloudwatchlogs should be logs , and simpledb should be sdb . For the service identifiers used in resource and data source configuration names (e.g., aws_acmpca_certificate_authority ), 32 wholly or partially violate the rule. EC2, ELB, ELBv2, and RDS have legacy but heavily used resources and data sources that do not or inconsistently use service identifiers. The remaining 28 services violate the rule in a consistent way: appautoscaling should be applicationautoscaling , codedeploy should be deploy , elasticsearch should be es , cloudwatch_log should be logs , simpledb should be sdb , prometheus should be amp , api_gateway should be apigateway , cloudcontrolapi should be cloudcontrol , cognito_identity should be cognitoidentity , cognito should be cognitoidp , config should be configservice , dx should be directconnect , directory_service should be ds , elastic_beanstalk should be elasticbeanstalk , cloudwatch_event should be events , kinesis_firehose should be firehose , msk should be kafka , mskconnect should be kafkaconnect , kinesis_analytics should be kinesisanalytics , kinesis_video should be kinesisvideo , lex should be lexmodels , media_convert should be mediaconvert , media_package should be mediapackage , media_store should be mediastore , route53_resolver should be route53resolver , relevant s3 should be s3control , serverlessapplicationrepository should be serverlessrepo , and service_discovery should be servicediscovery .","title":"How Well Is It Followed?"},{"location":"contributing/naming/#packages","text":"Package names are not seen or used by practitioners. However, they should still be carefully considered.","title":"Packages"},{"location":"contributing/naming/#rule_1","text":"For service packages (i.e., packages under internal/service ), use the AWS Provider service identifier as the package name. For other packages, use a short name for the package. Common Go lengths are 3-9 characters. Use a descriptive name. The name should capture the key purpose of the package. Use lowercase letters and do not include any underscores ( _ ). Avoid useless names like helper . These names convey zero information. Everything in the AWS Provider is helping something or someone do something so the name helper doesn't narrow down the purpose of the package within the codebase. Use a name that is not too narrow or too broad as Go packages should not be too big or too small. Tiny packages can be combined using a broader name encompassing both. For example, verify is a good name because it tells you what the package does and allows a broad set of validation, comparison, and checking functionality.","title":"Rule"},{"location":"contributing/naming/#resources-and-data-sources","text":"When creating a new resource or data source, it is important to get names right. Once practitioners rely on names, we can only change them through breaking changes. If you are unsure about what to call a resource or data source, discuss it with the community and maintainers.","title":"Resources and Data Sources"},{"location":"contributing/naming/#rule_2","text":"Follow the AWS SDK for Go v2 . Almost always, the API operations make determining the name simple. For example, the Amazon CloudWatch Evidently service includes CreateExperiment , GetExperiment , UpdateExperiment , and DeleteExperiment . Thus, the resource (or data source) name is \"Experiment.\" Give a resource its Terraform configuration (i.e., HCL) name (e.g., aws_imagebuilder_image_pipeline ) by joining these three parts with underscores: aws prefix Service identifier (service identifiers do not include underscores), all lower case (e.g., imagebuilder ) Resource (or data source) name in snake case (spaces replaced with underscores, if any), all lower case (e.g., image_pipeline ) Name the main resource function Resource<ResourceName>() , with the resource name in MixedCaps . Do not include the service name or identifier. For example, define ResourceImagePipeline() in a file called internal/service/imagebuilder/image_pipeline.go . Similarly, name the main data source function DataSource<ResourceName>() , with the data source name in MixedCaps . Do not include the service name or identifier. For example, define DataSourceImagePipeline() in a file called internal/service/imagebuilder/image_pipeline_data_source.go .","title":"Rule"},{"location":"contributing/naming/#files","text":"File names should follow Go and Markdown conventions with these additional points.","title":"Files"},{"location":"contributing/naming/#resource-and-data-source-documentation-rule","text":"Resource markdown goes in the website/docs/r directory. Data source markdown goes in the website/docs/d directory. Use the service identifier and resource or data source name, separated by an underscore ( _ ). All letters are lowercase. Use .html.markdown as the extension. Do not include \"aws\" in the name. A correct example is accessanalyzer_analyzer.html.markdown . An incorrect example is service_discovery_instance.html.markdown because the service identifier should not include an underscore.","title":"Resource and Data Source Documentation Rule"},{"location":"contributing/naming/#go-file-rule","text":"Resource and data source files are in the internal/service/<service> directory. Do not include the service as part of the file name. Data sources should include _data_source after the data source name (e.g., application_data_source.go ). Put unit and acceptance tests in a file ending with _test.go (e.g., custom_domain_association_test.go ). Use snake case for multiword names (i.e., all letters are lowercase, words separated by underscores). Use the .go extension. Idiomatic names for common non-resource, non-data-source files include consts.go (service-wide constants), find.go (finders), flex.go (FLatteners and EXpanders), generate.go (directives for code generation), id.go (ID creators and parsers), status.go (status functions), sweep.go (sweepers), tags_gen.go (generated tag code), validate.go (validators), and wait.go (waiters).","title":"Go File Rule"},{"location":"contributing/naming/#mixedcaps","text":"Write multiword names in Go using MixedCaps (or mixedCaps ) rather than underscores. Initialisms and other abbreviations are a key difference between many camel/Pascal case interpretations and mixedCaps. Abbreviations in mixedCaps should be the correct, human-readable case. After all, names in code are for humans . (The mixedCaps convention aligns with HashiCorp's emphasis on pragmatism and beauty.) For example, an initialism such as \"VPC\" should either be all capitalized (\"VPC\") or all lower case (\"vpc\"), never \"Vpc\" or \"vPC.\" Similarly, in mixedCaps, \"DynamoDB\" should either be \"DynamoDB\" or \"dynamoDB\", depending on whether an initial cap is needed or not, and never \"dynamoDb\" or \"DynamoDb.\" Some services in the AWS SDK for Go, typically older services, do not follow this Go convention.","title":"MixedCaps"},{"location":"contributing/naming/#rule_3","text":"Use mixedCaps for function, type, method, variable, and constant names in the Terraform AWS Provider Go code.","title":"Rule"},{"location":"contributing/naming/#functions","text":"In general, follow Go best practices for good function naming. This rule is for functions defined outside of the test context (i.e., not in a file ending with _test.go ). For test functions, see Test Support Functions or Acceptance Test Configurations below.","title":"Functions"},{"location":"contributing/naming/#rule_4","text":"Only export functions (capitalize) when necessary, i.e., when the function is used outside the current package, including in the _test ( .test ) package. Use MixedCaps (exported) or mixedCaps (not exported). Do not use underscores for multiwords. Do not include the service name in the function name. (If functions are used outside the current package, the import package clarifies a function's origin. For example, the EC2 function FindVPCEndpointByID() is used outside the internal/service/ec2 package but where it is used, the call is tfec2.FindVPCEndpointByID() .) For CRUD functions for resources, use this format: resource<ResourceName><CRUDFunction> . For example, resourceImageRecipeUpdate() , resourceBaiduChannelRead() . For data sources, for Read functions, use this format: dataSource<DataSourceName>Read . For example, dataSourceBrokerRead() , dataSourceEngineVersionRead() . To improve readability, consider including the resource name in helper function names that pertain only to that resource. For example, for an expander function for an \"App\" resource and a \"Campaign Hook\" expander, use expandAppCampaignHook() . Do not include \"AWS\" or \"Aws\" in the name.","title":"Rule"},{"location":"contributing/naming/#variables-and-constants","text":"In general, follow Go best practices for good variable and constant naming.","title":"Variables and Constants"},{"location":"contributing/naming/#rule_5","text":"Only export variables and constants (capitalize) when necessary, i.e., the variable or constant is used outside the current package, including in the _test ( .test ) package. Use MixedCaps (exported) or mixedCaps (not exported). Do not use underscores for multiwords. Do not include the service name in variable or constant names. (If variables or constants are used outside the current package, the import package clarifies its origin. For example, IAM's PropagationTimeout is widely used outside of IAM but each instance is through the package import alias, tfiam.PropagationTimeout . \"IAM\" is unnecessary in the constant name.) To improve readability, consider including the resource name in variable and constant names that pertain only to that resource. For example, for a string constant for a \"Role\" resource and a \"not found\" status, use roleStatusNotFound or RoleStatusNotFound , if used outside the service's package. Do not include \"AWS\" or \"Aws\" in the name. NOTE: Give priority to using constants from the AWS SDK for Go rather than defining new constants for the same values.","title":"Rule"},{"location":"contributing/naming/#acceptance-and-unit-tests","text":"With about 6000 acceptance and unit tests, following these naming conventions is essential to organization and (human) context switching between services. There are three types of tests in the AWS Provider: (regular) acceptance tests, serialized acceptance tests, and unit tests. All are functions that take a variable of type *testing.T . Acceptance tests and unit tests have exported (i.e., capitalized) names while serialized tests do not. Serialized tests are called by another exported acceptance test, often ending with _serial . The majority of tests in the AWS provider are acceptance tests.","title":"Acceptance and Unit Tests"},{"location":"contributing/naming/#acceptance-test-rule","text":"Acceptance test names have a minimum of two (e.g., TestAccBackupPlan_tags ) or a maximum of three (e.g., TestAccDynamoDBTable_Replica_multiple ) parts, joined with underscores: First part: All have a prefix (i.e., TestAcc ), service name (e.g., Backup , DynamoDB ), and resource name (e.g., Plan , Table ), MixedCaps without underscores between. Do not include \"AWS\" or \"Aws\" in the name. Middle part (Optional): Test group (e.g., Replica ), uppercase, MixedCaps . Consider a metaphor where tests are chapters in a book. If it is helpful, tests can be grouped together like chapters in a book that are sometimes grouped into parts or sections of the book. Last part: Test identifier (e.g., basic , tags , or multiple ), lowercase, mixedCaps ). The identifier should make the test's purpose clear but be concise. For example, the identifier conflictsWithCloudFrontDefaultCertificate (41 characters) conveys no more information than conflictDefaultCertificate (26 characters), since \"CloudFront\" is implied and \"with\" is always implicit. Avoid words that convey no meaning or whose meaning is implied. For example, \"with\" (e.g., _withTags ) is not needed because we imply the name is telling us what the test is with . withTags can be simplified to tags .","title":"Acceptance Test Rule"},{"location":"contributing/naming/#serialized-acceptance-test-rule","text":"The names of serialized acceptance tests follow the regular acceptance test name rule except serialized acceptance test names: Start with testAcc instead of TestAcc Do not include the name of the service (e.g., a serialized acceptance test would be called testAccApp_basic not testAccAmplifyApp_basic ).","title":"Serialized Acceptance Test Rule"},{"location":"contributing/naming/#unit-test-rule","text":"Unit test names follow the same rule as acceptance test names except unit test names: Start with Test , not TestAcc Do not include the name of the service Usually do not have any underscores If they test a function, should include the function name (e.g., a unit test of ExpandListener() should be called TestExpandListener() )","title":"Unit Test Rule"},{"location":"contributing/naming/#test-support-functions","text":"This rule is for functions defined in the test context (i.e., in a file ending with _test.go ) that do not return a string with Terraform configuration. For non-test functions, see Functions above. Or, see Acceptance Test Configurations below.","title":"Test Support Functions"},{"location":"contributing/naming/#rule_6","text":"Only export functions (capitalize) when necessary, i.e., when the function is used outside the current package. This is very rare. Use MixedCaps (exported) or mixedCaps (not exported). Do not use underscores for multiwords. Do not include the service name in the function name. For example, testAccCheckAMPWorkspaceExists() should be named testAccCheckWorkspaceExists() instead, dropping the service name. Several types of support functions occur commonly and should follow these patterns: Destroy: testAccCheck<Resource>Destroy Disappears: testAccCheck<Resource>Disappears Exists: testAccCheck<Resource>Exists Not Recreated: testAccCheck<Resource>NotRecreated PreCheck: testAccPreCheck (often, only one PreCheck is needed per service so no resource name is needed) Recreated: testAccCheck<Resource>Recreated Do not include \"AWS\" or \"Aws\" in the name.","title":"Rule"},{"location":"contributing/naming/#acceptance-test-configurations","text":"This rule is for functions defined in the test context (i.e., in a file ending with _test.go ) that return a string with Terraform configuration. For test support functions, see Test Support Functions above. Or, for non-test functions, see Functions above. NOTE: This rule is not widely used currently. However, new functions and functions you change should follow it.","title":"Acceptance Test Configurations"},{"location":"contributing/naming/#rule_7","text":"Only export functions (capitalize) when necessary, i.e., when the function is used outside the current package. This is very rare. Use MixedCaps (exported) or mixedCaps (not exported). Do not use underscores for multiwords. Do not include the service name in the function name. Follow this pattern: testAccConfig<Resource>_<TestGroup>_<configDescription> _<TestGroup> is optional. Refer to the Acceptance Test Rule test group discussion. Especially when an acceptance test only uses one configuration, the <configDescription> should be the same as the test identifier discussed in the Acceptance Test Rule . Do not include \"AWS\" or \"Aws\" in the name.","title":"Rule"},{"location":"contributing/prioritization/","text":"How We Prioritize # Intro # What this document is # This document describes how we handle prioritization of work from a variety of input sources. Our focus is always to deliver tangible value to the practitioner on a predictable and frequent schedule, and we feel it is important to be transparent in how we weigh input in order to deliver on this goal. What this document is not # Due to the variety of input sources, the scale of the provider, and resource constraints, it is impossible to give a hard number on how each of the factors outlined in this document are weighted. Instead, the goal of the document is to give a transparent, but generalized assessment of each of the sources of input so that the community has a better idea of why things are prioritized the way they are. Additional information may be found in the FAQ . Prioritization # We prioritze work based on a number of factors, including community feedback, issue/PR reactions, as well as the source of the request. While community feedback is heavily weighted, there are times where other factors take precedence. By their nature, some factors are less visible to the community, and so are outlined here as a way to be as transparent as possible. Each of the sources of input are detailed below. Community # Our large community of practitioners are vocal and immensely productive in contributing to the provider codebase. Unfortunately our current team capacity means that we are unable to give every issue or pull request the same level of attention. This means we need to prioritize the issues that provide the most value to the greatest number of practitioners. We will always focus on the issues which have the most attention. The main rubric we have for assessing community wants is GitHub reactions. In addition to reactions, we look at comments, reactions to comments, and links to additional issues and PRs to help get a more holistic view of where the community stands. We try to ensure that for the issues where we have the most community support, we are responsive to that support and attempt to give timelines where-ever possible. Customer # Another source of work that must be weighted are escalations around particular feature requests and bugs from HashiCorp and AWS customers. Escalations typically come via several routes: Customer Support Sales Engineering AWS Solutions Architects contacting us on behalf of their clients. These reports flow into an internal board and are triaged on a weekly basis to determine whether the escalation request should be prioritized for an upcoming release or added to the backlog to monitor for additional community support. During triage, we verify whether a GitHub issue or PR exists for the request and will create one if it does not exist. In this way, these requests are visible to the community to some degree. An escalation coming from a customer does not necessarily guarantee that it will be prioritized over requests made by the community. Instead, we assess them based on the following rubric: Does the issue have considerable community support? Does the issue pertain to one of our Core Services ? By weighing these factors, we can make a call to determine whether, and how it is to be prioritized. Partner # AWS Service Teams and Partner representatives regularly contact us to discuss upcoming features or new services. This work is often done under an NDA, so usually needs to be done in private. Often the ask is to enable Terraform support or an upcoming feature or service. As with customer escalations, a request from a partner does not necessarily mean that it will be prioritized over other efforts; capacity restraints require us to prioritize major releases or prefer offerings in line with our core services . Internal # SDK/Core Updates # We endeavor to keep in step with all minor SDK releases, so these are automatically pulled in by our GitHub automation. Major releases normally include breaking changes and usually require us to bump the provider itself to a major version. We plan to make one major version change a year and try to avoid any more than that. Technical Debt # We always include capacity for technical debt work in every iteration, but engineers are free to include minor tech debt work on their own recognizance. For larger items, these are discussed and prioritized in an internal meeting aimed at reviewing technical debt. Adverse User Experience or Security Vulnerabilities # Issues with the provider that provide a poor user experience (bugs, crashes), or involve a threat to security are always prioritized for inclusion. The severity of these will determine how soon they are included for release.","title":"How We Prioritize"},{"location":"contributing/prioritization/#how-we-prioritize","text":"","title":"How We Prioritize"},{"location":"contributing/prioritization/#intro","text":"","title":"Intro"},{"location":"contributing/prioritization/#what-this-document-is","text":"This document describes how we handle prioritization of work from a variety of input sources. Our focus is always to deliver tangible value to the practitioner on a predictable and frequent schedule, and we feel it is important to be transparent in how we weigh input in order to deliver on this goal.","title":"What this document is"},{"location":"contributing/prioritization/#what-this-document-is-not","text":"Due to the variety of input sources, the scale of the provider, and resource constraints, it is impossible to give a hard number on how each of the factors outlined in this document are weighted. Instead, the goal of the document is to give a transparent, but generalized assessment of each of the sources of input so that the community has a better idea of why things are prioritized the way they are. Additional information may be found in the FAQ .","title":"What this document is not"},{"location":"contributing/prioritization/#prioritization","text":"We prioritze work based on a number of factors, including community feedback, issue/PR reactions, as well as the source of the request. While community feedback is heavily weighted, there are times where other factors take precedence. By their nature, some factors are less visible to the community, and so are outlined here as a way to be as transparent as possible. Each of the sources of input are detailed below.","title":"Prioritization"},{"location":"contributing/prioritization/#community","text":"Our large community of practitioners are vocal and immensely productive in contributing to the provider codebase. Unfortunately our current team capacity means that we are unable to give every issue or pull request the same level of attention. This means we need to prioritize the issues that provide the most value to the greatest number of practitioners. We will always focus on the issues which have the most attention. The main rubric we have for assessing community wants is GitHub reactions. In addition to reactions, we look at comments, reactions to comments, and links to additional issues and PRs to help get a more holistic view of where the community stands. We try to ensure that for the issues where we have the most community support, we are responsive to that support and attempt to give timelines where-ever possible.","title":"Community"},{"location":"contributing/prioritization/#customer","text":"Another source of work that must be weighted are escalations around particular feature requests and bugs from HashiCorp and AWS customers. Escalations typically come via several routes: Customer Support Sales Engineering AWS Solutions Architects contacting us on behalf of their clients. These reports flow into an internal board and are triaged on a weekly basis to determine whether the escalation request should be prioritized for an upcoming release or added to the backlog to monitor for additional community support. During triage, we verify whether a GitHub issue or PR exists for the request and will create one if it does not exist. In this way, these requests are visible to the community to some degree. An escalation coming from a customer does not necessarily guarantee that it will be prioritized over requests made by the community. Instead, we assess them based on the following rubric: Does the issue have considerable community support? Does the issue pertain to one of our Core Services ? By weighing these factors, we can make a call to determine whether, and how it is to be prioritized.","title":"Customer"},{"location":"contributing/prioritization/#partner","text":"AWS Service Teams and Partner representatives regularly contact us to discuss upcoming features or new services. This work is often done under an NDA, so usually needs to be done in private. Often the ask is to enable Terraform support or an upcoming feature or service. As with customer escalations, a request from a partner does not necessarily mean that it will be prioritized over other efforts; capacity restraints require us to prioritize major releases or prefer offerings in line with our core services .","title":"Partner"},{"location":"contributing/prioritization/#internal","text":"","title":"Internal"},{"location":"contributing/prioritization/#sdkcore-updates","text":"We endeavor to keep in step with all minor SDK releases, so these are automatically pulled in by our GitHub automation. Major releases normally include breaking changes and usually require us to bump the provider itself to a major version. We plan to make one major version change a year and try to avoid any more than that.","title":"SDK/Core Updates"},{"location":"contributing/prioritization/#technical-debt","text":"We always include capacity for technical debt work in every iteration, but engineers are free to include minor tech debt work on their own recognizance. For larger items, these are discussed and prioritized in an internal meeting aimed at reviewing technical debt.","title":"Technical Debt"},{"location":"contributing/prioritization/#adverse-user-experience-or-security-vulnerabilities","text":"Issues with the provider that provide a poor user experience (bugs, crashes), or involve a threat to security are always prioritized for inclusion. The severity of these will determine how soon they are included for release.","title":"Adverse User Experience or Security Vulnerabilities"},{"location":"contributing/provider-design/","text":"Provider Design # Please Note: This documentation is intended for Terraform AWS Provider code developers. Typical operators writing and applying Terraform configurations do not need to read or understand this material. The Terraform AWS Provider follows the guidelines established in the HashiCorp Provider Design Principles . That general documentation provides many high-level design points gleaned from years of experience with Terraform's design and implementation concepts. Sections below will expand on specific design details between that documentation and this provider, while others will capture other pertinent information that may not be covered there. Other pages of the contributing guide cover implementation details such as code, testing, and documentation specifics. API and SDK Boundary Infrastructure as Code Suitability Resource Type Considerations Authorization and Acceptance Resources Cross-Service Functionality Data Sources Plural Data Sources Singular Data Sources IAM Resource-Based Policy Resources Managing Resource Running State Task Execution and Waiter Resources Versioned Resources Other Considerations AWS Credential Exfiltration API and SDK Boundary # The AWS provider implements support for the AWS service APIs using the AWS Go SDK . The API and SDK limits extend to the provider. In general, SDK operations manage the lifecycle of AWS components, such as creating, describing, updating, and deleting a database. Operations do not usually handle functionality within those components, such as executing a query on a database. If you are interested in other APIs/SDKs, we invite you to view the many Terraform Providers available, as each has a community of domain expertise. Some examples of functionality that is not expected in this provider: Raw HTTP(S) handling. See the Terraform HTTP Provider and Terraform TLS Provider instead. Kubernetes resource management beyond the EKS service APIs. See the Terraform Kubernetes Provider instead. Active Directory or other protocol clients. See the Terraform Active Directory Provider and other available provider instead. Functionality that requires additional software beyond the Terraform AWS Provider to be installed on the host executing Terraform. This currently includes the AWS CLI. See the Terraform External Provider and other available providers instead. Infrastructure as Code Suitability # The provider maintainers' design goal is to cover as much of the AWS API as pragmatically possible. However, not every aspect of the API is compatible with an infrastructure-as-code (IaC) conception. If such limits affect you, we recommend that you open an AWS Support case and encourage others to do the same. Request that AWS components be made more self-contained and compatible with IaC. These AWS Support cases can also yield insights into the AWS service and API that are not well documented. Resource Type Considerations # Terraform resources work best as the smallest infrastructure blocks on which practitioners can build more complex configurations and abstractions, such as Terraform Modules . The general heuristic guiding when to implement a new Terraform resource for an aspect of AWS is whether the AWS service API provides create, read, update, and delete (CRUD) operations. However, not all AWS service API functionality falls cleanly into CRUD lifecycle management. In these situations, there is extra consideration necessary for properly mapping API operations to Terraform resources. This section highlights design patterns when to consider an implementation within a singular Terraform resource or as separate Terraform resources. Please note: the overall design and implementation across all AWS functionality is federated: individual services may implement concepts and use terminology differently. As such, this guide is not exhaustive. The aim is to provide general concepts and basic terminology that points contributors in the right direction, especially in understanding previous implementations. Authorization and Acceptance Resources # Some AWS services use an authorization-acceptance model for cross-account associations or access. Examples include: Direct Connect Association Proposals GuardDuty Member Invitations RAM Resource Share Associations Route 53 VPC Associations Security Hub Member Invitations Depending on the API and components, AWS uses two basic ways of creating cross-region and cross-account associations. One way is to generate an invitation (or proposal) identifier from one AWS account to another. Then in the other AWS account, that identifier is used to accept the invitation. The second way is configuring a reference to another AWS account identifier. These may not require explicit acceptance on the receiving account to finish creating the association or begin working. To model creating an association using an invitation or proposal, follow these guidelines. Follow the naming in the AWS service API to determine whether to use the term \"invitation\" or \"proposal.\" For the originating account, create an \"invitation\" or \"proposal\" resource. Make sure that the AWS service API has operations for creating and reading invitations. For the responding account, create an \"accepter\" resource. Ensure that the API has operations for accepting, reading, and rejecting invitations in the responding account. Map the operations as follows: Create: Accepts the invitation. Read: Reads the invitation to determine its status. Note that in some APIs, invitations expire and disappear, complicating associations. If a resource does not find an invitation, the developer should implement a fall back to read the API resource associated with the invitation/proposal. Delete: Rejects or otherwise deletes the invitation. To model the second type of association, implicit associations, create an \"association\" resource and, optionally, an \"authorization\" resource. Map create, read, and delete to the corresponding operations in the AWS service API. Cross-Service Functionality # Many AWS service APIs build on top of other AWS services. Some examples of these include: EKS Node Groups managing Auto Scaling Groups Lambda Functions managing EC2 ENIs Transfer Servers managing EC2 VPC Endpoints Some cross-service API implementations lack the management or description capabilities of the other service. The lack can make the Terraform resource implementation seem incomplete or unsuccessful in end-to-end configurations. Given the overall \u201cresources should represent a single API object\u201d goal from the HashiCorp Provider Design Principles , a resource must only communicate with a single AWS service API. As such, maintainers will not approve cross-service resources. The rationale behind this design decision includes the following: Unexpected IAM permissions being necessary for the resource. In high-security environments, all the service permissions may not be available or acceptable. Unexpected services generating CloudTrail logs for the resource. Needing extra and unexpected API endpoints configuration for organizations using custom endpoints, such as VPC endpoints. Unexpected changes to the AWS service internals for the cross-service implementations. Given that this functionality is not part of the primary service API, these details can change over time and may not be considered as a breaking change by the service team for an API upgrade. A poignant real-world example of the last point involved a Lambda resource. The resource helped clean up extra resources (ENIs) due to a common misconfiguration. Practitioners found the functionality helpful since the issue was hard to diagnose. Years later, AWS updated the Lambda API. Immediately, practitioners reported that Terraform executions were failing. Downgrading the provider was not possible since many configurations depended on recent releases. For environments running many versions behind, forcing an upgrade with the fix would likely cause unrelated and unexpected changes. In the end, HashiCorp and AWS performed a large-scale outreach to help upgrade and fixing the misconfigurations. Provider maintainers and practitioners lost considerable time. Data Sources # A separate class of Terraform resource types are data sources . These are typically intended as a configuration method to lookup or fetch data in a read-only manner. Data sources should not have side effects on the remote system. When discussing data sources, they are typically classified by the intended number of return objects or data. Singular data sources represent a one-to-one lookup or data operation. Plural data sources represent a one-to-many operation. Plural Data Sources # These data sources are intended to return zero, one, or many results, usually associated with a managed resource type. Typically results are a set unless ordering guarantees are provided by the remote system. These should be named with a plural suffix (e.g., s or es ) and should not include any specific attribute in the naming (e.g., prefer aws_ec2_transit_gateways instead of aws_ec2_transit_gateway_ids ). Singular Data Sources # These data sources are intended to return one result or an error. These should not include any specific attribute in the naming (e.g., prefer aws_ec2_transit_gateway instead of aws_ec2_transit_gateway_id ). IAM Resource-Based Policy Resources # For some AWS components, the AWS API allows specifying an IAM resource-based policy , the IAM policy to associate with a component. Some examples include: ECR Repository Policies EFS File System Policies SNS Topic Policies Provider developers should implement this capability in a new resource rather than adding it to the associated resource. Reasons for this include: Many of the policies must include the Amazon Resource Name (ARN) of the resource. Working around this requirement with custom difference handling within a self-contained resource is unnecessarily cumbersome. Some policies involving multiple resources need to cross-reference each other's ARNs. Without a separate resource, this introduces a configuration cycle. Splitting the resources allows operators to logically split their configurations into purely operational and security boundaries. This allows environments to have distinct practitioners roles and permissions for IAM versus infrastructure changes. One rare exception to this guideline is where the policy is required during resource creation. Managing Resource Running State # The AWS API provides the ability to start, stop, enable, or disable some AWS components. Some examples include: Batch Job Queues CloudFront Distributions RDS DB Event Subscriptions In this situation, provider developers should implement this ability within the resource instead of creating a separate resource. Since a practitioner cannot practically manage interaction with a resource's states in Terraform's declarative configuration, developers should implement the state management in the resource. This design provides consistency and future-proofing even where updating a resource in the current API is not problematic. Task Execution and Waiter Resources # Some AWS operations are asynchronous. Terraform requests that AWS perform a task. Initially, AWS only notifies Terraform that it received the request. Terraform then requests the status while awaiting completion. Examples of this include: ACM Certificate validation EC2 AMI copying RDS DB Cluster Snapshot management In this situation, provider developers should create a separate resource representing the task, assuming that the AWS service API provides operations to start the task and read its status. Adding the task functionality to the parent resource muddies its infrastructure-management purpose. The maintainers prefer this approach even though there is some duplication of an existing resource. For example, the provider has a resource for copying an EC2 AMI in addition to the EC2 AMI resource itself. This modularity allows practitioners to manage the result of the task resource with another resource. For a related consideration, see the Managing Resource Running State section . Versioned Resources # AWS supports having multiple versions of some components. Examples of this include: ECS Task Definitions Lambda Functions Secrets Manager Secrets In general, provider developers should create a separate resource to represent a single version. For example, the provider has both the aws_secretsmanager_secret and aws_secretsmanager_secret_version resources. However, in some cases, developers should handle versioning in the main resource. In deciding when to create a separate resource, follow these guidelines: If AWS necessarily creates a version when you make a new AWS component, include version handling in the same Terraform resource. Creating an AWS component with one Terraform resource and later using a different resource for updates is confusing. If the AWS service API allows deleting versions and practitioners will want to delete versions, provider developers should implement a separate version resource. If the API only supports publishing new versions, either method is acceptable, however most current implementations are self-contained. Terraform's current configuration language does not natively support triggering resource updates or recreation across resources without a state value change. This can make the implementation more difficult for practitioners without special resource and configuration workarounds, such as a triggers attribute. If this changes in the future, then this guidance may be updated towards separate resources, following the Task Execution and Waiter Resources guidance. Other Considerations # AWS Credential Exfiltration # In the interest of security, the maintainers will not approve data sources that provide the ability to reference or export the AWS credentials of the running provider. There are valid use cases for this information, such as to execute AWS CLI calls as part of the same Terraform configuration. However, this mechanism may allow credentials to be discovered and used outside of Terraform. Some specific concerns include: The values may be visible in Terraform user interface output or logging, allowing anyone with user interface or log access to see the credentials. The values are currently stored in plaintext in the Terraform state, allowing anyone with access to the state file or another Terraform configuration that references the state access to the credentials. Any new related functionality, while opt-in to implement, is also opt-in to prevent via security controls or policies. Adopting a weaker default security posture requires advance notice and prevents organizations that implement those controls from updating to a version with any such functionality.","title":"Provider Design"},{"location":"contributing/provider-design/#provider-design","text":"Please Note: This documentation is intended for Terraform AWS Provider code developers. Typical operators writing and applying Terraform configurations do not need to read or understand this material. The Terraform AWS Provider follows the guidelines established in the HashiCorp Provider Design Principles . That general documentation provides many high-level design points gleaned from years of experience with Terraform's design and implementation concepts. Sections below will expand on specific design details between that documentation and this provider, while others will capture other pertinent information that may not be covered there. Other pages of the contributing guide cover implementation details such as code, testing, and documentation specifics. API and SDK Boundary Infrastructure as Code Suitability Resource Type Considerations Authorization and Acceptance Resources Cross-Service Functionality Data Sources Plural Data Sources Singular Data Sources IAM Resource-Based Policy Resources Managing Resource Running State Task Execution and Waiter Resources Versioned Resources Other Considerations AWS Credential Exfiltration","title":"Provider Design"},{"location":"contributing/provider-design/#api-and-sdk-boundary","text":"The AWS provider implements support for the AWS service APIs using the AWS Go SDK . The API and SDK limits extend to the provider. In general, SDK operations manage the lifecycle of AWS components, such as creating, describing, updating, and deleting a database. Operations do not usually handle functionality within those components, such as executing a query on a database. If you are interested in other APIs/SDKs, we invite you to view the many Terraform Providers available, as each has a community of domain expertise. Some examples of functionality that is not expected in this provider: Raw HTTP(S) handling. See the Terraform HTTP Provider and Terraform TLS Provider instead. Kubernetes resource management beyond the EKS service APIs. See the Terraform Kubernetes Provider instead. Active Directory or other protocol clients. See the Terraform Active Directory Provider and other available provider instead. Functionality that requires additional software beyond the Terraform AWS Provider to be installed on the host executing Terraform. This currently includes the AWS CLI. See the Terraform External Provider and other available providers instead.","title":"API and SDK Boundary"},{"location":"contributing/provider-design/#infrastructure-as-code-suitability","text":"The provider maintainers' design goal is to cover as much of the AWS API as pragmatically possible. However, not every aspect of the API is compatible with an infrastructure-as-code (IaC) conception. If such limits affect you, we recommend that you open an AWS Support case and encourage others to do the same. Request that AWS components be made more self-contained and compatible with IaC. These AWS Support cases can also yield insights into the AWS service and API that are not well documented.","title":"Infrastructure as Code Suitability"},{"location":"contributing/provider-design/#resource-type-considerations","text":"Terraform resources work best as the smallest infrastructure blocks on which practitioners can build more complex configurations and abstractions, such as Terraform Modules . The general heuristic guiding when to implement a new Terraform resource for an aspect of AWS is whether the AWS service API provides create, read, update, and delete (CRUD) operations. However, not all AWS service API functionality falls cleanly into CRUD lifecycle management. In these situations, there is extra consideration necessary for properly mapping API operations to Terraform resources. This section highlights design patterns when to consider an implementation within a singular Terraform resource or as separate Terraform resources. Please note: the overall design and implementation across all AWS functionality is federated: individual services may implement concepts and use terminology differently. As such, this guide is not exhaustive. The aim is to provide general concepts and basic terminology that points contributors in the right direction, especially in understanding previous implementations.","title":"Resource Type Considerations"},{"location":"contributing/provider-design/#authorization-and-acceptance-resources","text":"Some AWS services use an authorization-acceptance model for cross-account associations or access. Examples include: Direct Connect Association Proposals GuardDuty Member Invitations RAM Resource Share Associations Route 53 VPC Associations Security Hub Member Invitations Depending on the API and components, AWS uses two basic ways of creating cross-region and cross-account associations. One way is to generate an invitation (or proposal) identifier from one AWS account to another. Then in the other AWS account, that identifier is used to accept the invitation. The second way is configuring a reference to another AWS account identifier. These may not require explicit acceptance on the receiving account to finish creating the association or begin working. To model creating an association using an invitation or proposal, follow these guidelines. Follow the naming in the AWS service API to determine whether to use the term \"invitation\" or \"proposal.\" For the originating account, create an \"invitation\" or \"proposal\" resource. Make sure that the AWS service API has operations for creating and reading invitations. For the responding account, create an \"accepter\" resource. Ensure that the API has operations for accepting, reading, and rejecting invitations in the responding account. Map the operations as follows: Create: Accepts the invitation. Read: Reads the invitation to determine its status. Note that in some APIs, invitations expire and disappear, complicating associations. If a resource does not find an invitation, the developer should implement a fall back to read the API resource associated with the invitation/proposal. Delete: Rejects or otherwise deletes the invitation. To model the second type of association, implicit associations, create an \"association\" resource and, optionally, an \"authorization\" resource. Map create, read, and delete to the corresponding operations in the AWS service API.","title":"Authorization and Acceptance Resources"},{"location":"contributing/provider-design/#cross-service-functionality","text":"Many AWS service APIs build on top of other AWS services. Some examples of these include: EKS Node Groups managing Auto Scaling Groups Lambda Functions managing EC2 ENIs Transfer Servers managing EC2 VPC Endpoints Some cross-service API implementations lack the management or description capabilities of the other service. The lack can make the Terraform resource implementation seem incomplete or unsuccessful in end-to-end configurations. Given the overall \u201cresources should represent a single API object\u201d goal from the HashiCorp Provider Design Principles , a resource must only communicate with a single AWS service API. As such, maintainers will not approve cross-service resources. The rationale behind this design decision includes the following: Unexpected IAM permissions being necessary for the resource. In high-security environments, all the service permissions may not be available or acceptable. Unexpected services generating CloudTrail logs for the resource. Needing extra and unexpected API endpoints configuration for organizations using custom endpoints, such as VPC endpoints. Unexpected changes to the AWS service internals for the cross-service implementations. Given that this functionality is not part of the primary service API, these details can change over time and may not be considered as a breaking change by the service team for an API upgrade. A poignant real-world example of the last point involved a Lambda resource. The resource helped clean up extra resources (ENIs) due to a common misconfiguration. Practitioners found the functionality helpful since the issue was hard to diagnose. Years later, AWS updated the Lambda API. Immediately, practitioners reported that Terraform executions were failing. Downgrading the provider was not possible since many configurations depended on recent releases. For environments running many versions behind, forcing an upgrade with the fix would likely cause unrelated and unexpected changes. In the end, HashiCorp and AWS performed a large-scale outreach to help upgrade and fixing the misconfigurations. Provider maintainers and practitioners lost considerable time.","title":"Cross-Service Functionality"},{"location":"contributing/provider-design/#data-sources","text":"A separate class of Terraform resource types are data sources . These are typically intended as a configuration method to lookup or fetch data in a read-only manner. Data sources should not have side effects on the remote system. When discussing data sources, they are typically classified by the intended number of return objects or data. Singular data sources represent a one-to-one lookup or data operation. Plural data sources represent a one-to-many operation.","title":"Data Sources"},{"location":"contributing/provider-design/#plural-data-sources","text":"These data sources are intended to return zero, one, or many results, usually associated with a managed resource type. Typically results are a set unless ordering guarantees are provided by the remote system. These should be named with a plural suffix (e.g., s or es ) and should not include any specific attribute in the naming (e.g., prefer aws_ec2_transit_gateways instead of aws_ec2_transit_gateway_ids ).","title":"Plural Data Sources"},{"location":"contributing/provider-design/#singular-data-sources","text":"These data sources are intended to return one result or an error. These should not include any specific attribute in the naming (e.g., prefer aws_ec2_transit_gateway instead of aws_ec2_transit_gateway_id ).","title":"Singular Data Sources"},{"location":"contributing/provider-design/#iam-resource-based-policy-resources","text":"For some AWS components, the AWS API allows specifying an IAM resource-based policy , the IAM policy to associate with a component. Some examples include: ECR Repository Policies EFS File System Policies SNS Topic Policies Provider developers should implement this capability in a new resource rather than adding it to the associated resource. Reasons for this include: Many of the policies must include the Amazon Resource Name (ARN) of the resource. Working around this requirement with custom difference handling within a self-contained resource is unnecessarily cumbersome. Some policies involving multiple resources need to cross-reference each other's ARNs. Without a separate resource, this introduces a configuration cycle. Splitting the resources allows operators to logically split their configurations into purely operational and security boundaries. This allows environments to have distinct practitioners roles and permissions for IAM versus infrastructure changes. One rare exception to this guideline is where the policy is required during resource creation.","title":"IAM Resource-Based Policy Resources"},{"location":"contributing/provider-design/#managing-resource-running-state","text":"The AWS API provides the ability to start, stop, enable, or disable some AWS components. Some examples include: Batch Job Queues CloudFront Distributions RDS DB Event Subscriptions In this situation, provider developers should implement this ability within the resource instead of creating a separate resource. Since a practitioner cannot practically manage interaction with a resource's states in Terraform's declarative configuration, developers should implement the state management in the resource. This design provides consistency and future-proofing even where updating a resource in the current API is not problematic.","title":"Managing Resource Running State"},{"location":"contributing/provider-design/#task-execution-and-waiter-resources","text":"Some AWS operations are asynchronous. Terraform requests that AWS perform a task. Initially, AWS only notifies Terraform that it received the request. Terraform then requests the status while awaiting completion. Examples of this include: ACM Certificate validation EC2 AMI copying RDS DB Cluster Snapshot management In this situation, provider developers should create a separate resource representing the task, assuming that the AWS service API provides operations to start the task and read its status. Adding the task functionality to the parent resource muddies its infrastructure-management purpose. The maintainers prefer this approach even though there is some duplication of an existing resource. For example, the provider has a resource for copying an EC2 AMI in addition to the EC2 AMI resource itself. This modularity allows practitioners to manage the result of the task resource with another resource. For a related consideration, see the Managing Resource Running State section .","title":"Task Execution and Waiter Resources"},{"location":"contributing/provider-design/#versioned-resources","text":"AWS supports having multiple versions of some components. Examples of this include: ECS Task Definitions Lambda Functions Secrets Manager Secrets In general, provider developers should create a separate resource to represent a single version. For example, the provider has both the aws_secretsmanager_secret and aws_secretsmanager_secret_version resources. However, in some cases, developers should handle versioning in the main resource. In deciding when to create a separate resource, follow these guidelines: If AWS necessarily creates a version when you make a new AWS component, include version handling in the same Terraform resource. Creating an AWS component with one Terraform resource and later using a different resource for updates is confusing. If the AWS service API allows deleting versions and practitioners will want to delete versions, provider developers should implement a separate version resource. If the API only supports publishing new versions, either method is acceptable, however most current implementations are self-contained. Terraform's current configuration language does not natively support triggering resource updates or recreation across resources without a state value change. This can make the implementation more difficult for practitioners without special resource and configuration workarounds, such as a triggers attribute. If this changes in the future, then this guidance may be updated towards separate resources, following the Task Execution and Waiter Resources guidance.","title":"Versioned Resources"},{"location":"contributing/provider-design/#other-considerations","text":"","title":"Other Considerations"},{"location":"contributing/provider-design/#aws-credential-exfiltration","text":"In the interest of security, the maintainers will not approve data sources that provide the ability to reference or export the AWS credentials of the running provider. There are valid use cases for this information, such as to execute AWS CLI calls as part of the same Terraform configuration. However, this mechanism may allow credentials to be discovered and used outside of Terraform. Some specific concerns include: The values may be visible in Terraform user interface output or logging, allowing anyone with user interface or log access to see the credentials. The values are currently stored in plaintext in the Terraform state, allowing anyone with access to the state file or another Terraform configuration that references the state access to the credentials. Any new related functionality, while opt-in to implement, is also opt-in to prevent via security controls or policies. Adopting a weaker default security posture requires advance notice and prevents organizations that implement those controls from updating to a version with any such functionality.","title":"AWS Credential Exfiltration"},{"location":"contributing/pullrequest-submission-and-lifecycle/","text":"Pull Request Submission and Lifecycle # Pull Request Lifecycle Branch Prefixes Common Review Items Go Coding Style Resource Contribution Guidelines Changelog Process We appreciate direct contributions to the provider codebase. Here's what to expect: For pull requests that follow the guidelines, we will proceed to reviewing and merging, following the provider team's review schedule. There may be some internal or community discussion needed before we can complete this. Pull requests that don't follow the guidelines will be commented with what they're missing. The person who submits the pull request or another community member will need to address those requests before they move forward. Pull Request Lifecycle # Note: For detailed information on how pull requests are prioritized, please see the prioritization guide . Fork the GitHub repository , modify the code, and create a pull request . You are welcome to submit your pull request for commentary or review before it is fully completed by creating a draft pull request or adding [WIP] to the beginning of the pull request title. Please include specific questions or items you'd like feedback on. Create a changelog entry following the process outlined here Once you believe your pull request is ready to be reviewed, ensure the pull request is not a draft pull request by marking it ready for review or removing [WIP] from the pull request title if necessary, and a maintainer will review it. Follow the contribution checklists to help ensure that your contribution can be easily reviewed and potentially merged. One of Terraform's provider team members will look over your contribution and either approve it or provide comments letting you know if there is anything left to do. We'll try give you the opportunity to make the required changes yourself, but in some cases we may perform the changes ourselves if it makes sense to (minor changes, or for urgent issues). We do our best to keep up with the volume of PRs waiting for review, but it may take some time depending on the complexity of the work. Once all outstanding comments and checklist items have been addressed, your contribution will be merged! Merged PRs will be included in the next Terraform release. In some cases, we might decide that a PR should be closed without merging. We'll make sure to provide clear reasoning when this happens. Branch Prefixes # We try to use a common set of branch name prefixes when submitting pull requests. Prefixes give us an idea of what the branch is for. For example, td-staticcheck-st1008 would let us know the branch was created to fix a technical debt issue, and f-aws_emr_instance_group-refactor would indicate a feature request for the aws_emr_instance_group resource that\u2019s being refactored. These are the prefixes we currently use: f = feature b = bug fix d = documentation t = tests td = technical debt v = dependencies (\"vendoring\" previously) Conventions across non-AWS providers varies so when working with other providers please check the names of previously created branches and conform to their standard practices. Common Review Items # The Terraform AWS Provider follows common practices to ensure consistent and reliable implementations across all resources in the project. While there may be older resource and testing code that predates these guidelines, new submissions are generally expected to adhere to these items to maintain Terraform Provider quality. For any guidelines listed, contributors are encouraged to ask any questions and community reviewers are encouraged to provide review suggestions based on these guidelines to speed up the review and merge process. Go Coding Style # All Go code is automatically checked for compliance with various linters, such as gofmt . These tools can be installed using the GNUMakefile in this repository. % cd terraform-provider-aws % make tools Check your code with the linters: % make lint gofmt will also fix many simple formatting issues for you. The Makefile includes a target for this: % make fmt The import statement in a Go file follows these rules (see #15903 ): Import declarations are grouped into a maximum of three groups with the following order: Standard packages (also called short import path or built-in packages) Third-party packages (also called long import path packages) Local packages Groups are separated by a single blank line Packages within each group are alphabetized Check your imports: % make importlint For greater detail, the following Go language resources provide common coding preferences that may be referenced during review, if not automatically handled by the project's linting tools. Effective Go Go Code Review Comments Resource Contribution Guidelines # The following resource checks need to be addressed before your contribution can be merged. The exclusion of any applicable check may result in a delayed time to merge. Some of these are not handled by the automated code testing that occurs during submission, so reviewers (even those outside the maintainers) are encouraged to reach out to contributors about any issues to save time. This Contribution Guide also includes separate sections on topics such as Error Handling , which also applies to contributions. [ ] Passes Testing : All code and documentation changes must pass unit testing, code linting, and website link testing. Resource code changes must pass all acceptance testing for the resource. [ ] Avoids API Calls Across Account, Region, and Service Boundaries : Resources should not implement cross-account, cross-region, or cross-service API calls. [ ] Avoids Optional and Required for Non-Configurable Attributes : Resource schema definitions for read-only attributes should not include Optional: true or Required: true . [ ] Avoids resource.Retry() without resource.RetryableError() : Resource logic should only implement resource.Retry() if there is a retryable condition (e.g., return resource.RetryableError(err) ). [ ] Avoids Resource Read Function in Data Source Read Function : Data sources should fully implement their own resource Read functionality including duplicating d.Set() calls. [ ] Avoids Reading Schema Structure in Resource Code : The resource Schema should not be read in resource Create / Read / Update / Delete functions to perform looping or otherwise complex attribute logic. Use d.Get() and d.Set() directly with individual attributes instead. [ ] Avoids ResourceData.GetOkExists() : Resource logic should avoid using ResourceData.GetOkExists() as its expected functionality is not guaranteed in all scenarios. [ ] Implements Read After Create and Update : Except where API eventual consistency prohibits immediate reading of resources or updated attributes, resource Create and Update functions should return the resource Read function. [ ] Implements Immediate Resource ID Set During Create : Immediately after calling the API creation function, the resource ID should be set with d.SetId() before other API operations or returning the Read function. [ ] Implements Attribute Refreshes During Read : All attributes available in the API should have d.Set() called their values in the Terraform state during the Read function. [ ] Implements Error Checks with Non-Primitive Attribute Refreshes : When using d.Set() with non-primitive types ( schema.TypeList , schema.TypeSet , or schema.TypeMap ), perform error checking to prevent issues where the code is not properly able to refresh the Terraform state . [ ] Implements Import Acceptance Testing and Documentation : Support for resource import ( Importer in resource schema) must include ImportState acceptance testing (see also the Acceptance Testing Guidelines ) and ## Import section in resource documentation. [ ] Implements Customizable Timeouts Documentation : Support for customizable timeouts ( Timeouts in resource schema) must include ## Timeouts section in resource documentation. [ ] Implements State Migration When Adding New Virtual Attribute : For new \"virtual\" attributes (those only in Terraform and not in the API), the schema should implement State Migration to prevent differences for existing configurations that upgrade. [ ] Uses AWS Go SDK Constants : Many AWS services provide string constants for value enumerations, error codes, and status types. See also the \"Constants\" sections under each of the service packages in the AWS Go SDK documentation . [ ] Uses AWS Go SDK Pointer Conversion Functions : Many APIs return pointer types and these functions return the zero value for the type if the pointer is nil . This prevents potential panics from unchecked * pointer dereferences and can eliminate boilerplate nil checking in many cases. See also the aws package in the AWS Go SDK documentation . [ ] Uses AWS Go SDK Types : Use available SDK structs instead of implementing custom types with indirection. [ ] Uses Existing Validation Functions : Schema definitions including ValidateFunc for attribute validation should use available Terraform helper/validation package functions. All() / Any() can be used for combining multiple validation function behaviors. [ ] Uses tfresource.TimedOut() with resource.Retry() : Resource logic implementing resource.Retry() should error check with tfresource.TimedOut(err error) and potentially unset the error before returning the error. For example: var output * kms . CreateKeyOutput err := resource . Retry ( 1 * time . Minute , func () * resource . RetryError { var err error output , err = conn . CreateKey ( input ) /* ... */ return nil }) if tfresource . TimedOut ( err ) { output , err = conn . CreateKey ( input ) } if err != nil { return fmt . Errorf ( \"error creating KMS External Key: %s\" , err ) } [ ] Uses resource.UniqueId() : API fields for concurrency protection such as CallerReference and IdempotencyToken should use resource.UniqueId() . The implementation includes a monotonic counter which is safer for concurrent operations than solutions such as time.Now() . [ ] Skips id Attribute : The id attribute is implicit for all Terraform resources and does not need to be defined in the schema. The below are style-based items that may be noted during review and are recommended for simplicity, consistency, and quality assurance: [ ] Avoids CustomizeDiff : Usage of CustomizeDiff is generally discouraged. [ ] Implements arn Attribute : APIs that return an Amazon Resource Name (ARN) should implement arn as an attribute. Alternatively, the ARN can be synthesized using the AWS Go SDK arn.ARN structure. For example: // Direct Connect Virtual Interface ARN. // See https://docs.aws.amazon.com/directconnect/latest/UserGuide/security_iam_service-with-iam.html#security_iam_service-with-iam-id-based-policies-resources. arn := arn . ARN { Partition : meta .( * AWSClient ). partition , Region : meta .( * AWSClient ). region , Service : \"directconnect\" , AccountID : meta .( * AWSClient ). accountid , Resource : fmt . Sprintf ( \"dxvif/%s\" , d . Id ()), }. String () d . Set ( \"arn\" , arn ) When the arn attribute is synthesized this way, add the resource to the list of those affected by the provider's skip_requesting_account_id attribute. [ ] Implements Warning Logging With Resource State Removal : If a resource is removed outside of Terraform (e.g., via different tool, API, or web UI), d.SetId(\"\") and return nil can be used in the resource Read function to trigger resource recreation. When this occurs, a warning log message should be printed beforehand: log.Printf(\"[WARN] {SERVICE} {THING} (%s) not found, removing from state\", d.Id()) [ ] Uses American English for Attribute Naming : For any ambiguity with attribute naming, prefer American English over British English. e.g., color instead of colour . [ ] Skips Timestamp Attributes : Generally, creation and modification dates from the API should be omitted from the schema. [ ] Uses Paginated AWS Go SDK Functions When Iterating Over a Collection of Objects : When the API for listing a collection of objects provides a paginated function, use it instead of looping until the next page token is not set. For example, with the EC2 API, DescribeInstancesPages should be used instead of DescribeInstances when more than one result is expected. [ ] Adds Paginated Functions Missing from the AWS Go SDK to Internal Service Package : If the AWS Go SDK does not define a paginated equivalent for a function to list a collection of objects, it should be added to a per-service internal package using the listpages generator . A support case should also be opened with AWS to have the paginated functions added to the AWS Go SDK. Changelog Process # HashiCorp\u2019s open-source projects have always maintained user-friendly, readable CHANGELOGs that allow users to tell at a glance whether a release should have any effect on them, and to gauge the risk of an upgrade. We use the go-changelog to generate and update the changelog from files created in the .changelog/ directory. It is important that when you raise your Pull Request, there is a changelog entry which describes the changes your contribution makes. Not all changes require an entry in the CHANGELOG, guidance follows on what changes do. Changelog Format # The changelog format requires an entry in the following format, where HEADER corresponds to the changelog category, and the entry is the changelog entry itself. The entry should be included in a file in the .changelog directory with the naming convention {PR-NUMBER}.txt . For example, to create a changelog entry for pull request 1234, there should be a file named .changelog/1234.txt . ```release-note:{HEADER} {ENTRY} ``` If a pull request should contain multiple changelog entries, then multiple blocks can be added to the same changelog file. For example: ```release-note:note resource/aws_example_thing: The `broken` attribute has been deprecated. All configurations using `broken` should be updated to use the new `not_broken` attribute instead. ``` ```release-note:enhancement resource/aws_example_thing: Add `not_broken` attribute ``` Pull Request Types to CHANGELOG # The CHANGELOG is intended to show operator-impacting changes to the codebase for a particular version. If every change or commit to the code resulted in an entry, the CHANGELOG would become less useful for operators. The lists below are general guidelines and examples for when a decision needs to be made to decide whether a change should have an entry. Changes that should have a CHANGELOG entry # New resource # A new resource entry should only contain the name of the resource, and use the release-note:new-resource header. ```release-note:new-resource aws_secretsmanager_secret_policy ``` New data source # A new datasource entry should only contain the name of the datasource, and use the release-note:new-data-source header. ```release-note:new-data-source aws_workspaces_workspace ``` New full-length documentation guides (e.g., EKS Getting Started Guide, IAM Policy Documents with Terraform) # A new full length documentation entry gives the title of the documentation added, using the release-note:new-guide header. ```release-note:new-guide Custom Service Endpoint Configuration ``` Resource and provider bug fixes # A new bug entry should use the release-note:bug header and have a prefix indicating the resource or datasource it corresponds to, a colon, then followed by a brief summary. Use a provider prefix for provider level fixes. ```release-note:bug resource/aws_glue_classifier: Fix quote_symbol being optional ``` Resource and provider enhancements # A new enhancement entry should use the release-note:enhancement header and have a prefix indicating the resource or datasource it corresponds to, a colon, then followed by a brief summary. Use a provider prefix for provider level enchancements. ```release-note:enhancement resource/aws_eip: Add network_border_group argument ``` Deprecations # A breaking-change entry should use the release-note:note header and have a prefix indicating the resource or datasource it corresponds to, a colon, then followed by a brief summary. Use a provider prefix for provider level changes. ```release-note:note resource/aws_dx_gateway_association: The vpn_gateway_id attribute is being deprecated in favor of the new associated_gateway_id attribute to support transit gateway associations ``` Breaking Changes and Removals # A breaking-change entry should use the release-note:breaking-change header and have a prefix indicating the resource or datasource it corresponds to, a colon, then followed by a brief summary. Use a provider prefix for provider level changes. ```release-note:breaking-change resource/aws_lambda_alias: Resource import no longer converts Lambda Function name to ARN ``` Changes that may have a CHANGELOG entry # Dependency updates: If the update contains relevant bug fixes or enhancements that affect operators, those should be called out. Any changes which do not fit into the above categories but warrant highlighting. Use resource/datasource/provider prefixes where appropriate. ```release-note:note resource/aws_lambda_alias: Resource import no longer converts Lambda Function name to ARN ``` Changes that should not have a CHANGELOG entry # Resource and provider documentation updates Testing updates Code refactoring","title":"Pull Request Submission and Lifecycle"},{"location":"contributing/pullrequest-submission-and-lifecycle/#pull-request-submission-and-lifecycle","text":"Pull Request Lifecycle Branch Prefixes Common Review Items Go Coding Style Resource Contribution Guidelines Changelog Process We appreciate direct contributions to the provider codebase. Here's what to expect: For pull requests that follow the guidelines, we will proceed to reviewing and merging, following the provider team's review schedule. There may be some internal or community discussion needed before we can complete this. Pull requests that don't follow the guidelines will be commented with what they're missing. The person who submits the pull request or another community member will need to address those requests before they move forward.","title":"Pull Request Submission and Lifecycle"},{"location":"contributing/pullrequest-submission-and-lifecycle/#pull-request-lifecycle","text":"Note: For detailed information on how pull requests are prioritized, please see the prioritization guide . Fork the GitHub repository , modify the code, and create a pull request . You are welcome to submit your pull request for commentary or review before it is fully completed by creating a draft pull request or adding [WIP] to the beginning of the pull request title. Please include specific questions or items you'd like feedback on. Create a changelog entry following the process outlined here Once you believe your pull request is ready to be reviewed, ensure the pull request is not a draft pull request by marking it ready for review or removing [WIP] from the pull request title if necessary, and a maintainer will review it. Follow the contribution checklists to help ensure that your contribution can be easily reviewed and potentially merged. One of Terraform's provider team members will look over your contribution and either approve it or provide comments letting you know if there is anything left to do. We'll try give you the opportunity to make the required changes yourself, but in some cases we may perform the changes ourselves if it makes sense to (minor changes, or for urgent issues). We do our best to keep up with the volume of PRs waiting for review, but it may take some time depending on the complexity of the work. Once all outstanding comments and checklist items have been addressed, your contribution will be merged! Merged PRs will be included in the next Terraform release. In some cases, we might decide that a PR should be closed without merging. We'll make sure to provide clear reasoning when this happens.","title":"Pull Request Lifecycle"},{"location":"contributing/pullrequest-submission-and-lifecycle/#branch-prefixes","text":"We try to use a common set of branch name prefixes when submitting pull requests. Prefixes give us an idea of what the branch is for. For example, td-staticcheck-st1008 would let us know the branch was created to fix a technical debt issue, and f-aws_emr_instance_group-refactor would indicate a feature request for the aws_emr_instance_group resource that\u2019s being refactored. These are the prefixes we currently use: f = feature b = bug fix d = documentation t = tests td = technical debt v = dependencies (\"vendoring\" previously) Conventions across non-AWS providers varies so when working with other providers please check the names of previously created branches and conform to their standard practices.","title":"Branch Prefixes"},{"location":"contributing/pullrequest-submission-and-lifecycle/#common-review-items","text":"The Terraform AWS Provider follows common practices to ensure consistent and reliable implementations across all resources in the project. While there may be older resource and testing code that predates these guidelines, new submissions are generally expected to adhere to these items to maintain Terraform Provider quality. For any guidelines listed, contributors are encouraged to ask any questions and community reviewers are encouraged to provide review suggestions based on these guidelines to speed up the review and merge process.","title":"Common Review Items"},{"location":"contributing/pullrequest-submission-and-lifecycle/#go-coding-style","text":"All Go code is automatically checked for compliance with various linters, such as gofmt . These tools can be installed using the GNUMakefile in this repository. % cd terraform-provider-aws % make tools Check your code with the linters: % make lint gofmt will also fix many simple formatting issues for you. The Makefile includes a target for this: % make fmt The import statement in a Go file follows these rules (see #15903 ): Import declarations are grouped into a maximum of three groups with the following order: Standard packages (also called short import path or built-in packages) Third-party packages (also called long import path packages) Local packages Groups are separated by a single blank line Packages within each group are alphabetized Check your imports: % make importlint For greater detail, the following Go language resources provide common coding preferences that may be referenced during review, if not automatically handled by the project's linting tools. Effective Go Go Code Review Comments","title":"Go Coding Style"},{"location":"contributing/pullrequest-submission-and-lifecycle/#resource-contribution-guidelines","text":"The following resource checks need to be addressed before your contribution can be merged. The exclusion of any applicable check may result in a delayed time to merge. Some of these are not handled by the automated code testing that occurs during submission, so reviewers (even those outside the maintainers) are encouraged to reach out to contributors about any issues to save time. This Contribution Guide also includes separate sections on topics such as Error Handling , which also applies to contributions. [ ] Passes Testing : All code and documentation changes must pass unit testing, code linting, and website link testing. Resource code changes must pass all acceptance testing for the resource. [ ] Avoids API Calls Across Account, Region, and Service Boundaries : Resources should not implement cross-account, cross-region, or cross-service API calls. [ ] Avoids Optional and Required for Non-Configurable Attributes : Resource schema definitions for read-only attributes should not include Optional: true or Required: true . [ ] Avoids resource.Retry() without resource.RetryableError() : Resource logic should only implement resource.Retry() if there is a retryable condition (e.g., return resource.RetryableError(err) ). [ ] Avoids Resource Read Function in Data Source Read Function : Data sources should fully implement their own resource Read functionality including duplicating d.Set() calls. [ ] Avoids Reading Schema Structure in Resource Code : The resource Schema should not be read in resource Create / Read / Update / Delete functions to perform looping or otherwise complex attribute logic. Use d.Get() and d.Set() directly with individual attributes instead. [ ] Avoids ResourceData.GetOkExists() : Resource logic should avoid using ResourceData.GetOkExists() as its expected functionality is not guaranteed in all scenarios. [ ] Implements Read After Create and Update : Except where API eventual consistency prohibits immediate reading of resources or updated attributes, resource Create and Update functions should return the resource Read function. [ ] Implements Immediate Resource ID Set During Create : Immediately after calling the API creation function, the resource ID should be set with d.SetId() before other API operations or returning the Read function. [ ] Implements Attribute Refreshes During Read : All attributes available in the API should have d.Set() called their values in the Terraform state during the Read function. [ ] Implements Error Checks with Non-Primitive Attribute Refreshes : When using d.Set() with non-primitive types ( schema.TypeList , schema.TypeSet , or schema.TypeMap ), perform error checking to prevent issues where the code is not properly able to refresh the Terraform state . [ ] Implements Import Acceptance Testing and Documentation : Support for resource import ( Importer in resource schema) must include ImportState acceptance testing (see also the Acceptance Testing Guidelines ) and ## Import section in resource documentation. [ ] Implements Customizable Timeouts Documentation : Support for customizable timeouts ( Timeouts in resource schema) must include ## Timeouts section in resource documentation. [ ] Implements State Migration When Adding New Virtual Attribute : For new \"virtual\" attributes (those only in Terraform and not in the API), the schema should implement State Migration to prevent differences for existing configurations that upgrade. [ ] Uses AWS Go SDK Constants : Many AWS services provide string constants for value enumerations, error codes, and status types. See also the \"Constants\" sections under each of the service packages in the AWS Go SDK documentation . [ ] Uses AWS Go SDK Pointer Conversion Functions : Many APIs return pointer types and these functions return the zero value for the type if the pointer is nil . This prevents potential panics from unchecked * pointer dereferences and can eliminate boilerplate nil checking in many cases. See also the aws package in the AWS Go SDK documentation . [ ] Uses AWS Go SDK Types : Use available SDK structs instead of implementing custom types with indirection. [ ] Uses Existing Validation Functions : Schema definitions including ValidateFunc for attribute validation should use available Terraform helper/validation package functions. All() / Any() can be used for combining multiple validation function behaviors. [ ] Uses tfresource.TimedOut() with resource.Retry() : Resource logic implementing resource.Retry() should error check with tfresource.TimedOut(err error) and potentially unset the error before returning the error. For example: var output * kms . CreateKeyOutput err := resource . Retry ( 1 * time . Minute , func () * resource . RetryError { var err error output , err = conn . CreateKey ( input ) /* ... */ return nil }) if tfresource . TimedOut ( err ) { output , err = conn . CreateKey ( input ) } if err != nil { return fmt . Errorf ( \"error creating KMS External Key: %s\" , err ) } [ ] Uses resource.UniqueId() : API fields for concurrency protection such as CallerReference and IdempotencyToken should use resource.UniqueId() . The implementation includes a monotonic counter which is safer for concurrent operations than solutions such as time.Now() . [ ] Skips id Attribute : The id attribute is implicit for all Terraform resources and does not need to be defined in the schema. The below are style-based items that may be noted during review and are recommended for simplicity, consistency, and quality assurance: [ ] Avoids CustomizeDiff : Usage of CustomizeDiff is generally discouraged. [ ] Implements arn Attribute : APIs that return an Amazon Resource Name (ARN) should implement arn as an attribute. Alternatively, the ARN can be synthesized using the AWS Go SDK arn.ARN structure. For example: // Direct Connect Virtual Interface ARN. // See https://docs.aws.amazon.com/directconnect/latest/UserGuide/security_iam_service-with-iam.html#security_iam_service-with-iam-id-based-policies-resources. arn := arn . ARN { Partition : meta .( * AWSClient ). partition , Region : meta .( * AWSClient ). region , Service : \"directconnect\" , AccountID : meta .( * AWSClient ). accountid , Resource : fmt . Sprintf ( \"dxvif/%s\" , d . Id ()), }. String () d . Set ( \"arn\" , arn ) When the arn attribute is synthesized this way, add the resource to the list of those affected by the provider's skip_requesting_account_id attribute. [ ] Implements Warning Logging With Resource State Removal : If a resource is removed outside of Terraform (e.g., via different tool, API, or web UI), d.SetId(\"\") and return nil can be used in the resource Read function to trigger resource recreation. When this occurs, a warning log message should be printed beforehand: log.Printf(\"[WARN] {SERVICE} {THING} (%s) not found, removing from state\", d.Id()) [ ] Uses American English for Attribute Naming : For any ambiguity with attribute naming, prefer American English over British English. e.g., color instead of colour . [ ] Skips Timestamp Attributes : Generally, creation and modification dates from the API should be omitted from the schema. [ ] Uses Paginated AWS Go SDK Functions When Iterating Over a Collection of Objects : When the API for listing a collection of objects provides a paginated function, use it instead of looping until the next page token is not set. For example, with the EC2 API, DescribeInstancesPages should be used instead of DescribeInstances when more than one result is expected. [ ] Adds Paginated Functions Missing from the AWS Go SDK to Internal Service Package : If the AWS Go SDK does not define a paginated equivalent for a function to list a collection of objects, it should be added to a per-service internal package using the listpages generator . A support case should also be opened with AWS to have the paginated functions added to the AWS Go SDK.","title":"Resource Contribution Guidelines"},{"location":"contributing/pullrequest-submission-and-lifecycle/#changelog-process","text":"HashiCorp\u2019s open-source projects have always maintained user-friendly, readable CHANGELOGs that allow users to tell at a glance whether a release should have any effect on them, and to gauge the risk of an upgrade. We use the go-changelog to generate and update the changelog from files created in the .changelog/ directory. It is important that when you raise your Pull Request, there is a changelog entry which describes the changes your contribution makes. Not all changes require an entry in the CHANGELOG, guidance follows on what changes do.","title":"Changelog Process"},{"location":"contributing/pullrequest-submission-and-lifecycle/#changelog-format","text":"The changelog format requires an entry in the following format, where HEADER corresponds to the changelog category, and the entry is the changelog entry itself. The entry should be included in a file in the .changelog directory with the naming convention {PR-NUMBER}.txt . For example, to create a changelog entry for pull request 1234, there should be a file named .changelog/1234.txt . ```release-note:{HEADER} {ENTRY} ``` If a pull request should contain multiple changelog entries, then multiple blocks can be added to the same changelog file. For example: ```release-note:note resource/aws_example_thing: The `broken` attribute has been deprecated. All configurations using `broken` should be updated to use the new `not_broken` attribute instead. ``` ```release-note:enhancement resource/aws_example_thing: Add `not_broken` attribute ```","title":"Changelog Format"},{"location":"contributing/pullrequest-submission-and-lifecycle/#pull-request-types-to-changelog","text":"The CHANGELOG is intended to show operator-impacting changes to the codebase for a particular version. If every change or commit to the code resulted in an entry, the CHANGELOG would become less useful for operators. The lists below are general guidelines and examples for when a decision needs to be made to decide whether a change should have an entry.","title":"Pull Request Types to CHANGELOG"},{"location":"contributing/pullrequest-submission-and-lifecycle/#changes-that-should-have-a-changelog-entry","text":"","title":"Changes that should have a CHANGELOG entry"},{"location":"contributing/pullrequest-submission-and-lifecycle/#new-resource","text":"A new resource entry should only contain the name of the resource, and use the release-note:new-resource header. ```release-note:new-resource aws_secretsmanager_secret_policy ```","title":"New resource"},{"location":"contributing/pullrequest-submission-and-lifecycle/#new-data-source","text":"A new datasource entry should only contain the name of the datasource, and use the release-note:new-data-source header. ```release-note:new-data-source aws_workspaces_workspace ```","title":"New data source"},{"location":"contributing/pullrequest-submission-and-lifecycle/#new-full-length-documentation-guides-eg-eks-getting-started-guide-iam-policy-documents-with-terraform","text":"A new full length documentation entry gives the title of the documentation added, using the release-note:new-guide header. ```release-note:new-guide Custom Service Endpoint Configuration ```","title":"New full-length documentation guides (e.g., EKS Getting Started Guide, IAM Policy Documents with Terraform)"},{"location":"contributing/pullrequest-submission-and-lifecycle/#resource-and-provider-bug-fixes","text":"A new bug entry should use the release-note:bug header and have a prefix indicating the resource or datasource it corresponds to, a colon, then followed by a brief summary. Use a provider prefix for provider level fixes. ```release-note:bug resource/aws_glue_classifier: Fix quote_symbol being optional ```","title":"Resource and provider bug fixes"},{"location":"contributing/pullrequest-submission-and-lifecycle/#resource-and-provider-enhancements","text":"A new enhancement entry should use the release-note:enhancement header and have a prefix indicating the resource or datasource it corresponds to, a colon, then followed by a brief summary. Use a provider prefix for provider level enchancements. ```release-note:enhancement resource/aws_eip: Add network_border_group argument ```","title":"Resource and provider enhancements"},{"location":"contributing/pullrequest-submission-and-lifecycle/#deprecations","text":"A breaking-change entry should use the release-note:note header and have a prefix indicating the resource or datasource it corresponds to, a colon, then followed by a brief summary. Use a provider prefix for provider level changes. ```release-note:note resource/aws_dx_gateway_association: The vpn_gateway_id attribute is being deprecated in favor of the new associated_gateway_id attribute to support transit gateway associations ```","title":"Deprecations"},{"location":"contributing/pullrequest-submission-and-lifecycle/#breaking-changes-and-removals","text":"A breaking-change entry should use the release-note:breaking-change header and have a prefix indicating the resource or datasource it corresponds to, a colon, then followed by a brief summary. Use a provider prefix for provider level changes. ```release-note:breaking-change resource/aws_lambda_alias: Resource import no longer converts Lambda Function name to ARN ```","title":"Breaking Changes and Removals"},{"location":"contributing/pullrequest-submission-and-lifecycle/#changes-that-may-have-a-changelog-entry","text":"Dependency updates: If the update contains relevant bug fixes or enhancements that affect operators, those should be called out. Any changes which do not fit into the above categories but warrant highlighting. Use resource/datasource/provider prefixes where appropriate. ```release-note:note resource/aws_lambda_alias: Resource import no longer converts Lambda Function name to ARN ```","title":"Changes that may have a CHANGELOG entry"},{"location":"contributing/pullrequest-submission-and-lifecycle/#changes-that-should-not-have-a-changelog-entry","text":"Resource and provider documentation updates Testing updates Code refactoring","title":"Changes that should not have a CHANGELOG entry"},{"location":"contributing/retries-and-waiters/","text":"Retries and Waiters # Please Note: This documentation is intended for Terraform AWS Provider code developers. Typical operators writing and applying Terraform configurations do not need to read or understand this material. Terraform plugins may run into situations where calling the remote system after an operation may be necessary. These typically fall under three classes where: The request never reaches the remote system. The request reaches the remote system and responds that it cannot handle the request temporarily. The implementation of the remote system requires additional requests to ensure success. This guide describes the behavior of the Terraform AWS Provider and provides code implementations that help ensure success in each of these situations. Terraform Plugin SDK Functionality State Change Configuration and Functions Retry Functions AWS Request Handling Default AWS Go SDK Retries Lower Network Error Retries Terraform AWS Provider Service Retries Eventual Consistency Operation Specific Error Retries IAM Error Retries Asynchronous Operation Error Retries Resource Lifecycle Retries Resource Attribute Value Waiters Asynchronous Operations AWS Go SDK Waiters Resource Lifecycle Waiters Terraform Plugin SDK Functionality # The Terraform Plugin SDK , which the AWS Provider uses, provides vital tools for handling consistency: the resource.StateChangeConf{} struct, and the retry functions, resource.Retry() and resource.RetryContext() . We will discuss these throughout the rest of this guide. Since they help keep the AWS Provider code consistent, we heavily prefer them over custom implementations. This guide goes beyond the Extending Terraform documentation by providing additional context and emergent implementations specific to the Terraform AWS Provider. State Change Configuration and Functions # The resource.StateChangeConf type along with its receiver methods WaitForState() and WaitForStateContext() is a generic primitive for repeating operations in Terraform resource logic until desired value(s) are received. The \"state change\" in this case is generic to any value and not specific to the Terraform State. Among other functionality, it supports some of these desirable optional properties: Expecting specific value(s) while waiting for the target value(s) to be reached. Unexpected values are returned as an error which can be augmented with additional details. Expecting the target value(s) to be returned multiple times in succession. Allowing various polling configurations such as delaying the initial request and setting the time between polls. Retry Functions # The resource.Retry() and resource.RetryContext() functions provide a simplified retry implementation around resource.StateChangeConf . Their most common use is for simple error-based retries. AWS Request Handling # The Terraform AWS Provider's requests to AWS service APIs happen on top of Hypertext Transfer Protocol (HTTP). The following is a simplified description of the layers and handling that requests pass through: A Terraform resource calls an AWS Go SDK function. The AWS Go SDK generates an AWS-compatible HTTP request using the Go standard library net/http package . This includes the following: Adding HTTP headers for authentication and signing of requests to ensure authenticity. Converting operation inputs into required HTTP URI parameters and/or request body type (XML or JSON). If debug logging is enabled, logging of the HTTP request. The AWS Go SDK transmits the net/http request using Go's standard handling of the Operating System (OS) and Domain Name System (DNS) configuration. The AWS service potentially receives the request and responds, typically adding a request identifier HTTP header which can be used for AWS Support cases. The OS and Go net/http receive the response and pass it to the AWS Go SDK. The AWS Go SDK attempts to handle the response. This may include: Parsing output Converting errors into operation errors (Go error type of wrapped awserr.Error type ). Converting response elements into operation outputs (AWS Go SDK operation-specific types). Triggering automatic request retries based on default and custom logic. The Terraform resource receives the response, including any output and errors, from the AWS Go SDK. The Terraform AWS Provider specific configuration for AWS Go SDK operation handling can be found in aws/conns/conns.go in this codebase and the hashicorp/aws-sdk-go-base codebase . NOTE: The section descibes the current handling with version 1 of the AWS Go SDK. In the future, this codebase will be migrated to version 2 of the AWS Go SDK. The newer version implements a very similar request flow but uses a simpler credential and request handling configuration. As such, the aws-sdk-go-base dependency will likely not receive further updates and will be removed after that migration. Default AWS Go SDK Retries # In some situations, while handling a response, the AWS Go SDK automatically retries a request before returning the output and error. The retry mechanism implements an exponential backoff algorithm. The default conditions triggering automatic retries (implemented through client.DefaultRetryer ) include: Certain network errors. A common exception to this is connection reset errors. HTTP status codes 429 and 5xx. Certain API error codes, which are common across various AWS services (e.g., ThrottledException ). However, not all AWS services implement these error codes consistently. A common exception to this is certain expired credentials errors. By default, the Terraform AWS Provider sets the maximum number of AWS Go SDK retries based on the max_retries provider configuration . The provider configuration defaults to 25 and the exponential backoff roughly equates to one hour of retries. This very high default value was present before the Terraform AWS Provider codebase was split from Terraform CLI in version 0.10. NOTE: The section describes the current handling with version 1 of the AWS Go SDK. In the future, this codebase will be migrated to version 2 of the AWS Go SDK. The newer version implements additional retry conditions by default, such as consistently retrying all common network errors. NOTE: The section describes the current handling with Terraform Plugin SDK resource signatures without context.Context . In the future, this codebase will be migrated to the context-aware resource signatures which currently enforce a 20-minute default timeout that conflicts with the timeout with the default max_retries value. The Terraform Plugin SDK may be updated to support removing this default 20-minute timeout or the default retry mechanism described here will be updated to prevent context cancellation errors where possible. Lower Network Error Retries # Given the very high default number of AWS Go SDK retries configured in the Terraform AWS Provider and the excessive wait that practitioners would face, the hashicorp/aws-sdk-go-base codebase lowers retries to 10 for certain network errors that typically cannot be remediated via retries. This roughly equates to 30 seconds of retries. Terraform AWS Provider Service Retries # The AWS Go SDK provides hooks for injecting custom logic into the service client handlers. We prefer this handling in situations where contributors would need to apply the retry behavior to many resources. For example, in cases where the AWS service API does not mark an error code as automatically retriable. The AWS Provider includes other retry-changing behaviors using this method. You can find them in the aws/config.go file. For example: client . kafkaconn . Handlers . Retry . PushBack ( func ( r * request . Request ) { if tfawserr . ErrMessageContains ( r . Error , kafka . ErrCodeTooManyRequestsException , \"Too Many Requests\" ) { r . Retryable = aws . Bool ( true ) } }) Eventual Consistency # Eventual consistency is a temporary condition where the remote system can return outdated information or errors due to not being strongly read-after-write consistent. This is a pattern found in remote systems that must be highly scaled for broad usage. Terraform expects any planned resource lifecycle change (create, update, destroy of the resource itself) and planned resource attribute value change to match after being applied. Conversely, operators typically expect that Terraform resources also implement the concept of drift detection for resources and their attributes, which requires reading information back from the remote system after an operation. A common implementation is refreshing the Terraform State information ( d.Set() ) during the Read function of a resource after Create and Update . These two concepts conflict with each other and require additional handling in Terraform resource logic as shown in the following sections. These issues are not reliably reproducible, especially in the case of writing acceptance testing, so they can be elusive with false positives to verify fixes. Operation Specific Error Retries # Even given a properly ordered Terraform configuration, eventual consistency can unexpectedly prevent downstream operations from succeeding. A simple retry after a few seconds resolves many of these issues. To reduce frustrating behavior for operators, wrap AWS Go SDK operations with the resource.Retry() or resource.RetryContext() functions. These retries should have a reasonably low timeout (typically two minutes but up to five minutes). Save them in a constant for reusability. These functions are preferably in line with the associated resource logic to remove any indirection with the code. Do not use this type of logic to overcome improperly ordered Terraform configurations. The approach may not work in larger environments. // internal/service/example/wait.go (created if does not exist) const ( // Maximum amount of time to wait for Thing operation eventual consistency ThingOperationTimeout = 2 * time . Minute ) // internal/service/{service}/{thing}.go // ... Create, Read, Update, or Delete function ... err := resource . Retry ( ThingOperationTimeout , func () * resource . RetryError { _ , err := conn . /* ... AWS Go SDK operation with eventual consistency errors ... */ // Retryable conditions which can be checked. // These must be updated to match the AWS service API error code and message. if tfawserr . ErrMessageContains ( err , /* error code */ , /* error message */ ) { return resource . RetryableError ( err ) } if err != nil { return resource . NonRetryableError ( err ) } return nil }) // This check is important - it handles when the AWS Go SDK operation retries without returning. // e.g., any automatic retries due to network or throttling errors. if tfresource . TimedOut ( err ) { // The use of equals assignment (over colon equals) is also important here. // This overwrites the error variable to simplify logic. _ , err = conn . /* ... AWS Go SDK operation with IAM eventual consistency errors ... */ } if err != nil { return fmt . Errorf ( \"... error message context ... : %w\" , err ) } NOTE: The section descibes the current handling with version 1 of the AWS Go SDK. In the future, this codebase will be migrated to version 2 of the AWS Go SDK. The newer version natively supports operation-specific retries in a more friendly manner, which may replace this type of implementation. IAM Error Retries # A common eventual consistency issue is an error returned due to IAM permissions. The IAM service itself is eventually consistent along with the propagation of its components and permissions to other AWS services. For example, if the following operations occur in quick succession: Create an IAM Role Attach an IAM Policy to the IAM Role Reference the new IAM Role in another AWS service, such as creating a Lambda Function The last operation can receive varied API errors ranging from: IAM Role being reported as not existing IAM Role being reported as not having permissions for the other service to use it (assume role permissions) IAM Role being reported as not having sufficient permissions (inline or attached role permissions) Each AWS service API (and sometimes even operations within the same API) varies in the implementation of these errors. To handle them, it is recommended to use the Operation Specific Error Retries pattern. The Terraform AWS Provider implements a standard timeout constant of two minutes in the internal/service/iam package which should be used for all retry timeouts associated with IAM errors. This timeout was derived from years of Terraform operational experience with all AWS APIs. // internal/service/{service}/{thing}.go import ( // ... other imports ... tfiam \"github.com/hashicorp/terraform-provider-aws/internal/service/iam\" ) // ... Create and typically Update function ... err := resource . Retry ( iamwaiter . PropagationTimeout , func () * resource . RetryError { _ , err := conn . /* ... AWS Go SDK operation with IAM eventual consistency errors ... */ // Example retryable condition // This must be updated to match the AWS service API error code and message. if tfawserr . ErrMessageContains ( err , /* error code */ , /* error message */ ) { return resource . RetryableError ( err ) } if err != nil { return resource . NonRetryableError ( err ) } return nil }) if tfresource . TimedOut ( err ) { _ , err = conn . /* ... AWS Go SDK operation with IAM eventual consistency errors ... */ } if err != nil { return fmt . Errorf ( \"... error message context ... : %w\" , err ) } Asynchronous Operation Error Retries # Some remote system operations run asynchronously as detailed in the Asynchronous Operations section . In these cases, it is possible that the initial operation will immediately return as successful, but potentially return a retryable failure while checking the operation status that requires starting everything over. The handling for these is complicated by the fact that there are two timeouts, one for the retryable failure and one for the asynchronous operation status checking. The below code example highlights this situation for a resource creation that also exhibited IAM eventual consistency. // internal/service/{service}/{thing}.go import ( // ... other imports ... tfiam \"github.com/hashicorp/terraform-provider-aws/internal/service/iam\" ) // ... Create function ... // Underlying IAM eventual consistency errors can occur after the creation // operation. The goal is only retry these types of errors up to the IAM // timeout. Since the creation process is asynchronous and can take up to // its own timeout, we store a stop time upfront for checking. iamwaiterStopTime := time . Now (). Add ( tfiam . PropagationTimeout ) // Ensure to add IAM eventual consistency timeout in case of retries err = resource . Retry ( tfiam . PropagationTimeout + ThingOperationTimeout , func () * resource . RetryError { // Only retry IAM eventual consistency errors up to that timeout iamwaiterRetry := time . Now (). Before ( iamwaiterStopTime ) _ , err := conn . /* ... AWS Go SDK operation without eventual consistency errors ... */ if err != nil { return resource . NonRetryableError ( err ) } _ , err = ThingOperation ( conn , d . Id ()) if err != nil { if iamwaiterRetry && /* eventual consistency error checking */ { return resource . RetryableError ( err ) } return resource . NonRetryableError ( err ) } return nil }) if tfresource . TimedOut ( err ) { _ , err = conn . /* ... AWS Go SDK operation without eventual consistency errors ... */ if err != nil { return err } _ , err = ThingOperation ( conn , d . Id ()) if err != nil { return err } } Resource Lifecycle Retries # Resource lifecycle eventual consistency is a type of consistency issue that relates to the existence or state of an AWS infrastructure component. For example, if you create a resource and immediately try to get information about it, some AWS services and operations will return a \"not found\" error. Depending on the service and general AWS load, these errors can be frequent or rare. In order to avoid this issue, identify operations that make changes. Then, when calling any other operations that rely on the changes, account for the possibility that the AWS service has not yet fully realized them. A typical example is creating an AWS component. After creation, when attempting to read the component's information, provide logic to retry the read if the AWS service returns a \"not found\" error. The pattern that most resources should follow is to have the Create function return calling the Read function. This fills in computed attributes and ensures that the AWS service applied the configuration correctly. Add retry logic to the Read function to overcome the temporary condition on resource creation. Note that for eventually consistent resources, \"not found\" errors can still occur in the Read function even after implementing Resource Lifecycle Waiters for the Create function. // internal/service/example/wait.go (created if does not exist) const ( // Maximum amount of time to wait for Thing eventual consistency on creation ThingCreationTimeout = 2 * time . Minute ) // internal/service/{service}/{thing}.go function ExampleThingCreate ( d * schema . ResourceData , meta interface {}) error { // ... return ExampleThingRead ( d , meta ) } function ExampleThingRead ( d * schema . ResourceData , meta interface {}) error { conn := meta .( * AWSClient ). exampleconn input := & example . OperationInput { /* ... */ } var output * example . OperationOutput err := resource . Retry ( ThingCreationTimeout , func () * resource . RetryError { var err error output , err = conn . Operation ( input ) // Retry on any API \"not found\" errors, but only on new resources. if d . IsNewResource () && tfawserr . ErrorCodeEquals ( err , example . ErrCodeResourceNotFoundException ) { return resource . RetryableError ( err ) } if err != nil { return resource . NonRetryableError ( err ) } return nil }) // Retry AWS Go SDK operation if no response from automatic retries. if tfresource . TimedOut ( err ) { output , err = exampleconn . Operation ( input ) } // Prevent confusing Terraform error messaging to operators by // Only ignoring API \"not found\" errors if not a new resource. if ! d . IsNewResource () && tfawserr . ErrorCodeEquals ( err , example . ErrCodeNoSuchEntityException ) { log . Printf ( \"[WARN] Example Thing (%s) not found, removing from state\" , d . Id ()) d . SetId ( \"\" ) return nil } if err != nil { return fmt . Errorf ( \"error reading Example Thing (%s): %w\" , d . Id (), err ) } // Prevent panics. if output == nil { return fmt . Errorf ( \"error reading Example Thing (%s): empty response\" , d . Id ()) } // ... refresh Terraform state as normal ... d . Set ( \"arn\" , output . Arn ) } Some other general guidelines are: If the Create function uses resource.StateChangeConf , the underlying resource.RefreshStateFunc should return nil, \"\", nil instead of the API \"not found\" error. This way the StateChangeConf logic will automatically retry. If the Create function uses resource.Retry() , the API \"not found\" error should be caught and return resource.RetryableError(err) to automatically retry. In rare cases, it may be easier to duplicate all Read function logic in the Create function to handle all retries in one place. Resource Attribute Value Waiters # An emergent solution for handling eventual consistency with attribute values on updates is to introduce a custom resource.StateChangeConf and resource.RefreshStateFunc handlers. For example: // internal/service/example/status.go (created if does not exist) // ThingAttribute fetches the Thing and its Attribute func ThingAttribute ( conn * example . Example , id string ) resource . StateRefreshFunc { return func () ( interface {}, string , error ) { output , err := /* ... AWS Go SDK operation to fetch resource/value ... */ if tfawserr . ErrCodeEquals ( err , example . ErrCodeResourceNotFoundException ) { return nil , \"\" , nil } if err != nil { return nil , \"\" , err } if output == nil { return nil , \"\" , nil } return output , aws . StringValue ( output . Attribute ), nil } } // internal/service/example/wait.go (created if does not exist) const ( ThingAttributePropagationTimeout = 2 * time . Minute ) // ThingAttributeUpdated is an attribute waiter for ThingAttribute func ThingAttributeUpdated ( conn * example . Example , id string , expectedValue string ) ( * example . Thing , error ) { stateConf := & resource . StateChangeConf { Target : [] string { expectedValue }, Refresh : ThingAttribute ( conn , id ), Timeout : ThingAttributePropagationTimeout , } outputRaw , err := stateConf . WaitForState () if output , ok := outputRaw .( * example . Thing ); ok { return output , err } return nil , err } // internal/service/{service}/{thing}.go function ExampleThingUpdate ( d * schema . ResourceData , meta interface {}) error { // ... d . HasChange ( \"attribute\" ) { // ... AWS Go SDK logic to update attribute ... if _ , err := ThingAttributeUpdated ( conn , d . Id (), d . Get ( \"attribute\" ).( string )); err != nil { return fmt . Errorf ( \"error waiting for Example Thing (%s) attribute update: %w\" , d . Id (), err ) } } // ... } Asynchronous Operations # When you initiate a long-running operation, an AWS service may return a successful response immediately and continue working on the request asynchronously. A resource can track the status with a component-level field (e.g., CREATING , UPDATING , etc.) or an explicit tracking identifier. Terraform resources should wait for these background operations to complete. Failing to do so can introduce incomplete state information and downstream errors in other resources. In rare scenarios involving very long-running operations, operators may request a flag to skip the waiting. However, these should only be implemented case-by-case to prevent those previously mentioned confusing issues. AWS Go SDK Waiters # In limited cases, the AWS service API model includes the information to automatically generate a waiter function in the AWS Go SDK for an operation. These are typically named with the prefix WaitUntil... . If available, these functions can be used for an initial resource implementation. For example: if err := conn . WaitUntilEndpointInService ( input ); err != nil { return fmt . Errorf ( \"error waiting for Example Thing (%s) ...: %w\" , d . Id (), err ) } If it is necessary to customize the timeouts and polling, we generally prefer using Resource Lifecycle Waiters instead since they are more commonly used throughout the codebase. Resource Lifecycle Waiters # Most of the codebase uses resource.StateChangeConf and resource.RefreshStateFunc handlers for tracking either component level status fields or explicit tracking identifiers. These should be placed in the internal/service/{SERVICE} package and split into separate functions. For example: // internal/service/example/status.go (created if does not exist) // ThingStatus fetches the Thing and its Status func ThingStatus ( conn * example . Example , id string ) resource . StateRefreshFunc { return func () ( interface {}, string , error ) { output , err := /* ... AWS Go SDK operation to fetch resource/status ... */ if tfawserr . ErrCodeEquals ( err , example . ErrCodeResourceNotFoundException ) { return nil , \"\" , nil } if err != nil { return nil , \"\" , err } if output == nil { return nil , \"\" , nil } return output , aws . StringValue ( output . Status ), nil } } // internal/service/example/wait.go (created if does not exist) const ( ThingCreationTimeout = 2 * time . Minute ThingDeletionTimeout = 5 * time . Minute ) // ThingCreated is a resource waiter for Thing creation func ThingCreated ( conn * example . Example , id string ) ( * example . Thing , error ) { stateConf := & resource . StateChangeConf { Pending : [] string { example . StatusCreating }, Target : [] string { example . StatusCreated }, Refresh : ThingStatus ( conn , id ), Timeout : ThingCreationTimeout , } outputRaw , err := stateConf . WaitForState () if output , ok := outputRaw .( * example . Thing ); ok { return output , err } return nil , err } // ThingDeleted is a resource waiter for Thing deletion func ThingDeleted ( conn * example . Example , id string ) ( * example . Thing , error ) { stateConf := & resource . StateChangeConf { Pending : [] string { example . StatusDeleting }, Target : [] string {}, // Use empty list if the resource disappears and does not have \"deleted\" status Refresh : ThingStatus ( conn , id ), Timeout : ThingDeletionTimeout , } outputRaw , err := stateConf . WaitForState () if output , ok := outputRaw .( * example . Thing ); ok { return output , err } return nil , err } // internal/service/{service}/{thing}.go function ExampleThingCreate ( d * schema . ResourceData , meta interface {}) error { // ... AWS Go SDK logic to create resource ... if _ , err := ThingCreated ( conn , d . Id ()); err != nil { return fmt . Errorf ( \"error waiting for Example Thing (%s) creation: %w\" , d . Id (), err ) } return ExampleThingRead ( d , meta ) } function ExampleThingDelete ( d * schema . ResourceData , meta interface {}) error { // ... AWS Go SDK logic to delete resource ... if _ , err := ThingDeleted ( conn , d . Id ()); err != nil { return fmt . Errorf ( \"error waiting for Example Thing (%s) deletion: %w\" , d . Id (), err ) } return ExampleThingRead ( d , meta ) } Typically, the AWS Go SDK should include constants for various status field values (e.g., StatusCreating for CREATING ). If not, create them in a file named internal/service/{SERVICE}/consts.go .","title":"Retries and Waiters"},{"location":"contributing/retries-and-waiters/#retries-and-waiters","text":"Please Note: This documentation is intended for Terraform AWS Provider code developers. Typical operators writing and applying Terraform configurations do not need to read or understand this material. Terraform plugins may run into situations where calling the remote system after an operation may be necessary. These typically fall under three classes where: The request never reaches the remote system. The request reaches the remote system and responds that it cannot handle the request temporarily. The implementation of the remote system requires additional requests to ensure success. This guide describes the behavior of the Terraform AWS Provider and provides code implementations that help ensure success in each of these situations. Terraform Plugin SDK Functionality State Change Configuration and Functions Retry Functions AWS Request Handling Default AWS Go SDK Retries Lower Network Error Retries Terraform AWS Provider Service Retries Eventual Consistency Operation Specific Error Retries IAM Error Retries Asynchronous Operation Error Retries Resource Lifecycle Retries Resource Attribute Value Waiters Asynchronous Operations AWS Go SDK Waiters Resource Lifecycle Waiters","title":"Retries and Waiters"},{"location":"contributing/retries-and-waiters/#terraform-plugin-sdk-functionality","text":"The Terraform Plugin SDK , which the AWS Provider uses, provides vital tools for handling consistency: the resource.StateChangeConf{} struct, and the retry functions, resource.Retry() and resource.RetryContext() . We will discuss these throughout the rest of this guide. Since they help keep the AWS Provider code consistent, we heavily prefer them over custom implementations. This guide goes beyond the Extending Terraform documentation by providing additional context and emergent implementations specific to the Terraform AWS Provider.","title":"Terraform Plugin SDK Functionality"},{"location":"contributing/retries-and-waiters/#state-change-configuration-and-functions","text":"The resource.StateChangeConf type along with its receiver methods WaitForState() and WaitForStateContext() is a generic primitive for repeating operations in Terraform resource logic until desired value(s) are received. The \"state change\" in this case is generic to any value and not specific to the Terraform State. Among other functionality, it supports some of these desirable optional properties: Expecting specific value(s) while waiting for the target value(s) to be reached. Unexpected values are returned as an error which can be augmented with additional details. Expecting the target value(s) to be returned multiple times in succession. Allowing various polling configurations such as delaying the initial request and setting the time between polls.","title":"State Change Configuration and Functions"},{"location":"contributing/retries-and-waiters/#retry-functions","text":"The resource.Retry() and resource.RetryContext() functions provide a simplified retry implementation around resource.StateChangeConf . Their most common use is for simple error-based retries.","title":"Retry Functions"},{"location":"contributing/retries-and-waiters/#aws-request-handling","text":"The Terraform AWS Provider's requests to AWS service APIs happen on top of Hypertext Transfer Protocol (HTTP). The following is a simplified description of the layers and handling that requests pass through: A Terraform resource calls an AWS Go SDK function. The AWS Go SDK generates an AWS-compatible HTTP request using the Go standard library net/http package . This includes the following: Adding HTTP headers for authentication and signing of requests to ensure authenticity. Converting operation inputs into required HTTP URI parameters and/or request body type (XML or JSON). If debug logging is enabled, logging of the HTTP request. The AWS Go SDK transmits the net/http request using Go's standard handling of the Operating System (OS) and Domain Name System (DNS) configuration. The AWS service potentially receives the request and responds, typically adding a request identifier HTTP header which can be used for AWS Support cases. The OS and Go net/http receive the response and pass it to the AWS Go SDK. The AWS Go SDK attempts to handle the response. This may include: Parsing output Converting errors into operation errors (Go error type of wrapped awserr.Error type ). Converting response elements into operation outputs (AWS Go SDK operation-specific types). Triggering automatic request retries based on default and custom logic. The Terraform resource receives the response, including any output and errors, from the AWS Go SDK. The Terraform AWS Provider specific configuration for AWS Go SDK operation handling can be found in aws/conns/conns.go in this codebase and the hashicorp/aws-sdk-go-base codebase . NOTE: The section descibes the current handling with version 1 of the AWS Go SDK. In the future, this codebase will be migrated to version 2 of the AWS Go SDK. The newer version implements a very similar request flow but uses a simpler credential and request handling configuration. As such, the aws-sdk-go-base dependency will likely not receive further updates and will be removed after that migration.","title":"AWS Request Handling"},{"location":"contributing/retries-and-waiters/#default-aws-go-sdk-retries","text":"In some situations, while handling a response, the AWS Go SDK automatically retries a request before returning the output and error. The retry mechanism implements an exponential backoff algorithm. The default conditions triggering automatic retries (implemented through client.DefaultRetryer ) include: Certain network errors. A common exception to this is connection reset errors. HTTP status codes 429 and 5xx. Certain API error codes, which are common across various AWS services (e.g., ThrottledException ). However, not all AWS services implement these error codes consistently. A common exception to this is certain expired credentials errors. By default, the Terraform AWS Provider sets the maximum number of AWS Go SDK retries based on the max_retries provider configuration . The provider configuration defaults to 25 and the exponential backoff roughly equates to one hour of retries. This very high default value was present before the Terraform AWS Provider codebase was split from Terraform CLI in version 0.10. NOTE: The section describes the current handling with version 1 of the AWS Go SDK. In the future, this codebase will be migrated to version 2 of the AWS Go SDK. The newer version implements additional retry conditions by default, such as consistently retrying all common network errors. NOTE: The section describes the current handling with Terraform Plugin SDK resource signatures without context.Context . In the future, this codebase will be migrated to the context-aware resource signatures which currently enforce a 20-minute default timeout that conflicts with the timeout with the default max_retries value. The Terraform Plugin SDK may be updated to support removing this default 20-minute timeout or the default retry mechanism described here will be updated to prevent context cancellation errors where possible.","title":"Default AWS Go SDK Retries"},{"location":"contributing/retries-and-waiters/#lower-network-error-retries","text":"Given the very high default number of AWS Go SDK retries configured in the Terraform AWS Provider and the excessive wait that practitioners would face, the hashicorp/aws-sdk-go-base codebase lowers retries to 10 for certain network errors that typically cannot be remediated via retries. This roughly equates to 30 seconds of retries.","title":"Lower Network Error Retries"},{"location":"contributing/retries-and-waiters/#terraform-aws-provider-service-retries","text":"The AWS Go SDK provides hooks for injecting custom logic into the service client handlers. We prefer this handling in situations where contributors would need to apply the retry behavior to many resources. For example, in cases where the AWS service API does not mark an error code as automatically retriable. The AWS Provider includes other retry-changing behaviors using this method. You can find them in the aws/config.go file. For example: client . kafkaconn . Handlers . Retry . PushBack ( func ( r * request . Request ) { if tfawserr . ErrMessageContains ( r . Error , kafka . ErrCodeTooManyRequestsException , \"Too Many Requests\" ) { r . Retryable = aws . Bool ( true ) } })","title":"Terraform AWS Provider Service Retries"},{"location":"contributing/retries-and-waiters/#eventual-consistency","text":"Eventual consistency is a temporary condition where the remote system can return outdated information or errors due to not being strongly read-after-write consistent. This is a pattern found in remote systems that must be highly scaled for broad usage. Terraform expects any planned resource lifecycle change (create, update, destroy of the resource itself) and planned resource attribute value change to match after being applied. Conversely, operators typically expect that Terraform resources also implement the concept of drift detection for resources and their attributes, which requires reading information back from the remote system after an operation. A common implementation is refreshing the Terraform State information ( d.Set() ) during the Read function of a resource after Create and Update . These two concepts conflict with each other and require additional handling in Terraform resource logic as shown in the following sections. These issues are not reliably reproducible, especially in the case of writing acceptance testing, so they can be elusive with false positives to verify fixes.","title":"Eventual Consistency"},{"location":"contributing/retries-and-waiters/#operation-specific-error-retries","text":"Even given a properly ordered Terraform configuration, eventual consistency can unexpectedly prevent downstream operations from succeeding. A simple retry after a few seconds resolves many of these issues. To reduce frustrating behavior for operators, wrap AWS Go SDK operations with the resource.Retry() or resource.RetryContext() functions. These retries should have a reasonably low timeout (typically two minutes but up to five minutes). Save them in a constant for reusability. These functions are preferably in line with the associated resource logic to remove any indirection with the code. Do not use this type of logic to overcome improperly ordered Terraform configurations. The approach may not work in larger environments. // internal/service/example/wait.go (created if does not exist) const ( // Maximum amount of time to wait for Thing operation eventual consistency ThingOperationTimeout = 2 * time . Minute ) // internal/service/{service}/{thing}.go // ... Create, Read, Update, or Delete function ... err := resource . Retry ( ThingOperationTimeout , func () * resource . RetryError { _ , err := conn . /* ... AWS Go SDK operation with eventual consistency errors ... */ // Retryable conditions which can be checked. // These must be updated to match the AWS service API error code and message. if tfawserr . ErrMessageContains ( err , /* error code */ , /* error message */ ) { return resource . RetryableError ( err ) } if err != nil { return resource . NonRetryableError ( err ) } return nil }) // This check is important - it handles when the AWS Go SDK operation retries without returning. // e.g., any automatic retries due to network or throttling errors. if tfresource . TimedOut ( err ) { // The use of equals assignment (over colon equals) is also important here. // This overwrites the error variable to simplify logic. _ , err = conn . /* ... AWS Go SDK operation with IAM eventual consistency errors ... */ } if err != nil { return fmt . Errorf ( \"... error message context ... : %w\" , err ) } NOTE: The section descibes the current handling with version 1 of the AWS Go SDK. In the future, this codebase will be migrated to version 2 of the AWS Go SDK. The newer version natively supports operation-specific retries in a more friendly manner, which may replace this type of implementation.","title":"Operation Specific Error Retries"},{"location":"contributing/retries-and-waiters/#iam-error-retries","text":"A common eventual consistency issue is an error returned due to IAM permissions. The IAM service itself is eventually consistent along with the propagation of its components and permissions to other AWS services. For example, if the following operations occur in quick succession: Create an IAM Role Attach an IAM Policy to the IAM Role Reference the new IAM Role in another AWS service, such as creating a Lambda Function The last operation can receive varied API errors ranging from: IAM Role being reported as not existing IAM Role being reported as not having permissions for the other service to use it (assume role permissions) IAM Role being reported as not having sufficient permissions (inline or attached role permissions) Each AWS service API (and sometimes even operations within the same API) varies in the implementation of these errors. To handle them, it is recommended to use the Operation Specific Error Retries pattern. The Terraform AWS Provider implements a standard timeout constant of two minutes in the internal/service/iam package which should be used for all retry timeouts associated with IAM errors. This timeout was derived from years of Terraform operational experience with all AWS APIs. // internal/service/{service}/{thing}.go import ( // ... other imports ... tfiam \"github.com/hashicorp/terraform-provider-aws/internal/service/iam\" ) // ... Create and typically Update function ... err := resource . Retry ( iamwaiter . PropagationTimeout , func () * resource . RetryError { _ , err := conn . /* ... AWS Go SDK operation with IAM eventual consistency errors ... */ // Example retryable condition // This must be updated to match the AWS service API error code and message. if tfawserr . ErrMessageContains ( err , /* error code */ , /* error message */ ) { return resource . RetryableError ( err ) } if err != nil { return resource . NonRetryableError ( err ) } return nil }) if tfresource . TimedOut ( err ) { _ , err = conn . /* ... AWS Go SDK operation with IAM eventual consistency errors ... */ } if err != nil { return fmt . Errorf ( \"... error message context ... : %w\" , err ) }","title":"IAM Error Retries"},{"location":"contributing/retries-and-waiters/#asynchronous-operation-error-retries","text":"Some remote system operations run asynchronously as detailed in the Asynchronous Operations section . In these cases, it is possible that the initial operation will immediately return as successful, but potentially return a retryable failure while checking the operation status that requires starting everything over. The handling for these is complicated by the fact that there are two timeouts, one for the retryable failure and one for the asynchronous operation status checking. The below code example highlights this situation for a resource creation that also exhibited IAM eventual consistency. // internal/service/{service}/{thing}.go import ( // ... other imports ... tfiam \"github.com/hashicorp/terraform-provider-aws/internal/service/iam\" ) // ... Create function ... // Underlying IAM eventual consistency errors can occur after the creation // operation. The goal is only retry these types of errors up to the IAM // timeout. Since the creation process is asynchronous and can take up to // its own timeout, we store a stop time upfront for checking. iamwaiterStopTime := time . Now (). Add ( tfiam . PropagationTimeout ) // Ensure to add IAM eventual consistency timeout in case of retries err = resource . Retry ( tfiam . PropagationTimeout + ThingOperationTimeout , func () * resource . RetryError { // Only retry IAM eventual consistency errors up to that timeout iamwaiterRetry := time . Now (). Before ( iamwaiterStopTime ) _ , err := conn . /* ... AWS Go SDK operation without eventual consistency errors ... */ if err != nil { return resource . NonRetryableError ( err ) } _ , err = ThingOperation ( conn , d . Id ()) if err != nil { if iamwaiterRetry && /* eventual consistency error checking */ { return resource . RetryableError ( err ) } return resource . NonRetryableError ( err ) } return nil }) if tfresource . TimedOut ( err ) { _ , err = conn . /* ... AWS Go SDK operation without eventual consistency errors ... */ if err != nil { return err } _ , err = ThingOperation ( conn , d . Id ()) if err != nil { return err } }","title":"Asynchronous Operation Error Retries"},{"location":"contributing/retries-and-waiters/#resource-lifecycle-retries","text":"Resource lifecycle eventual consistency is a type of consistency issue that relates to the existence or state of an AWS infrastructure component. For example, if you create a resource and immediately try to get information about it, some AWS services and operations will return a \"not found\" error. Depending on the service and general AWS load, these errors can be frequent or rare. In order to avoid this issue, identify operations that make changes. Then, when calling any other operations that rely on the changes, account for the possibility that the AWS service has not yet fully realized them. A typical example is creating an AWS component. After creation, when attempting to read the component's information, provide logic to retry the read if the AWS service returns a \"not found\" error. The pattern that most resources should follow is to have the Create function return calling the Read function. This fills in computed attributes and ensures that the AWS service applied the configuration correctly. Add retry logic to the Read function to overcome the temporary condition on resource creation. Note that for eventually consistent resources, \"not found\" errors can still occur in the Read function even after implementing Resource Lifecycle Waiters for the Create function. // internal/service/example/wait.go (created if does not exist) const ( // Maximum amount of time to wait for Thing eventual consistency on creation ThingCreationTimeout = 2 * time . Minute ) // internal/service/{service}/{thing}.go function ExampleThingCreate ( d * schema . ResourceData , meta interface {}) error { // ... return ExampleThingRead ( d , meta ) } function ExampleThingRead ( d * schema . ResourceData , meta interface {}) error { conn := meta .( * AWSClient ). exampleconn input := & example . OperationInput { /* ... */ } var output * example . OperationOutput err := resource . Retry ( ThingCreationTimeout , func () * resource . RetryError { var err error output , err = conn . Operation ( input ) // Retry on any API \"not found\" errors, but only on new resources. if d . IsNewResource () && tfawserr . ErrorCodeEquals ( err , example . ErrCodeResourceNotFoundException ) { return resource . RetryableError ( err ) } if err != nil { return resource . NonRetryableError ( err ) } return nil }) // Retry AWS Go SDK operation if no response from automatic retries. if tfresource . TimedOut ( err ) { output , err = exampleconn . Operation ( input ) } // Prevent confusing Terraform error messaging to operators by // Only ignoring API \"not found\" errors if not a new resource. if ! d . IsNewResource () && tfawserr . ErrorCodeEquals ( err , example . ErrCodeNoSuchEntityException ) { log . Printf ( \"[WARN] Example Thing (%s) not found, removing from state\" , d . Id ()) d . SetId ( \"\" ) return nil } if err != nil { return fmt . Errorf ( \"error reading Example Thing (%s): %w\" , d . Id (), err ) } // Prevent panics. if output == nil { return fmt . Errorf ( \"error reading Example Thing (%s): empty response\" , d . Id ()) } // ... refresh Terraform state as normal ... d . Set ( \"arn\" , output . Arn ) } Some other general guidelines are: If the Create function uses resource.StateChangeConf , the underlying resource.RefreshStateFunc should return nil, \"\", nil instead of the API \"not found\" error. This way the StateChangeConf logic will automatically retry. If the Create function uses resource.Retry() , the API \"not found\" error should be caught and return resource.RetryableError(err) to automatically retry. In rare cases, it may be easier to duplicate all Read function logic in the Create function to handle all retries in one place.","title":"Resource Lifecycle Retries"},{"location":"contributing/retries-and-waiters/#resource-attribute-value-waiters","text":"An emergent solution for handling eventual consistency with attribute values on updates is to introduce a custom resource.StateChangeConf and resource.RefreshStateFunc handlers. For example: // internal/service/example/status.go (created if does not exist) // ThingAttribute fetches the Thing and its Attribute func ThingAttribute ( conn * example . Example , id string ) resource . StateRefreshFunc { return func () ( interface {}, string , error ) { output , err := /* ... AWS Go SDK operation to fetch resource/value ... */ if tfawserr . ErrCodeEquals ( err , example . ErrCodeResourceNotFoundException ) { return nil , \"\" , nil } if err != nil { return nil , \"\" , err } if output == nil { return nil , \"\" , nil } return output , aws . StringValue ( output . Attribute ), nil } } // internal/service/example/wait.go (created if does not exist) const ( ThingAttributePropagationTimeout = 2 * time . Minute ) // ThingAttributeUpdated is an attribute waiter for ThingAttribute func ThingAttributeUpdated ( conn * example . Example , id string , expectedValue string ) ( * example . Thing , error ) { stateConf := & resource . StateChangeConf { Target : [] string { expectedValue }, Refresh : ThingAttribute ( conn , id ), Timeout : ThingAttributePropagationTimeout , } outputRaw , err := stateConf . WaitForState () if output , ok := outputRaw .( * example . Thing ); ok { return output , err } return nil , err } // internal/service/{service}/{thing}.go function ExampleThingUpdate ( d * schema . ResourceData , meta interface {}) error { // ... d . HasChange ( \"attribute\" ) { // ... AWS Go SDK logic to update attribute ... if _ , err := ThingAttributeUpdated ( conn , d . Id (), d . Get ( \"attribute\" ).( string )); err != nil { return fmt . Errorf ( \"error waiting for Example Thing (%s) attribute update: %w\" , d . Id (), err ) } } // ... }","title":"Resource Attribute Value Waiters"},{"location":"contributing/retries-and-waiters/#asynchronous-operations","text":"When you initiate a long-running operation, an AWS service may return a successful response immediately and continue working on the request asynchronously. A resource can track the status with a component-level field (e.g., CREATING , UPDATING , etc.) or an explicit tracking identifier. Terraform resources should wait for these background operations to complete. Failing to do so can introduce incomplete state information and downstream errors in other resources. In rare scenarios involving very long-running operations, operators may request a flag to skip the waiting. However, these should only be implemented case-by-case to prevent those previously mentioned confusing issues.","title":"Asynchronous Operations"},{"location":"contributing/retries-and-waiters/#aws-go-sdk-waiters","text":"In limited cases, the AWS service API model includes the information to automatically generate a waiter function in the AWS Go SDK for an operation. These are typically named with the prefix WaitUntil... . If available, these functions can be used for an initial resource implementation. For example: if err := conn . WaitUntilEndpointInService ( input ); err != nil { return fmt . Errorf ( \"error waiting for Example Thing (%s) ...: %w\" , d . Id (), err ) } If it is necessary to customize the timeouts and polling, we generally prefer using Resource Lifecycle Waiters instead since they are more commonly used throughout the codebase.","title":"AWS Go SDK Waiters"},{"location":"contributing/retries-and-waiters/#resource-lifecycle-waiters","text":"Most of the codebase uses resource.StateChangeConf and resource.RefreshStateFunc handlers for tracking either component level status fields or explicit tracking identifiers. These should be placed in the internal/service/{SERVICE} package and split into separate functions. For example: // internal/service/example/status.go (created if does not exist) // ThingStatus fetches the Thing and its Status func ThingStatus ( conn * example . Example , id string ) resource . StateRefreshFunc { return func () ( interface {}, string , error ) { output , err := /* ... AWS Go SDK operation to fetch resource/status ... */ if tfawserr . ErrCodeEquals ( err , example . ErrCodeResourceNotFoundException ) { return nil , \"\" , nil } if err != nil { return nil , \"\" , err } if output == nil { return nil , \"\" , nil } return output , aws . StringValue ( output . Status ), nil } } // internal/service/example/wait.go (created if does not exist) const ( ThingCreationTimeout = 2 * time . Minute ThingDeletionTimeout = 5 * time . Minute ) // ThingCreated is a resource waiter for Thing creation func ThingCreated ( conn * example . Example , id string ) ( * example . Thing , error ) { stateConf := & resource . StateChangeConf { Pending : [] string { example . StatusCreating }, Target : [] string { example . StatusCreated }, Refresh : ThingStatus ( conn , id ), Timeout : ThingCreationTimeout , } outputRaw , err := stateConf . WaitForState () if output , ok := outputRaw .( * example . Thing ); ok { return output , err } return nil , err } // ThingDeleted is a resource waiter for Thing deletion func ThingDeleted ( conn * example . Example , id string ) ( * example . Thing , error ) { stateConf := & resource . StateChangeConf { Pending : [] string { example . StatusDeleting }, Target : [] string {}, // Use empty list if the resource disappears and does not have \"deleted\" status Refresh : ThingStatus ( conn , id ), Timeout : ThingDeletionTimeout , } outputRaw , err := stateConf . WaitForState () if output , ok := outputRaw .( * example . Thing ); ok { return output , err } return nil , err } // internal/service/{service}/{thing}.go function ExampleThingCreate ( d * schema . ResourceData , meta interface {}) error { // ... AWS Go SDK logic to create resource ... if _ , err := ThingCreated ( conn , d . Id ()); err != nil { return fmt . Errorf ( \"error waiting for Example Thing (%s) creation: %w\" , d . Id (), err ) } return ExampleThingRead ( d , meta ) } function ExampleThingDelete ( d * schema . ResourceData , meta interface {}) error { // ... AWS Go SDK logic to delete resource ... if _ , err := ThingDeleted ( conn , d . Id ()); err != nil { return fmt . Errorf ( \"error waiting for Example Thing (%s) deletion: %w\" , d . Id (), err ) } return ExampleThingRead ( d , meta ) } Typically, the AWS Go SDK should include constants for various status field values (e.g., StatusCreating for CREATING ). If not, create them in a file named internal/service/{SERVICE}/consts.go .","title":"Resource Lifecycle Waiters"},{"location":"contributing/running-and-writing-acceptance-tests/","text":"Running and Writing Acceptance Tests # Acceptance Tests Often Cost Money to Run Running an Acceptance Test Running Cross-Account Tests Running Cross-Region Tests Running Only Short Tests Writing an Acceptance Test Anatomy of an Acceptance Test Resource Acceptance Testing Test Configurations Combining Test Configurations Base Test Configurations Available Common Test Configurations Randomized Naming Other Recommended Variables Basic Acceptance Tests PreChecks Standard Provider PreChecks Custom PreChecks ErrorChecks Common ErrorCheck Service-Specific ErrorChecks Long-Running Test Guards Disappears Acceptance Tests Per Attribute Acceptance Tests Cross-Account Acceptance Tests Cross-Region Acceptance Tests Service-Specific Region Acceptance Tests Acceptance Test Concurrency Data Source Acceptance Testing Acceptance Test Sweepers Running Test Sweepers Writing Test Sweepers Acceptance Test Checklists Basic Acceptance Test Design Test Implementation Avoid Hard Coding Hardcoded Account IDs Hardcoded AMI IDs Hardcoded Availability Zones Hardcoded Database Versions Hardcoded Direct Connect Locations Hardcoded Instance Types Hardcoded Partition DNS Suffix Hardcoded Partition in ARN Hardcoded Region Hardcoded Spot Price Hardcoded SSH Keys Hardcoded Email Addresses Terraform includes an acceptance test harness that does most of the repetitive work involved in testing a resource. For additional information about testing Terraform Providers, see the Extending Terraform documentation . Acceptance Tests Often Cost Money to Run # Because acceptance tests create real resources, they often cost money to run. Because the resources only exist for a short period of time, the total amount of money required is usually a relatively small. Nevertheless, we don't want financial limitations to be a barrier to contribution, so if you are unable to pay to run acceptance tests for your contribution, mention this in your pull request. We will happily accept \"best effort\" implementations of acceptance tests and run them for you on our side. This might mean that your PR takes a bit longer to merge, but it most definitely is not a blocker for contributions. Running an Acceptance Test # Acceptance tests can be run using the testacc target in the Terraform Makefile . The individual tests to run can be controlled using a regular expression. Prior to running the tests provider configuration details such as access keys must be made available as environment variables. For example, to run an acceptance test against the Amazon Web Services provider, the following environment variables must be set: # Using a profile export AWS_PROFILE = ... # Otherwise export AWS_ACCESS_KEY_ID = ... export AWS_SECRET_ACCESS_KEY = ... export AWS_DEFAULT_REGION = ... Please note that the default region for the testing is us-west-2 and must be overridden via the AWS_DEFAULT_REGION environment variable, if necessary. This is especially important for testing AWS GovCloud (US), which requires: export AWS_DEFAULT_REGION = us-gov-west-1 Tests can then be run by specifying a regular expression defining the tests to run and the package in which the tests are defined: $ make testacc TESTS = TestAccCloudWatchDashboard_updateName PKG = cloudwatch == > Checking that code complies with gofmt requirements... TF_ACC = 1 go test ./internal/service/cloudwatch/... -v -count 1 -parallel 20 -run = TestAccCloudWatchDashboard_updateName -timeout 180m === RUN TestAccCloudWatchDashboard_updateName === PAUSE TestAccCloudWatchDashboard_updateName === CONT TestAccCloudWatchDashboard_updateName --- PASS: TestAccCloudWatchDashboard_updateName ( 25 .33s ) PASS ok github.com/hashicorp/terraform-provider-aws/internal/service/cloudwatch 25 .387s Entire resource test suites can be targeted by using the naming convention to write the regular expression. For example, to run all tests of the aws_cloudwatch_dashboard resource rather than just the updateName test, you can start testing like this: $ make testacc TESTS = TestAccCloudWatchDashboard PKG = cloudwatch == > Checking that code complies with gofmt requirements... TF_ACC = 1 go test ./internal/service/cloudwatch/... -v -count 1 -parallel 20 -run = TestAccCloudWatchDashboard -timeout 180m === RUN TestAccCloudWatchDashboard_basic === PAUSE TestAccCloudWatchDashboard_basic === RUN TestAccCloudWatchDashboard_update === PAUSE TestAccCloudWatchDashboard_update === RUN TestAccCloudWatchDashboard_updateName === PAUSE TestAccCloudWatchDashboard_updateName === CONT TestAccCloudWatchDashboard_basic === CONT TestAccCloudWatchDashboard_updateName === CONT TestAccCloudWatchDashboard_update --- PASS: TestAccCloudWatchDashboard_basic ( 15 .83s ) --- PASS: TestAccCloudWatchDashboard_updateName ( 26 .69s ) --- PASS: TestAccCloudWatchDashboard_update ( 27 .72s ) PASS ok github.com/hashicorp/terraform-provider-aws/internal/service/cloudwatch 27 .783s Running acceptance tests requires version 0.12.26 or higher of the Terraform CLI to be installed. For advanced developers, the acceptance testing framework accepts some additional environment variables that can be used to control Terraform CLI binary selection, logging, and other behaviors. See the Extending Terraform documentation for more information. Please Note: On macOS 10.14 and later (and some Linux distributions), the default user open file limit is 256. This may cause unexpected issues when running the acceptance testing since this can prevent various operations from occurring such as opening network connections to AWS. To view this limit, the ulimit -n command can be run. To update this limit, run ulimit -n 1024 (or higher). Running Cross-Account Tests # Certain testing requires multiple AWS accounts. This additional setup is not typically required and the testing will return an error (shown below) if your current setup does not have the secondary AWS configuration: $ make testacc TESTS = TestAccRDSInstance_DBSubnetGroupName_ramShared PKG = rds TF_ACC=1 go test ./internal/service/rds/... -v -count 1 -parallel 20 -run=TestAccRDSInstance_DBSubnetGroupName_ramShared -timeout 180m === RUN TestAccRDSInstance_DBSubnetGroupName_ramShared === PAUSE TestAccRDSInstance_DBSubnetGroupName_ramShared === CONT TestAccRDSInstance_DBSubnetGroupName_ramShared acctest.go:674: skipping test because at least one environment variable of [AWS_ALTERNATE_PROFILE AWS_ALTERNATE_ACCESS_KEY_ID] must be set. Usage: credentials for running acceptance testing in alternate AWS account. --- SKIP: TestAccRDSInstance_DBSubnetGroupName_ramShared (0.85s) PASS ok github.com/hashicorp/terraform-provider-aws/internal/service/rds 0.888s Running these acceptance tests is the same as before, except the following additional AWS credential information is required: # Using a profile export AWS_ALTERNATE_PROFILE = ... # Otherwise export AWS_ALTERNATE_ACCESS_KEY_ID = ... export AWS_ALTERNATE_SECRET_ACCESS_KEY = ... Running Cross-Region Tests # Certain testing requires multiple AWS regions. Additional setup is not typically required because the testing defaults the second AWS region to us-east-1 and the third AWS region to us-east-2 . Running these acceptance tests is the same as before, but if you wish to override the second and third regions: export AWS_ALTERNATE_REGION = ... export AWS_THIRD_REGION = ... Running Only Short Tests # Some tests have been manually marked as long-running (longer than 300 seconds) and can be skipped using the -short flag. However, we are adding long-running guards little by little and many services have no guarded tests. Where guards have been implemented, do not always skip long-running tests. However, for intermediate test runs during development, or to verify functionality unrelated to the specific long-running tests, skipping long-running tests makes work more efficient. We recommend that for the final test run before submitting a PR that you run affected tests without the -short flag. If you want to run only short-running tests, you can use either one of these equivalent statements. Note the use of -short . For example: % make testacc TESTS = 'TestAccECSTaskDefinition_' PKG = ecs TESTARGS = -short Or: % TF_ACC = 1 go test ./internal/service/ecs/... -v -count 1 -parallel 20 -run = 'TestAccECSTaskDefinition_' -short -timeout 180m Writing an Acceptance Test # Terraform has a framework for writing acceptance tests which minimises the amount of boilerplate code necessary to use common testing patterns. This guide is meant to augment the general Extending Terraform documentation with Terraform AWS Provider specific conventions and helpers. Anatomy of an Acceptance Test # This section describes in detail how the Terraform acceptance testing framework operates with respect to the Terraform AWS Provider. We recommend those unfamiliar with this provider, or Terraform resource testing in general, take a look here first to generally understand how we interact with AWS and the resource code to verify functionality. The entry point to the framework is the resource.ParallelTest() function. This wraps our testing to work with the standard Go testing framework, while also preventing unexpected usage of AWS by requiring the TF_ACC=1 environment variable. This function accepts a TestCase parameter, which has all the details about the test itself. For example, this includes the test steps ( TestSteps ) and how to verify resource deletion in the API after all steps have been run ( CheckDestroy ). Each TestStep proceeds by applying some Terraform configuration using the provider under test, and then verifying that results are as expected by making assertions using the provider API. It is common for a single test function to exercise both the creation of and updates to a single resource. Most tests follow a similar structure. Pre-flight checks are made to ensure that sufficient provider configuration is available to be able to proceed - for example in an acceptance test targeting AWS, AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY must be set prior to running acceptance tests. This is common to all tests exercising a single provider. Most assertion functions are defined out of band with the tests. This keeps the tests readable, and allows reuse of assertion functions across different tests of the same type of resource. The definition of a complete test looks like this: func TestAccCloudWatchDashboard_basic ( t * testing . T ) { var dashboard cloudwatch . GetDashboardOutput rInt := acctest . RandInt () resource . ParallelTest ( t , resource . TestCase { PreCheck : func () { acctest . PreCheck ( t ) }, ErrorCheck : acctest . ErrorCheck ( t , cloudwatch . EndpointsID ), ProviderFactories : acctest . ProviderFactories , CheckDestroy : testAccCheckDashboardDestroy , Steps : [] resource . TestStep { { Config : testAccDashboardConfig ( rInt ), Check : resource . ComposeTestCheckFunc ( testAccCheckDashboardExists ( \"aws_cloudwatch_dashboard.foobar\" , & dashboard ), resource . TestCheckResourceAttr ( \"aws_cloudwatch_dashboard.foobar\" , \"dashboard_name\" , testAccDashboardName ( rInt )), ), }, }, }) } When executing the test, the following steps are taken for each TestStep : The Terraform configuration required for the test is applied. This is responsible for configuring the resource under test, and any dependencies it may have. For example, to test the aws_cloudwatch_dashboard resource, a valid configuration with the requisite fields is required. This results in configuration which looks like this: resource \"aws_cloudwatch_dashboard\" \"foobar\" { dashboard_name = \"terraform-test-dashboard-%d\" dashboard_body = << EOF { \"widgets\": [{ \"type\": \"text\", \"x\": 0, \"y\": 0, \"width\": 6, \"height\": 6, \"properties\": { \"markdown\": \"Hi there from Terraform: CloudWatch\" } }] } EOF } Assertions are run using the provider API. These use the provider API directly rather than asserting against the resource state. For example, to verify that the aws_cloudwatch_dashboard described above was created successfully, a test function like this is used: func testAccCheckDashboardExists ( n string , dashboard * cloudwatch . GetDashboardOutput ) resource . TestCheckFunc { return func ( s * terraform . State ) error { rs , ok := s . RootModule (). Resources [ n ] if ! ok { return fmt . Errorf ( \"Not found: %s\" , n ) } conn := acctest . Provider . Meta ().( * conns . AWSClient ). CloudWatchConn params := cloudwatch . GetDashboardInput { DashboardName : aws . String ( rs . Primary . ID ), } resp , err := conn . GetDashboard ( & params ) if err != nil { return err } * dashboard = * resp return nil } } Notice that the only information used from the Terraform state is the ID of the resource. For computed properties, we instead assert that the value saved in the Terraform state was the expected value if possible. The testing framework provides helper functions for several common types of check - for example: ```go resource.TestCheckResourceAttr(\"aws_cloudwatch_dashboard.foobar\", \"dashboard_name\", testAccDashboardName(rInt)), ``` The resources created by the test are destroyed. This step happens automatically, and is the equivalent of calling terraform destroy . Assertions are made against the provider API to verify that the resources have indeed been removed. If these checks fail, the test fails and reports \"dangling resources\". The code to ensure that the aws_cloudwatch_dashboard shown above has been destroyed looks like this: func testAccCheckDashboardDestroy ( s * terraform . State ) error { conn := acctest . Provider . Meta ().( * conns . AWSClient ). CloudWatchConn for _ , rs := range s . RootModule (). Resources { if rs . Type != \"aws_cloudwatch_dashboard\" { continue } params := cloudwatch . GetDashboardInput { DashboardName : aws . String ( rs . Primary . ID ), } _ , err := conn . GetDashboard ( & params ) if err == nil { return fmt . Errorf ( \"Dashboard still exists: %s\" , rs . Primary . ID ) } if ! isDashboardNotFoundErr ( err ) { return err } } return nil } These functions usually test only for the resource directly under test. Resource Acceptance Testing # Most resources that implement standard Create, Read, Update, and Delete functionality should follow the pattern below. Each test type has a section that describes them in more detail: basic : This represents the bare minimum verification that the resource can be created, read, deleted, and optionally imported. disappears : A test that verifies Terraform will offer to recreate a resource if it is deleted outside of Terraform (e.g., via the Console) instead of returning an error that it cannot be found. Per Attribute : A test that verifies the resource with a single additional argument can be created, read, optionally updated (or force resource recreation), deleted, and optionally imported. The leading sections below highlight additional recommended patterns. Test Configurations # Most of the existing test configurations you will find in the Terraform AWS Provider are written in the following function-based style: func TestAccExampleThing_basic ( t * testing . T ) { // ... omitted for brevity ... resource . ParallelTest ( t , resource . TestCase { // ... omitted for brevity ... Steps : [] resource . TestStep { { Config : testAccExampleThingConfig (), // ... omitted for brevity ... }, }, }) } func testAccExampleThingConfig () string { return ` resource \"aws_example_thing\" \"test\" { # ... omitted for brevity ... } ` } Even when no values need to be passed in to the test configuration, we have found this setup to be the most flexible for allowing that to be easily implemented. Any configurable values are handled via fmt.Sprintf() . Using text/template or other templating styles is explicitly forbidden. For consistency, resources in the test configuration should be named resource \"...\" \"test\" unless multiple of that resource are necessary. We discourage re-using test configurations across test files (except for some common configuration helpers we provide) as it is much harder to discover potential testing regressions. Please also note that the newline on the first line of the configuration (before resource ) and the newline after the last line of configuration (after } ) are important to allow test configurations to be easily combined without generating Terraform configuration language syntax errors. Combining Test Configurations # We include a helper function, acctest.ConfigCompose() for iteratively building and chaining test configurations together. It accepts any number of configurations to combine them. This simplifies a single resource's testing by allowing the creation of a \"base\" test configuration for all the other test configurations (if necessary) and also allows the maintainers to curate common configurations. Each of these is described in more detail in below sections. Please note that we do discourage excessive chaining of configurations such as implementing multiple layers of \"base\" configurations. Usually these configurations are harder for maintainers and other future readers to understand due to the multiple levels of indirection. Base Test Configurations # If a resource requires the same Terraform configuration as a prerequisite for all test configurations, then a common pattern is implementing a \"base\" test configuration that is combined with each test configuration. For example: func testAccExampleThingConfigBase () string { return ` resource \"aws_iam_role\" \"test\" { # ... omitted for brevity ... } resource \"aws_iam_role_policy\" \"test\" { # ... omitted for brevity ... } ` } func testAccExampleThingConfig () string { return acctest . ConfigCompose ( testAccExampleThingConfigBase (), ` resource \"aws_example_thing\" \"test\" { # ... omitted for brevity ... } ` ) } Available Common Test Configurations # These test configurations are typical implementations we have found or allow testing to implement best practices easier, since the Terraform AWS Provider testing is expected to run against various AWS Regions and Partitions. acctest.AvailableEC2InstanceTypeForRegion(\"type1\", \"type2\", ...) : Typically used to replace hardcoded EC2 Instance Types. Uses aws_ec2_instance_type_offering data source to return an available EC2 Instance Type in preferred ordering. Reference the instance type via: data.aws_ec2_instance_type_offering.available.instance_type . Use acctest.AvailableEC2InstanceTypeForRegionNamed(\"name\", \"type1\", \"type2\", ...) to specify a name for the data source acctest.ConfigLatestAmazonLinuxHvmEbsAmi() : Typically used to replace hardcoded EC2 Image IDs ( ami-12345678 ). Uses aws_ami data source to find the latest Amazon Linux image. Reference the AMI ID via: data.aws_ami.amzn-ami-minimal-hvm-ebs.id Randomized Naming # For AWS resources that require unique naming, the tests should implement a randomized name, typically coded as a rName variable in the test and passed as a parameter to creating the test configuration. For example: func TestAccExampleThing_basic ( t * testing . T ) { rName := sdkacctest . RandomWithPrefix ( acctest . ResourcePrefix ) // ... omitted for brevity ... resource . ParallelTest ( t , resource . TestCase { // ... omitted for brevity ... Steps : [] resource . TestStep { { Config : testAccExampleThingConfigName ( rName ), // ... omitted for brevity ... }, }, }) } func testAccExampleThingConfigName ( rName string ) string { return fmt . Sprintf ( ` resource \"aws_example_thing\" \"test\" { name = %[1]q } ` , rName ) } Typically the rName is always the first argument to the test configuration function, if used, for consistency. Note that if rName (or any other variable) is used multiple times in the fmt.Sprintf() statement, do not repeat rName in the fmt.Sprintf() arguments. Using fmt.Sprintf(..., rName, rName) , for example, would not be correct. Instead, use the indexed %[1]q (or %[x]q , %[x]s , %[x]t , or %[x]d , where x represents the index number) verb multiple times. For example: func testAccExampleThingConfigName ( rName string ) string { return fmt . Sprintf ( ` resource \"aws_example_thing\" \"test\" { name = %[1]q tags = { Name = %[1]q } } ` , rName ) } Other Recommended Variables # We also typically recommend saving a resourceName variable in the test that contains the resource reference, e.g., aws_example_thing.test , which is repeatedly used in the checks. For example: func TestAccExampleThing_basic ( t * testing . T ) { // ... omitted for brevity ... resourceName := \"aws_example_thing.test\" resource . ParallelTest ( t , resource . TestCase { // ... omitted for brevity ... Steps : [] resource . TestStep { { // ... omitted for brevity ... Check : resource . ComposeTestCheckFunc ( testAccCheckExampleThingExists ( resourceName ), acctest . CheckResourceAttrRegionalARN ( resourceName , \"arn\" , \"example\" , fmt . Sprintf ( \"thing/%s\" , rName )), resource . TestCheckResourceAttr ( resourceName , \"description\" , \"\" ), resource . TestCheckResourceAttr ( resourceName , \"name\" , rName ), ), }, { ResourceName : resourceName , ImportState : true , ImportStateVerify : true , }, }, }) } // below all TestAcc functions func testAccExampleThingConfigName ( rName string ) string { return fmt . Sprintf ( ` resource \"aws_example_thing\" \"test\" { name = %[1]q } ` , rName ) } Basic Acceptance Tests # Usually this test is implemented first. The test configuration should contain only required arguments ( Required: true attributes) and it should check the values of all read-only attributes ( Computed: true without Optional: true ). If the resource supports it, it verifies import. It should NOT perform other TestStep such as updates or verify recreation. These are typically named TestAcc{SERVICE}{THING}_basic , e.g., TestAccCloudWatchDashboard_basic For example: func TestAccExampleThing_basic ( t * testing . T ) { rName := sdkacctest . RandomWithPrefix ( acctest . ResourcePrefix ) resourceName := \"aws_example_thing.test\" resource . ParallelTest ( t , resource . TestCase { PreCheck : func () { acctest . PreCheck ( t ) }, ErrorCheck : acctest . ErrorCheck ( t , service . EndpointsID ), ProviderFactories : acctest . ProviderFactories , CheckDestroy : testAccCheckExampleThingDestroy , Steps : [] resource . TestStep { { Config : testAccExampleThingConfigName ( rName ), Check : resource . ComposeTestCheckFunc ( testAccCheckExampleThingExists ( resourceName ), acctest . CheckResourceAttrRegionalARN ( resourceName , \"arn\" , \"example\" , fmt . Sprintf ( \"thing/%s\" , rName )), resource . TestCheckResourceAttr ( resourceName , \"description\" , \"\" ), resource . TestCheckResourceAttr ( resourceName , \"name\" , rName ), ), }, { ResourceName : resourceName , ImportState : true , ImportStateVerify : true , }, }, }) } // below all TestAcc functions func testAccExampleThingConfigName ( rName string ) string { return fmt . Sprintf ( ` resource \"aws_example_thing\" \"test\" { name = %[1]q } ` , rName ) } PreChecks # Acceptance test cases have a PreCheck. The PreCheck ensures that the testing environment meets certain preconditions. If the environment does not meet the preconditions, Go skips the test. Skipping a test avoids reporting a failure and wasting resources where the test cannot succeed. Here is an example of the default PreCheck: func TestAccExampleThing_basic ( t * testing . T ) { rName := sdkacctest . RandomWithPrefix ( acctest . ResourcePrefix ) resourceName := \"aws_example_thing.test\" resource . ParallelTest ( t , resource . TestCase { PreCheck : func () { acctest . PreCheck ( t ) }, // ... additional checks follow ... }) } Extend the default PreCheck by adding calls to functions in the anonymous PreCheck function. The functions can be existing functions in the provider or custom functions you add for new capabilities. Standard Provider PreChecks # If you add a new test that has preconditions which are checked by an existing provider function, use that standard PreCheck instead of creating a new one. Some existing tests are missing standard PreChecks and you can help by adding them where appropriate. These are some of the standard provider PreChecks: acctest.PreCheckPartitionHasService(serviceId string, t *testing.T) checks whether the current partition lists the service as part of its offerings. Note: AWS may not add new or public preview services to the service list immediately. This function will return a false positive in that case. acctest.PreCheckOrganizationsAccount(t *testing.T) checks whether the current account can perform AWS Organizations tests. acctest.PreCheckAlternateAccount(t *testing.T) checks whether the environment is set up for tests across accounts. acctest.PreCheckMultipleRegion(t *testing.T, regions int) checks whether the environment is set up for tests across regions. This is an example of using a standard PreCheck function. For an established service, such as WAF or FSx, use acctest.PreCheckPartitionHasService() and the service endpoint ID to check that a partition supports the service. func TestAccExampleThing_basic ( t * testing . T ) { rName := sdkacctest . RandomWithPrefix ( acctest . ResourcePrefix ) resourceName := \"aws_example_thing.test\" resource . ParallelTest ( t , resource . TestCase { PreCheck : func () { acctest . PreCheck ( t ); acctest . PreCheckPartitionHasService ( waf . EndpointsID , t ) }, // ... additional checks follow ... }) } Custom PreChecks # In situations where standard PreChecks do not test for the required preconditions, create a custom PreCheck. Below is an example of adding a custom PreCheck function. For a new or preview service that AWS does not include in the partition service list yet, you can verify the existence of the service with a simple read-only request (e.g., list all X service things). (For acceptance tests of established services, use acctest.PreCheckPartitionHasService() instead.) func TestAccExampleThing_basic ( t * testing . T ) { rName := sdkacctest . RandomWithPrefix ( acctest . ResourcePrefix ) resourceName := \"aws_example_thing.test\" resource . ParallelTest ( t , resource . TestCase { PreCheck : func () { acctest . PreCheck ( t ), testAccPreCheckExample ( t ) }, // ... additional checks follow ... }) } func testAccPreCheckExample ( t * testing . T ) { conn := acctest . Provider . Meta ().( * conns . AWSClient ). ExampleConn input := & example . ListThingsInput {} _ , err := conn . ListThings ( input ) if testAccPreCheckSkipError ( err ) { t . Skipf ( \"skipping acceptance testing: %s\" , err ) } if err != nil { t . Fatalf ( \"unexpected PreCheck error: %s\" , err ) } } ErrorChecks # Acceptance test cases have an ErrorCheck. The ErrorCheck provides a chance to take a look at errors before the test fails. While most errors should result in test failure, some should not. For example, an error that indicates an API operation is not supported in a particular region should cause the test to skip instead of fail. Since errors should flow through the ErrorCheck, do not handle the vast majority of failing conditions. Instead, in ErrorCheck, focus on the rare errors that should cause a test to skip, or in other words, be ignored. Common ErrorCheck # In many situations, the common ErrorCheck is sufficient. It will skip tests for several normal occurrences such as when AWS reports a feature is not supported in the current region. Here is an example of the common ErrorCheck: func TestAccExampleThing_basic ( t * testing . T ) { rName := sdkacctest . RandomWithPrefix ( acctest . ResourcePrefix ) resourceName := \"aws_example_thing.test\" resource . ParallelTest ( t , resource . TestCase { // PreCheck ErrorCheck : acctest . ErrorCheck ( t , service . EndpointsID ), // ... additional checks follow ... }) } Service-Specific ErrorChecks # However, some services have special conditions that aren't caught by the common ErrorCheck. In these cases, you can create a service-specific ErrorCheck. To add a service-specific ErrorCheck, follow these steps: Make sure there is not already an ErrorCheck for the service you have in mind. For example, search the codebase for acctest.RegisterServiceErrorCheckFunc(service.EndpointsID replacing \"service\" with the package name of the service you're working on (e.g., ec2 ). If there is already an ErrorCheck for the service, add to the existing service-specific ErrorCheck. Create the service-specific ErrorCheck in an _test.go file for the service. See the example below. Register the new service-specific ErrorCheck in the init() at the top of the _test.go file. See the example below. An example of adding a service-specific ErrorCheck: // just after the imports, create or add to the init() function func init () { acctest . RegisterServiceErrorCheck ( service . EndpointsID , testAccErrorCheckSkipService ) } // ... additional code and tests ... // this is the service-specific ErrorCheck func testAccErrorCheckSkipService ( t * testing . T ) resource . ErrorCheckFunc { return acctest . ErrorCheckSkipMessagesContaining ( t , \"Error message specific to the service that indicates unsupported features\" , \"You can include from one to many portions of error messages\" , \"Be careful to not inadvertently capture errors that should not be skipped\" , ) } Long-Running Test Guards # For any acceptance tests that typically run longer than 300 seconds (5 minutes), add a -short test guard at the top of the test function. For example: func TestAccExampleThing_longRunningTest ( t * testing . T ) { if testing . Short () { t . Skip ( \"skipping long-running test in short mode\" ) } // ... omitted for brevity ... resource . ParallelTest ( t , resource . TestCase { // ... omitted for brevity ... }) } When running acceptances tests, tests with these guards can be skipped using the Go -short flag. See Running Only Short Tests for examples. Disappears Acceptance Tests # This test is generally implemented second. It is straightforward to setup once the basic test is passing since it can reuse that test configuration. It prevents a common bug report with Terraform resources that error when they can not be found (e.g., deleted outside Terraform). These are typically named TestAcc{SERVICE}{THING}_disappears , e.g., TestAccCloudWatchDashboard_disappears For example: func TestAccExampleThing_disappears ( t * testing . T ) { rName := sdkacctest . RandomWithPrefix ( acctest . ResourcePrefix ) resourceName := \"aws_example_thing.test\" resource . ParallelTest ( t , resource . TestCase { PreCheck : func () { acctest . PreCheck ( t ) }, ErrorCheck : acctest . ErrorCheck ( t , service . EndpointsID ), ProviderFactories : acctest . ProviderFactories , CheckDestroy : testAccCheckExampleThingDestroy , Steps : [] resource . TestStep { { Config : testAccExampleThingConfigName ( rName ), Check : resource . ComposeTestCheckFunc ( testAccCheckExampleThingExists ( resourceName , & job ), acctest . CheckResourceDisappears ( acctest . Provider , ResourceExampleThing (), resourceName ), ), ExpectNonEmptyPlan : true , }, }, }) } If this test does fail, the fix for this is generally adding error handling immediately after the Read API call that catches the error and tells Terraform to remove the resource before returning the error: output , err := conn . GetThing ( input ) if isAWSErr ( err , example . ErrCodeResourceNotFound , \"\" ) { log . Printf ( \"[WARN] Example Thing (%s) not found, removing from state\" , d . Id ()) d . SetId ( \"\" ) return nil } if err != nil { return fmt . Errorf ( \"error reading Example Thing (%s): %w\" , d . Id (), err ) } For children resources that are encapsulated by a parent resource, it is also preferable to verify that removing the parent resource will not generate an error either. These are typically named TestAcc{SERVICE}{THING}_disappears_{PARENT} , e.g., TestAccRoute53ZoneAssociation_disappears_Vpc func TestAccExampleChildThing_disappears_ParentThing ( t * testing . T ) { rName := sdkacctest . RandomWithPrefix ( acctest . ResourcePrefix ) parentResourceName := \"aws_example_parent_thing.test\" resourceName := \"aws_example_child_thing.test\" resource . ParallelTest ( t , resource . TestCase { PreCheck : func () { acctest . PreCheck ( t ) }, ErrorCheck : acctest . ErrorCheck ( t , service . EndpointsID ), ProviderFactories : acctest . ProviderFactories , CheckDestroy : testAccCheckExampleChildThingDestroy , Steps : [] resource . TestStep { { Config : testAccExampleThingConfigName ( rName ), Check : resource . ComposeTestCheckFunc ( testAccCheckExampleThingExists ( resourceName ), acctest . CheckResourceDisappears ( acctest . Provider , ResourceExampleParentThing (), parentResourceName ), ), ExpectNonEmptyPlan : true , }, }, }) } Per Attribute Acceptance Tests # These are typically named TestAcc{SERVICE}{THING}_{ATTRIBUTE} , e.g., TestAccCloudWatchDashboard_Name For example: func TestAccExampleThing_Description ( t * testing . T ) { rName := sdkacctest . RandomWithPrefix ( acctest . ResourcePrefix ) resourceName := \"aws_example_thing.test\" resource . ParallelTest ( t , resource . TestCase { PreCheck : func () { acctest . PreCheck ( t ) }, ErrorCheck : acctest . ErrorCheck ( t , service . EndpointsID ), ProviderFactories : acctest . ProviderFactories , CheckDestroy : testAccCheckExampleThingDestroy , Steps : [] resource . TestStep { { Config : testAccExampleThingConfigDescription ( rName , \"description1\" ), Check : resource . ComposeTestCheckFunc ( testAccCheckExampleThingExists ( resourceName ), resource . TestCheckResourceAttr ( resourceName , \"description\" , \"description1\" ), ), }, { ResourceName : resourceName , ImportState : true , ImportStateVerify : true , }, { Config : testAccExampleThingConfigDescription ( rName , \"description2\" ), Check : resource . ComposeTestCheckFunc ( testAccCheckExampleThingExists ( resourceName ), resource . TestCheckResourceAttr ( resourceName , \"description\" , \"description2\" ), ), }, }, }) } // below all TestAcc functions func testAccExampleThingConfigDescription ( rName string , description string ) string { return fmt . Sprintf ( ` resource \"aws_example_thing\" \"test\" { description = %[2]q name = %[1]q } ` , rName , description ) } Cross-Account Acceptance Tests # When testing requires AWS infrastructure in a second AWS account, the below changes to the normal setup will allow the management or reference of resources and data sources across accounts: In the PreCheck function, include acctest.PreCheckOrganizationsAccount(t) to ensure a standardized set of information is required for cross-account testing credentials Declare a providers variable at the top of the test function: var providers []*schema.Provider Switch usage of ProviderFactories: acctest.ProviderFactories to ProviderFactories: acctest.FactoriesAlternate(&providers) Add acctest.ConfigAlternateAccountProvider() to the test configuration and use provider = awsalternate for cross-account resources. The resource that is the focus of the acceptance test should not use the alternate provider identification to simplify the testing setup. For any TestStep that includes ImportState: true , add the Config that matches the previous TestStep Config An example acceptance test implementation can be seen below: func TestAccExample_basic ( t * testing . T ) { var providers [] * schema . Provider resourceName := \"aws_example.test\" resource . ParallelTest ( t , resource . TestCase { PreCheck : func () { acctest . PreCheck ( t ) acctest . PreCheckOrganizationsAccount ( t ) }, ErrorCheck : acctest . ErrorCheck ( t , service . EndpointsID ), ProviderFactories : acctest . FactoriesAlternate ( & providers ), CheckDestroy : testAccCheckExampleDestroy , Steps : [] resource . TestStep { { Config : testAccExampleConfig (), Check : resource . ComposeTestCheckFunc ( testAccCheckExampleExists ( resourceName ), // ... additional checks ... ), }, { Config : testAccExampleConfig (), ResourceName : resourceName , ImportState : true , ImportStateVerify : true , }, }, }) } func testAccExampleConfig () string { return acctest . ConfigAlternateAccountProvider () + fmt . Sprintf ( ` # Cross account resources should be handled by the cross account provider. # The standardized provider block to use is awsalternate as seen below. resource \"aws_cross_account_example\" \"test\" { provider = awsalternate # ... configuration ... } # The resource that is the focus of the testing should be handled by the default provider, # which is automatically done by not specifying the provider configuration in the resource. resource \"aws_example\" \"test\" { # ... configuration ... } ` ) } Searching for usage of acctest.PreCheckOrganizationsAccount in the codebase will yield real world examples of this setup in action. Cross-Region Acceptance Tests # When testing requires AWS infrastructure in a second or third AWS region, the below changes to the normal setup will allow the management or reference of resources and data sources across regions: In the PreCheck function, include acctest.PreCheckMultipleRegion(t, ###) to ensure a standardized set of information is required for cross-region testing configuration. If the infrastructure in the second AWS region is also in a second AWS account also include acctest.PreCheckOrganizationsAccount(t) Declare a providers variable at the top of the test function: var providers []*schema.Provider Switch usage of ProviderFactories: acctest.ProviderFactories to ProviderFactories: acctest.FactoriesMultipleRegion(&providers, 2) (where the last parameter is number of regions) Add acctest.ConfigMultipleRegionProvider(###) to the test configuration and use provider = awsalternate (and potentially provider = awsthird ) for cross-region resources. The resource that is the focus of the acceptance test should not use the alternative providers to simplify the testing setup. If the infrastructure in the second AWS region is also in a second AWS account use testAccAlternateAccountAlternateRegionProviderConfig() (EC2) instead For any TestStep that includes ImportState: true , add the Config that matches the previous TestStep Config An example acceptance test implementation can be seen below: func TestAccExample_basic ( t * testing . T ) { var providers [] * schema . Provider resourceName := \"aws_example.test\" resource . ParallelTest ( t , resource . TestCase { PreCheck : func () { acctest . PreCheck ( t ) acctest . PreCheckMultipleRegion ( t , 2 ) }, ErrorCheck : acctest . ErrorCheck ( t , service . EndpointsID ), ProviderFactories : acctest . FactoriesMultipleRegion ( & providers , 2 ), CheckDestroy : testAccCheckExampleDestroy , Steps : [] resource . TestStep { { Config : testAccExampleConfig (), Check : resource . ComposeTestCheckFunc ( testAccCheckExampleExists ( resourceName ), // ... additional checks ... ), }, { Config : testAccExampleConfig (), ResourceName : resourceName , ImportState : true , ImportStateVerify : true , }, }, }) } func testAccExampleConfig () string { return acctest . ConfigMultipleRegionProvider ( 2 ) + fmt . Sprintf ( ` # Cross region resources should be handled by the cross region provider. # The standardized provider is awsalternate as seen below. resource \"aws_cross_region_example\" \"test\" { provider = awsalternate # ... configuration ... } # The resource that is the focus of the testing should be handled by the default provider, # which is automatically done by not specifying the provider configuration in the resource. resource \"aws_example\" \"test\" { # ... configuration ... } ` ) } Searching for usage of acctest.PreCheckMultipleRegion in the codebase will yield real world examples of this setup in action. Service-Specific Region Acceptance Testing # Certain AWS service APIs are only available in specific AWS regions. For example as of this writing, the pricing service is available in ap-south-1 and us-east-1 , but no other regions or partitions. When encountering these types of services, the acceptance testing can be setup to automatically detect the correct region(s), while skipping the testing in unsupported partitions. To prepare the shared service functionality, create a file named internal/service/{SERVICE}/acc_test.go . A starting example with the Pricing service ( internal/service/pricing/acc_test.go ): package aws import ( \"context\" \"sync\" \"testing\" \"github.com/aws/aws-sdk-go/aws/endpoints\" \"github.com/aws/aws-sdk-go/service/pricing\" \"github.com/hashicorp/terraform-plugin-sdk/v2/diag\" \"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema\" \"github.com/hashicorp/terraform-plugin-sdk/v2/terraform\" \"github.com/hashicorp/terraform-provider-aws/internal/acctest\" \"github.com/hashicorp/terraform-provider-aws/internal/provider\" ) // testAccPricingRegion is the chosen Pricing testing region // // Cached to prevent issues should multiple regions become available. var testAccPricingRegion string // testAccProviderPricing is the Pricing provider instance // // This Provider can be used in testing code for API calls without requiring // the use of saving and referencing specific ProviderFactories instances. // // testAccPreCheckPricing(t) must be called before using this provider instance. var testAccProviderPricing * schema . Provider // testAccProviderPricingConfigure ensures the provider is only configured once var testAccProviderPricingConfigure sync . Once // testAccPreCheckPricing verifies AWS credentials and that Pricing is supported func testAccPreCheckPricing ( t * testing . T ) { acctest . PreCheckPartitionHasService ( pricing . EndpointsID , t ) // Since we are outside the scope of the Terraform configuration we must // call Configure() to properly initialize the provider configuration. testAccProviderPricingConfigure . Do ( func () { testAccProviderPricing = provider . Provider () config := map [ string ] interface {}{ \"region\" : testAccGetPricingRegion (), } diags := testAccProviderPricing . Configure ( context . Background (), terraform . NewResourceConfigRaw ( config )) if diags != nil && diags . HasError () { for _ , d := range diags { if d . Severity == diag . Error { t . Fatalf ( \"error configuring Pricing provider: %s\" , d . Summary ) } } } }) } // testAccPricingRegionProviderConfig is the Terraform provider configuration for Pricing region testing // // Testing Pricing assumes no other provider configurations // are necessary and overwrites the \"aws\" provider configuration. func testAccPricingRegionProviderConfig () string { return acctest . ConfigRegionalProvider ( testAccGetPricingRegion ()) } // testAccGetPricingRegion returns the Pricing region for testing func testAccGetPricingRegion () string { if testAccPricingRegion != \"\" { return testAccPricingRegion } if rs , ok := endpoints . RegionsForService ( endpoints . DefaultPartitions (), testAccGetPartition (), pricing . ServiceName ); ok { // return available region (random if multiple) for regionID := range rs { testAccPricingRegion = regionID return testAccPricingRegion } } testAccPricingRegion = testAccGetRegion () return testAccPricingRegion } For the resource or data source acceptance tests, the key items to adjust are: Ensure TestCase uses ProviderFactories: acctest.ProviderFactories instead of Providers: acctest.Providers Add the call for the new PreCheck function (keeping acctest.PreCheck(t) ), e.g. PreCheck: func() { acctest.PreCheck(t); testAccPreCheckPricing(t) }, If the testing is for a managed resource with a CheckDestroy function, ensure it uses the new provider instance, e.g. testAccProviderPricing , instead of acctest.Provider . If the testing is for a managed resource with a Check...Exists function, ensure it uses the new provider instance, e.g. testAccProviderPricing , instead of acctest.Provider . In each TestStep configuration, ensure the new provider configuration function is called, e.g. func testAccDataSourcePricingProductConfigRedshift () string { return acctest . ConfigCompose ( testAccPricingRegionProviderConfig (), ` # ... test configuration ... ` ) } If the testing configurations require more than one region, reach out to the maintainers for further assistance. Acceptance Test Concurrency # Certain AWS service APIs allow a limited number of a certain component, while the acceptance testing runs at a default concurrency of twenty tests at a time. For example as of this writing, the SageMaker service only allows one SageMaker Domain per AWS Region. Running the tests with the default concurrency will fail with API errors relating to the component quota being exceeded. When encountering these types of components, the acceptance testing can be setup to limit the available concurrency of that particular component. When limited to one component at a time, this may also be referred to as serializing the acceptance tests. To convert to serialized (one test at a time) acceptance testing: Convert all existing capital T test functions with the limited component to begin with a lowercase t , e.g., TestAccSageMakerDomain_basic becomes testAccSageMakerDomain_basic . This will prevent the test framework from executing these tests directly as the prefix Test is required. In each of these test functions, convert resource.ParallelTest to resource.Test Create a capital T TestAcc{Service}{Thing}_serial test function that then references all the lowercase t test functions. If multiple test files are referenced, this new test be created in a new shared file such as internal/service/{SERVICE}/{SERVICE}_test.go . The contents of this test can be setup like the following: func TestAccExampleThing_serial ( t * testing . T ) { testCases := map [ string ] map [ string ] func ( t * testing . T ){ \"Thing\" : { \"basic\" : testAccExampleThing_basic , \"disappears\" : testAccExampleThing_disappears , // ... potentially other resource tests ... }, // ... potentially other top level resource test groups ... } for group , m := range testCases { m := m t . Run ( group , func ( t * testing . T ) { for name , tc := range m { tc := tc t . Run ( name , func ( t * testing . T ) { tc ( t ) }) } }) } } NOTE: Future iterations of these acceptance testing concurrency instructions will include the ability to handle more than one component at a time including service quota lookup, if supported by the service API. Data Source Acceptance Testing # Writing acceptance testing for data sources is similar to resources, with the biggest changes being: Adding DataSource to the test and configuration naming, such as TestAccExampleThingDataSource_Filter The basic test may be named after the easiest lookup attribute instead, e.g., TestAccExampleThingDataSource_Name No disappears testing Almost all checks should be done with resource.TestCheckResourceAttrPair() to compare the data source attributes to the resource attributes The usage of an additional dataSourceName variable to store a data source reference, e.g., data.aws_example_thing.test Data sources testing should still use the CheckDestroy function of the resource, just to continue verifying that there are no dangling AWS resources after a test is run. Please note that we do not recommend re-using test configurations between resources and their associated data source as it is harder to discover testing regressions. Authors are encouraged to potentially implement similar \"base\" configurations though. For example: func TestAccExampleThingDataSource_Name ( t * testing . T ) { rName := sdkacctest . RandomWithPrefix ( acctest . ResourcePrefix ) dataSourceName := \"data.aws_example_thing.test\" resourceName := \"aws_example_thing.test\" resource . ParallelTest ( t , resource . TestCase { PreCheck : func () { acctest . PreCheck ( t ) }, ErrorCheck : acctest . ErrorCheck ( t , service . EndpointsID ), ProviderFactories : acctest . ProviderFactories , CheckDestroy : testAccCheckExampleThingDestroy , Steps : [] resource . TestStep { { Config : testAccExampleThingDataSourceConfigName ( rName ), Check : resource . ComposeTestCheckFunc ( testAccCheckExampleThingExists ( resourceName ), resource . TestCheckResourceAttrPair ( resourceName , \"arn\" , dataSourceName , \"arn\" ), resource . TestCheckResourceAttrPair ( resourceName , \"description\" , dataSourceName , \"description\" ), resource . TestCheckResourceAttrPair ( resourceName , \"name\" , dataSourceName , \"name\" ), ), }, }, }) } // below all TestAcc functions func testAccExampleThingDataSourceConfigName ( rName string ) string { return fmt . Sprintf ( ` resource \"aws_example_thing\" \"test\" { name = %[1]q } data \"aws_example_thing\" \"test\" { name = aws_example_thing.test.name } ` , rName ) } Acceptance Test Sweepers # When running the acceptance tests, especially when developing or troubleshooting Terraform resources, its possible for code bugs or other issues to prevent the proper destruction of AWS infrastructure. To prevent lingering resources from consuming quota or causing unexpected billing, the Terraform Plugin SDK supports the test sweeper framework to clear out an AWS region of all resources. This section is meant to augment the Extending Terraform documentation on test sweepers with Terraform AWS Provider specific details. Running Test Sweepers # WARNING: Test Sweepers will destroy AWS infrastructure and backups in the target AWS account and region! These are designed to override any API deletion protection. Never run these outside a development AWS account that should be completely empty of resources. To run the sweepers for all resources in us-west-2 and us-east-1 (default testing regions): $ make sweep To run a specific resource sweeper: $ SWEEPARGS = -sweep-run = aws_example_thing make sweep To run sweepers with an assumed role, use the following additional environment variables: TF_AWS_ASSUME_ROLE_ARN - Required. TF_AWS_ASSUME_ROLE_DURATION - Optional, defaults to 1 hour (3600). TF_AWS_ASSUME_ROLE_EXTERNAL_ID - Optional. TF_AWS_ASSUME_ROLE_SESSION_NAME - Optional. Sweeper Checklists # [ ] Add Service To Sweeper List : To allow sweeping for a given service, it needs to be registered in the list of services to be sweeped, at internal/sweep/sweep_test.go . [ ] Add Resource Sweeper Implementation : See Writing Test Sweepers . Writing Test Sweepers # The first step is to initialize the resource into the test sweeper framework: func init () { resource . AddTestSweepers ( \"aws_example_thing\" , & resource . Sweeper { Name : \"aws_example_thing\" , F : sweepThings , // Optionally Dependencies : [] string { \"aws_other_thing\" , }, }) } Then add the actual implementation. Preferably, if a paginated SDK call is available: func sweepThings ( region string ) error { client , err := sweep . SharedRegionalSweepClient ( region ) if err != nil { return fmt . Errorf ( \"error getting client: %w\" , err ) } conn := client .( * conns . AWSClient ). ExampleConn sweepResources := make ([] * sweep . SweepResource , 0 ) var errs * multierror . Error input := & example . ListThingsInput {} err = conn . ListThingsPages ( input , func ( page * example . ListThingsOutput , lastPage bool ) bool { if page == nil { return ! lastPage } for _ , thing := range page . Things { r := ResourceThing () d := r . Data ( nil ) id := aws . StringValue ( thing . Id ) d . SetId ( id ) // Perform resource specific pre-sweep setup. // For example, you may need to perform one or more of these types of pre-sweep tasks, specific to the resource: // // err := r.Read(d, client) // fill in data // d.Set(\"skip_final_snapshot\", true) // set an argument in order to delete // This \"if\" is only needed if the pre-sweep setup can produce errors. // Otherwise, do not include it. if err != nil { err := fmt . Errorf ( \"error reading Example Thing (%s): %w\" , id , err ) log . Printf ( \"[ERROR] %s\" , err ) errs = multierror . Append ( errs , err ) continue } sweepResources = append ( sweepResources , sweep . NewSweepResource ( r , d , client )) } return ! lastPage }) if err != nil { errs = multierror . Append ( errs , fmt . Errorf ( \"error listing Example Thing for %s: %w\" , region , err )) } if err := sweep . SweepOrchestrator ( sweepResources ); err != nil { errs = multierror . Append ( errs , fmt . Errorf ( \"error sweeping Example Thing for %s: %w\" , region , err )) } if sweep . SkipSweepError ( err ) { log . Printf ( \"[WARN] Skipping Example Thing sweep for %s: %s\" , region , errs ) return nil } return errs . ErrorOrNil () } Otherwise, if no paginated SDK call is available: func sweepThings ( region string ) error { client , err := sweep . SharedRegionalSweepClient ( region ) if err != nil { return fmt . Errorf ( \"error getting client: %w\" , err ) } conn := client .( * conns . AWSClient ). ExampleConn sweepResources := make ([] * sweep . SweepResource , 0 ) var errs * multierror . Error input := & example . ListThingsInput {} for { output , err := conn . ListThings ( input ) for _ , thing := range output . Things { r := ResourceThing () d := r . Data ( nil ) id := aws . StringValue ( thing . Id ) d . SetId ( id ) // Perform resource specific pre-sweep setup. // For example, you may need to perform one or more of these types of pre-sweep tasks, specific to the resource: // // err := r.Read(d, client) // fill in data // d.Set(\"skip_final_snapshot\", true) // set an argument in order to delete // This \"if\" is only needed if the pre-sweep setup can produce errors. // Otherwise, do not include it. if err != nil { err := fmt . Errorf ( \"error reading Example Thing (%s): %w\" , id , err ) log . Printf ( \"[ERROR] %s\" , err ) errs = multierror . Append ( errs , err ) continue } sweepResources = append ( sweepResources , sweep . NewSweepResource ( r , d , client )) } if aws . StringValue ( output . NextToken ) == \"\" { break } input . NextToken = output . NextToken } if err := sweep . SweepOrchestrator ( sweepResources ); err != nil { errs = multierror . Append ( errs , fmt . Errorf ( \"error sweeping Example Thing for %s: %w\" , region , err )) } if sweep . SkipSweepError ( err ) { log . Printf ( \"[WARN] Skipping Example Thing sweep for %s: %s\" , region , errs ) return nil } return errs . ErrorOrNil () } Acceptance Test Checklists # There are several aspects to writing good acceptance tests. These checklists will help ensure effective testing from the design stage through to implementation details. Basic Acceptance Test Design # These are basic principles to help guide the creation of acceptance tests. [ ] Covers Changes : Every line of resource or data source code added or changed should be covered by one or more tests. For example, if a resource has two ways of functioning, tests should cover both possible paths. Nearly every codebase change needs test coverage to ensure functionality and prevent future regressions. If a bug or other problem prompted a fix, a test should be added that previously would have failed, especially if the report included a configuration. [ ] Follows the Single Responsibility Principle : Every test should have a single responsibility and effectively test that responsibility. This may include individual tests for verifying basic functionality of the resource (Create, Read, Delete), separately verifying using and updating a single attribute in a resource, or separately changing between two attributes to verify two \"modes\"/\"types\" possible with a resource configuration. In following this principle, test configurations should be as simple as possible. For example, not including extra configuration unless it is necessary for the specific test. Test Implementation # The below are required items that will be noted during submission review and prevent immediate merging: [ ] Implements CheckDestroy : Resource testing should include a CheckDestroy function (typically named testAccCheck{SERVICE}{RESOURCE}Destroy ) that calls the API to verify that the Terraform resource has been deleted or disassociated as appropriate. More information about CheckDestroy functions can be found in the Extending Terraform TestCase documentation . [ ] Implements Exists Check Function : Resource testing should include a TestCheckFunc function (typically named testAccCheck{SERVICE}{RESOURCE}Exists ) that calls the API to verify that the Terraform resource has been created or associated as appropriate. Preferably, this function will also accept a pointer to an API object representing the Terraform resource from the API response that can be set for potential usage in later TestCheckFunc . More information about these functions can be found in the Extending Terraform Custom Check Functions documentation . [ ] Excludes Provider Declarations : Test configurations should not include provider \"aws\" {...} declarations. If necessary, only the provider declarations in acctest.go should be used for multiple account/region or otherwise specialized testing. [ ] Passes in us-west-2 Region : Tests default to running in us-west-2 and at a minimum should pass in that region or include necessary PreCheck functions to skip the test when ran outside an expected environment. [ ] Includes ErrorCheck : All acceptance tests should include a call to the common ErrorCheck ( ErrorCheck: acctest.ErrorCheck(t, service.EndpointsID), ). [ ] Uses resource.ParallelTest : Tests should use resource.ParallelTest() instead of resource.Test() except where serialized testing is absolutely required. [ ] Uses fmt.Sprintf() : Test configurations preferably should to be separated into their own functions (typically named testAcc{SERVICE}{RESOURCE}Config{PURPOSE} ) that call fmt.Sprintf() for variable injection or a string const for completely static configurations. Test configurations should avoid var or other variable injection functionality such as text/template . [ ] Uses Randomized Infrastructure Naming : Test configurations that use resources where a unique name is required should generate a random name. Typically this is created via rName := sdkacctest.RandomWithPrefix(acctest.ResourcePrefix) in the acceptance test function before generating the configuration. [ ] Prevents S3 Bucket Deletion Errors : Test configurations that use aws_s3_bucket resources as a logging destination should include the force_destroy = true configuration. This is to prevent race conditions where logging objects may be written during the testing duration which will cause BucketNotEmpty errors during deletion. For resources that support import, the additional item below is required that will be noted during submission review and prevent immediate merging: [ ] Implements ImportState Testing : Tests should include an additional TestStep configuration that verifies resource import via ImportState: true and ImportStateVerify: true . This TestStep should be added to all possible tests for the resource to ensure that all infrastructure configurations are properly imported into Terraform. The below are style-based items that may be noted during review and are recommended for simplicity, consistency, and quality assurance: [ ] Uses Builtin Check Functions : Tests should use already available check functions, e.g. resource.TestCheckResourceAttr() , to verify values in the Terraform state over creating custom TestCheckFunc . More information about these functions can be found in the Extending Terraform Builtin Check Functions documentation . [ ] Uses TestCheckResoureAttrPair() for Data Sources : Tests should use resource.TestCheckResourceAttrPair() to verify values in the Terraform state for data sources attributes to compare them with their expected resource attributes. [ ] Excludes Timeouts Configurations : Test configurations should not include timeouts {...} configuration blocks except for explicit testing of customizable timeouts (typically very short timeouts with ExpectError ). [ ] Implements Default and Zero Value Validation : The basic test for a resource (typically named TestAcc{SERVICE}{RESOURCE}_basic ) should use available check functions, e.g. resource.TestCheckResourceAttr() , to verify default and zero values in the Terraform state for all attributes. Empty/missing configuration blocks can be verified with resource.TestCheckResourceAttr(resourceName, \"{ATTRIBUTE}.#\", \"0\") and empty maps with resource.TestCheckResourceAttr(resourceName, \"{ATTRIBUTE}.%\", \"0\") Avoid Hard Coding # Avoid hard coding values in acceptance test checks and configurations for consistency and testing flexibility. Resource testing is expected to pass across multiple AWS environments supported by the Terraform AWS Provider (e.g., AWS Standard and AWS GovCloud (US)). Contributors are not expected or required to perform testing outside of AWS Standard, e.g., running only in the us-west-2 region is perfectly acceptable. However, contributors are expected to avoid hard coding with these guidelines. Hardcoded Account IDs # [ ] Uses Account Data Sources : Any hardcoded account numbers in configuration, e.g., 137112412989 , should be replaced with a data source. Depending on the situation, there are several data sources for account IDs including: aws_caller_identity data source , aws_canonical_user_id data source , aws_billing_service_account data source , and aws_sagemaker_prebuilt_ecr_image data source . [ ] Uses Account Test Checks : Any check required to verify an AWS Account ID of the current testing account or another account should use one of the following available helper functions over the usage of resource.TestCheckResourceAttrSet() and resource.TestMatchResourceAttr() : acctest.CheckResourceAttrAccountID() : Validates the state value equals the AWS Account ID of the current account running the test. This is the most common implementation. acctest.MatchResourceAttrAccountID() : Validates the state value matches any AWS Account ID (e.g. a 12 digit number). This is typically only used in data source testing of AWS managed components. Here's an example of using aws_caller_identity : data \"aws_caller_identity\" \"current\" {} resource \"aws_backup_selection\" \"test\" { plan_id = aws_backup_plan.test.id name = \"tf_acc_test_backup_selection_%[1]d\" iam_role_arn = \"arn:${data.aws_partition.current.partition}:iam::${data.aws_caller_identity.current.account_id}:role/service-role/AWSBackupDefaultServiceRole\" } Hardcoded AMI IDs # [ ] Uses aws_ami Data Source : Any hardcoded AMI ID configuration, e.g. ami-12345678 , should be replaced with the aws_ami data source pointing to an Amazon Linux image. The package internal/acctest includes test configuration helper functions to simplify these lookups: acctest.ConfigLatestAmazonLinuxHvmEbsAmi() : The recommended AMI for most situations, using Amazon Linux, HVM virtualization, and EBS storage. To reference the AMI ID in the test configuration: data.aws_ami.amzn-ami-minimal-hvm-ebs.id . testAccLatestAmazonLinuxHVMInstanceStoreAMIConfig() (EC2): AMI lookup using Amazon Linux, HVM virtualization, and Instance Store storage. Should only be used in testing that requires Instance Store storage rather than EBS. To reference the AMI ID in the test configuration: data.aws_ami.amzn-ami-minimal-hvm-instance-store.id . testAccLatestAmazonLinuxPVEBSAMIConfig() (EC2): AMI lookup using Amazon Linux, Paravirtual virtualization, and EBS storage. Should only be used in testing that requires Paravirtual over Hardware Virtual Machine (HVM) virtualization. To reference the AMI ID in the test configuration: data.aws_ami.amzn-ami-minimal-pv-ebs.id . configLatestAmazonLinuxPvInstanceStoreAmi (EC2): AMI lookup using Amazon Linux, Paravirtual virtualization, and Instance Store storage. Should only be used in testing that requires Paravirtual virtualization over HVM and Instance Store storage over EBS. To reference the AMI ID in the test configuration: data.aws_ami.amzn-ami-minimal-pv-instance-store.id . testAccLatestWindowsServer2016CoreAMIConfig() (EC2): AMI lookup using Windows Server 2016 Core, HVM virtualization, and EBS storage. Should only be used in testing that requires Windows. To reference the AMI ID in the test configuration: data.aws_ami.win2016core-ami.id . Here's an example of using acctest.ConfigLatestAmazonLinuxHvmEbsAmi() and data.aws_ami.amzn-ami-minimal-hvm-ebs.id : func testAccLaunchConfigurationDataSourceConfig_basic ( rName string ) string { return acctest . ConfigCompose ( acctest . ConfigLatestAmazonLinuxHvmEbsAmi (), fmt . Sprintf ( ` resource \"aws_launch_configuration\" \"test\" { name = %[1]q image_id = data.aws_ami.amzn-ami-minimal-hvm-ebs.id instance_type = \"m1.small\" } ` , rName )) } Hardcoded Availability Zones # [ ] Uses aws_availability_zones Data Source : Any hardcoded AWS Availability Zone configuration, e.g. us-west-2a , should be replaced with the aws_availability_zones data source . Use the convenience function called acctest.ConfigAvailableAZsNoOptIn() (defined in internal/acctest/acctest.go ) to declare data \"aws_availability_zones\" \"available\" {...} . You can then reference the data source via data.aws_availability_zones.available.names[0] or data.aws_availability_zones.available.names[count.index] in resources using count . Here's an example of using acctest.ConfigAvailableAZsNoOptIn() and data.aws_availability_zones.available.names[0] : func testAccInstanceVpcConfigBasic ( rName string ) string { return acctest . ConfigCompose ( acctest . ConfigAvailableAZsNoOptIn (), fmt . Sprintf ( ` resource \"aws_subnet\" \"test\" { availability_zone = data.aws_availability_zones.available.names[0] cidr_block = \"10.0.0.0/24\" vpc_id = aws_vpc.test.id } ` , rName )) } Hardcoded Database Versions # [ ] Uses Database Version Data Sources : Hardcoded database versions, e.g., RDS MySQL Engine Version 5.7.42 , should be removed (which means the AWS-defined default version will be used) or replaced with a list of preferred versions using a data source. Because versions change over times and version offerings vary from region to region and partition to partition, using the default version or providing a list of preferences ensures a version will be available. Depending on the situation, there are several data sources for versions, including: aws_rds_engine_version data source , aws_docdb_engine_version data source , and aws_neptune_engine_version data source . Here's an example of using aws_rds_engine_version and data.aws_rds_engine_version.default.version : data \"aws_rds_engine_version\" \"default\" { engine = \"mysql\" } data \"aws_rds_orderable_db_instance\" \"test\" { engine = data.aws_rds_engine_version.default.engine engine_version = data.aws_rds_engine_version.default.version preferred_instance_classes = [ \"db.t3.small\", \"db.t2.small\", \"db.t2.medium\" ] } resource \"aws_db_instance\" \"bar\" { engine = data.aws_rds_engine_version.default.engine engine_version = data.aws_rds_engine_version.default.version instance_class = data.aws_rds_orderable_db_instance.test.instance_class skip_final_snapshot = true parameter_group_name = \"default.${data.aws_rds_engine_version.default.parameter_group_family}\" } Hardcoded Direct Connect Locations # [ ] Uses aws_dx_locations Data Source : Hardcoded AWS Direct Connect locations, e.g., EqSe2 , should be replaced with the aws_dx_locations data source . Here's an example using data.aws_dx_locations.test.location_codes : data \"aws_dx_locations\" \"test\" {} resource \"aws_dx_lag\" \"test\" { name = \"Test LAG\" connections_bandwidth = \"1Gbps\" location = tolist ( data.aws_dx_locations.test.location_codes )[ 0 ] force_destroy = true } Hardcoded Instance Types # [ ] Uses Instance Type Data Source : Singular hardcoded instance types and classes, e.g., t2.micro and db.t2.micro , should be replaced with a list of preferences using a data source. Because offerings vary from region to region and partition to partition, providing a list of preferences dramatically improves the likelihood that one of the options will be available. Depending on the situation, there are several data sources for instance types and classes, including: aws_ec2_instance_type_offering data source - Convenience functions declare configurations that are referenced with data.aws_ec2_instance_type_offering.available including: The acctest.AvailableEC2InstanceTypeForAvailabilityZone() function for test configurations using an EC2 Subnet which is inherently within a single Availability Zone The acctest.AvailableEC2InstanceTypeForRegion() function for test configurations that do not include specific Availability Zones aws_rds_orderable_db_instance data source , aws_neptune_orderable_db_instance data source , and aws_docdb_orderable_db_instance data source . Here's an example of using acctest.AvailableEC2InstanceTypeForRegion() and data.aws_ec2_instance_type_offering.available.instance_type : func testAccSpotInstanceRequestConfig ( rInt int ) string { return acctest . ConfigCompose ( acctest . AvailableEC2InstanceTypeForRegion ( \"t3.micro\" , \"t2.micro\" ), fmt . Sprintf ( ` resource \"aws_spot_instance_request\" \"test\" { instance_type = data.aws_ec2_instance_type_offering.available.instance_type spot_price = \"0.05\" wait_for_fulfillment = true } ` , rInt )) } Here's an example of using aws_rds_orderable_db_instance and data.aws_rds_orderable_db_instance.test.instance_class : data \"aws_rds_orderable_db_instance\" \"test\" { engine = \"mysql\" engine_version = \"5.7.31\" preferred_instance_classes = [ \"db.t3.micro\", \"db.t2.micro\", \"db.t3.small\" ] } resource \"aws_db_instance\" \"test\" { engine = data.aws_rds_orderable_db_instance.test.engine engine_version = data.aws_rds_orderable_db_instance.test.engine_version instance_class = data.aws_rds_orderable_db_instance.test.instance_class skip_final_snapshot = true username = \"test\" } Hardcoded Partition DNS Suffix # [ ] Uses aws_partition Data Source : Any hardcoded DNS suffix configuration, e.g., the amazonaws.com in a ec2.amazonaws.com service principal, should be replaced with the aws_partition data source . A common pattern is declaring data \"aws_partition\" \"current\" {} and referencing it via data.aws_partition.current.dns_suffix . Here's an example of using aws_partition and data.aws_partition.current.dns_suffix : data \"aws_partition\" \"current\" {} resource \"aws_iam_role\" \"test\" { assume_role_policy = << POLICY { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"\", \"Effect\": \"Allow\", \"Principal\": { \"Service\": \"cloudtrail.${data.aws_partition.current.dns_suffix}\" }, \"Action\": \"sts:AssumeRole\" } ] } POLICY } Hardcoded Partition in ARN # [ ] Uses aws_partition Data Source : Any hardcoded AWS Partition configuration, e.g. the aws in a arn:aws:SERVICE:REGION:ACCOUNT:RESOURCE ARN, should be replaced with the aws_partition data source . A common pattern is declaring data \"aws_partition\" \"current\" {} and referencing it via data.aws_partition.current.partition . [ ] Uses Builtin ARN Check Functions : Tests should use available ARN check functions to validate ARN attribute values in the Terraform state over resource.TestCheckResourceAttrSet() and resource.TestMatchResourceAttr() : acctest.CheckResourceAttrRegionalARN() verifies that an ARN matches the account ID and region of the test execution with an exact resource value acctest.MatchResourceAttrRegionalARN() verifies that an ARN matches the account ID and region of the test execution with a regular expression of the resource value acctest.CheckResourceAttrGlobalARN() verifies that an ARN matches the account ID of the test execution with an exact resource value acctest.MatchResourceAttrGlobalARN() verifies that an ARN matches the account ID of the test execution with a regular expression of the resource value acctest.CheckResourceAttrRegionalARNNoAccount() verifies than an ARN has no account ID and matches the current region of the test execution with an exact resource value acctest.CheckResourceAttrGlobalARNNoAccount() verifies than an ARN has no account ID and matches an exact resource value acctest.CheckResourceAttrRegionalARNAccountID() verifies than an ARN matches a specific account ID and the current region of the test execution with an exact resource value acctest.CheckResourceAttrGlobalARNAccountID() verifies than an ARN matches a specific account ID with an exact resource value Here's an example of using aws_partition and data.aws_partition.current.partition : data \"aws_partition\" \"current\" {} resource \"aws_iam_role_policy_attachment\" \"test\" { policy_arn = \"arn:${data.aws_partition.current.partition}:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole\" role = aws_iam_role.test.name } Hardcoded Region # [ ] Uses aws_region Data Source : Any hardcoded AWS Region configuration, e.g., us-west-2 , should be replaced with the aws_region data source . A common pattern is declaring data \"aws_region\" \"current\" {} and referencing it via data.aws_region.current.name Here's an example of using aws_region and data.aws_region.current.name : data \"aws_region\" \"current\" {} resource \"aws_route53_zone\" \"test\" { vpc { vpc_id = aws_vpc.test.id vpc_region = data.aws_region.current.name } } Hardcoded Spot Price # [ ] Uses aws_ec2_spot_price Data Source : Any hardcoded spot prices, e.g., 0.05 , should be replaced with the aws_ec2_spot_price data source . A common pattern is declaring data \"aws_ec2_spot_price\" \"current\" {} and referencing it via data.aws_ec2_spot_price.current.spot_price . Here's an example of using aws_ec2_spot_price and data.aws_ec2_spot_price.current.spot_price : data \"aws_ec2_spot_price\" \"current\" { instance_type = \"t3.medium\" filter { name = \"product-description\" values = [ \"Linux/UNIX\" ] } } resource \"aws_spot_fleet_request\" \"test\" { spot_price = data.aws_ec2_spot_price.current.spot_price target_capacity = 2 } Hardcoded SSH Keys # [ ] Uses acctest.RandSSHKeyPair() or RandSSHKeyPairSize() Functions : Any hardcoded SSH keys should be replaced with random SSH keys generated by either the acceptance testing framework's function RandSSHKeyPair() or the provider function RandSSHKeyPairSize() . RandSSHKeyPair() generates 1024-bit keys. Here's an example using aws_key_pair func TestAccKeyPair_basic ( t * testing . T ) { ... rName := sdkacctest . RandomWithPrefix ( acctest . ResourcePrefix ) publicKey , _ , err := acctest . RandSSHKeyPair ( acctest . DefaultEmailAddress ) if err != nil { t . Fatalf ( \"error generating random SSH key: %s\" , err ) } resource . ParallelTest ( t , resource . TestCase { ... Steps : [] resource . TestStep { { Config : testAccKeyPairConfig ( rName , publicKey ), ... }, }, }) } func testAccKeyPairConfig ( rName , publicKey string ) string { return fmt . Sprintf ( ` resource \"aws_key_pair\" \"test\" { key_name = %[1]q public_key = %[2]q } ` , rName , publicKey ) } Hardcoded Email Addresses # [ ] Uses either acctest.DefaultEmailAddress Constant or acctest.RandomEmailAddress() Function : Any hardcoded email addresses should replaced with either the constant acctest.DefaultEmailAddress or the function acctest.RandomEmailAddress() . Using acctest.DefaultEmailAddress is preferred when using a single email address in an acceptance test. Here's an example using acctest.DefaultEmailAddress func TestAccSNSTopicSubscription_email ( t * testing . T ) { ... rName := sdkacctest . RandomWithPrefix ( acctest . ResourcePrefix ) resource . ParallelTest ( t , resource . TestCase { ... Steps : [] resource . TestStep { { Config : testAccTopicSubscriptionEmailConfig ( rName , acctest . DefaultEmailAddress ), Check : resource . ComposeTestCheckFunc ( ... resource . TestCheckResourceAttr ( resourceName , \"endpoint\" , acctest . DefaultEmailAddress ), ), }, }, }) } Here's an example using acctest.RandomEmailAddress() func TestAccPinpointEmailChannel_basic ( t * testing . T ) { ... domain := acctest . RandomDomainName () address1 := acctest . RandomEmailAddress ( domain ) address2 := acctest . RandomEmailAddress ( domain ) resource . ParallelTest ( t , resource . TestCase { ... Steps : [] resource . TestStep { { Config : testAccEmailChannelConfig_FromAddress ( domain , address1 ), Check : resource . ComposeTestCheckFunc ( ... resource . TestCheckResourceAttr ( resourceName , \"from_address\" , address1 ), ), }, { Config : testAccEmailChannelConfig_FromAddress ( domain , address2 ), Check : resource . ComposeTestCheckFunc ( ... resource . TestCheckResourceAttr ( resourceName , \"from_address\" , address2 ), ), }, }, }) }","title":"Running and Writing Acceptance Tests"},{"location":"contributing/running-and-writing-acceptance-tests/#running-and-writing-acceptance-tests","text":"Acceptance Tests Often Cost Money to Run Running an Acceptance Test Running Cross-Account Tests Running Cross-Region Tests Running Only Short Tests Writing an Acceptance Test Anatomy of an Acceptance Test Resource Acceptance Testing Test Configurations Combining Test Configurations Base Test Configurations Available Common Test Configurations Randomized Naming Other Recommended Variables Basic Acceptance Tests PreChecks Standard Provider PreChecks Custom PreChecks ErrorChecks Common ErrorCheck Service-Specific ErrorChecks Long-Running Test Guards Disappears Acceptance Tests Per Attribute Acceptance Tests Cross-Account Acceptance Tests Cross-Region Acceptance Tests Service-Specific Region Acceptance Tests Acceptance Test Concurrency Data Source Acceptance Testing Acceptance Test Sweepers Running Test Sweepers Writing Test Sweepers Acceptance Test Checklists Basic Acceptance Test Design Test Implementation Avoid Hard Coding Hardcoded Account IDs Hardcoded AMI IDs Hardcoded Availability Zones Hardcoded Database Versions Hardcoded Direct Connect Locations Hardcoded Instance Types Hardcoded Partition DNS Suffix Hardcoded Partition in ARN Hardcoded Region Hardcoded Spot Price Hardcoded SSH Keys Hardcoded Email Addresses Terraform includes an acceptance test harness that does most of the repetitive work involved in testing a resource. For additional information about testing Terraform Providers, see the Extending Terraform documentation .","title":"Running and Writing Acceptance Tests"},{"location":"contributing/running-and-writing-acceptance-tests/#acceptance-tests-often-cost-money-to-run","text":"Because acceptance tests create real resources, they often cost money to run. Because the resources only exist for a short period of time, the total amount of money required is usually a relatively small. Nevertheless, we don't want financial limitations to be a barrier to contribution, so if you are unable to pay to run acceptance tests for your contribution, mention this in your pull request. We will happily accept \"best effort\" implementations of acceptance tests and run them for you on our side. This might mean that your PR takes a bit longer to merge, but it most definitely is not a blocker for contributions.","title":"Acceptance Tests Often Cost Money to Run"},{"location":"contributing/running-and-writing-acceptance-tests/#running-an-acceptance-test","text":"Acceptance tests can be run using the testacc target in the Terraform Makefile . The individual tests to run can be controlled using a regular expression. Prior to running the tests provider configuration details such as access keys must be made available as environment variables. For example, to run an acceptance test against the Amazon Web Services provider, the following environment variables must be set: # Using a profile export AWS_PROFILE = ... # Otherwise export AWS_ACCESS_KEY_ID = ... export AWS_SECRET_ACCESS_KEY = ... export AWS_DEFAULT_REGION = ... Please note that the default region for the testing is us-west-2 and must be overridden via the AWS_DEFAULT_REGION environment variable, if necessary. This is especially important for testing AWS GovCloud (US), which requires: export AWS_DEFAULT_REGION = us-gov-west-1 Tests can then be run by specifying a regular expression defining the tests to run and the package in which the tests are defined: $ make testacc TESTS = TestAccCloudWatchDashboard_updateName PKG = cloudwatch == > Checking that code complies with gofmt requirements... TF_ACC = 1 go test ./internal/service/cloudwatch/... -v -count 1 -parallel 20 -run = TestAccCloudWatchDashboard_updateName -timeout 180m === RUN TestAccCloudWatchDashboard_updateName === PAUSE TestAccCloudWatchDashboard_updateName === CONT TestAccCloudWatchDashboard_updateName --- PASS: TestAccCloudWatchDashboard_updateName ( 25 .33s ) PASS ok github.com/hashicorp/terraform-provider-aws/internal/service/cloudwatch 25 .387s Entire resource test suites can be targeted by using the naming convention to write the regular expression. For example, to run all tests of the aws_cloudwatch_dashboard resource rather than just the updateName test, you can start testing like this: $ make testacc TESTS = TestAccCloudWatchDashboard PKG = cloudwatch == > Checking that code complies with gofmt requirements... TF_ACC = 1 go test ./internal/service/cloudwatch/... -v -count 1 -parallel 20 -run = TestAccCloudWatchDashboard -timeout 180m === RUN TestAccCloudWatchDashboard_basic === PAUSE TestAccCloudWatchDashboard_basic === RUN TestAccCloudWatchDashboard_update === PAUSE TestAccCloudWatchDashboard_update === RUN TestAccCloudWatchDashboard_updateName === PAUSE TestAccCloudWatchDashboard_updateName === CONT TestAccCloudWatchDashboard_basic === CONT TestAccCloudWatchDashboard_updateName === CONT TestAccCloudWatchDashboard_update --- PASS: TestAccCloudWatchDashboard_basic ( 15 .83s ) --- PASS: TestAccCloudWatchDashboard_updateName ( 26 .69s ) --- PASS: TestAccCloudWatchDashboard_update ( 27 .72s ) PASS ok github.com/hashicorp/terraform-provider-aws/internal/service/cloudwatch 27 .783s Running acceptance tests requires version 0.12.26 or higher of the Terraform CLI to be installed. For advanced developers, the acceptance testing framework accepts some additional environment variables that can be used to control Terraform CLI binary selection, logging, and other behaviors. See the Extending Terraform documentation for more information. Please Note: On macOS 10.14 and later (and some Linux distributions), the default user open file limit is 256. This may cause unexpected issues when running the acceptance testing since this can prevent various operations from occurring such as opening network connections to AWS. To view this limit, the ulimit -n command can be run. To update this limit, run ulimit -n 1024 (or higher).","title":"Running an Acceptance Test"},{"location":"contributing/running-and-writing-acceptance-tests/#running-cross-account-tests","text":"Certain testing requires multiple AWS accounts. This additional setup is not typically required and the testing will return an error (shown below) if your current setup does not have the secondary AWS configuration: $ make testacc TESTS = TestAccRDSInstance_DBSubnetGroupName_ramShared PKG = rds TF_ACC=1 go test ./internal/service/rds/... -v -count 1 -parallel 20 -run=TestAccRDSInstance_DBSubnetGroupName_ramShared -timeout 180m === RUN TestAccRDSInstance_DBSubnetGroupName_ramShared === PAUSE TestAccRDSInstance_DBSubnetGroupName_ramShared === CONT TestAccRDSInstance_DBSubnetGroupName_ramShared acctest.go:674: skipping test because at least one environment variable of [AWS_ALTERNATE_PROFILE AWS_ALTERNATE_ACCESS_KEY_ID] must be set. Usage: credentials for running acceptance testing in alternate AWS account. --- SKIP: TestAccRDSInstance_DBSubnetGroupName_ramShared (0.85s) PASS ok github.com/hashicorp/terraform-provider-aws/internal/service/rds 0.888s Running these acceptance tests is the same as before, except the following additional AWS credential information is required: # Using a profile export AWS_ALTERNATE_PROFILE = ... # Otherwise export AWS_ALTERNATE_ACCESS_KEY_ID = ... export AWS_ALTERNATE_SECRET_ACCESS_KEY = ...","title":"Running Cross-Account Tests"},{"location":"contributing/running-and-writing-acceptance-tests/#running-cross-region-tests","text":"Certain testing requires multiple AWS regions. Additional setup is not typically required because the testing defaults the second AWS region to us-east-1 and the third AWS region to us-east-2 . Running these acceptance tests is the same as before, but if you wish to override the second and third regions: export AWS_ALTERNATE_REGION = ... export AWS_THIRD_REGION = ...","title":"Running Cross-Region Tests"},{"location":"contributing/running-and-writing-acceptance-tests/#running-only-short-tests","text":"Some tests have been manually marked as long-running (longer than 300 seconds) and can be skipped using the -short flag. However, we are adding long-running guards little by little and many services have no guarded tests. Where guards have been implemented, do not always skip long-running tests. However, for intermediate test runs during development, or to verify functionality unrelated to the specific long-running tests, skipping long-running tests makes work more efficient. We recommend that for the final test run before submitting a PR that you run affected tests without the -short flag. If you want to run only short-running tests, you can use either one of these equivalent statements. Note the use of -short . For example: % make testacc TESTS = 'TestAccECSTaskDefinition_' PKG = ecs TESTARGS = -short Or: % TF_ACC = 1 go test ./internal/service/ecs/... -v -count 1 -parallel 20 -run = 'TestAccECSTaskDefinition_' -short -timeout 180m","title":"Running Only Short Tests"},{"location":"contributing/running-and-writing-acceptance-tests/#writing-an-acceptance-test","text":"Terraform has a framework for writing acceptance tests which minimises the amount of boilerplate code necessary to use common testing patterns. This guide is meant to augment the general Extending Terraform documentation with Terraform AWS Provider specific conventions and helpers.","title":"Writing an Acceptance Test"},{"location":"contributing/running-and-writing-acceptance-tests/#anatomy-of-an-acceptance-test","text":"This section describes in detail how the Terraform acceptance testing framework operates with respect to the Terraform AWS Provider. We recommend those unfamiliar with this provider, or Terraform resource testing in general, take a look here first to generally understand how we interact with AWS and the resource code to verify functionality. The entry point to the framework is the resource.ParallelTest() function. This wraps our testing to work with the standard Go testing framework, while also preventing unexpected usage of AWS by requiring the TF_ACC=1 environment variable. This function accepts a TestCase parameter, which has all the details about the test itself. For example, this includes the test steps ( TestSteps ) and how to verify resource deletion in the API after all steps have been run ( CheckDestroy ). Each TestStep proceeds by applying some Terraform configuration using the provider under test, and then verifying that results are as expected by making assertions using the provider API. It is common for a single test function to exercise both the creation of and updates to a single resource. Most tests follow a similar structure. Pre-flight checks are made to ensure that sufficient provider configuration is available to be able to proceed - for example in an acceptance test targeting AWS, AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY must be set prior to running acceptance tests. This is common to all tests exercising a single provider. Most assertion functions are defined out of band with the tests. This keeps the tests readable, and allows reuse of assertion functions across different tests of the same type of resource. The definition of a complete test looks like this: func TestAccCloudWatchDashboard_basic ( t * testing . T ) { var dashboard cloudwatch . GetDashboardOutput rInt := acctest . RandInt () resource . ParallelTest ( t , resource . TestCase { PreCheck : func () { acctest . PreCheck ( t ) }, ErrorCheck : acctest . ErrorCheck ( t , cloudwatch . EndpointsID ), ProviderFactories : acctest . ProviderFactories , CheckDestroy : testAccCheckDashboardDestroy , Steps : [] resource . TestStep { { Config : testAccDashboardConfig ( rInt ), Check : resource . ComposeTestCheckFunc ( testAccCheckDashboardExists ( \"aws_cloudwatch_dashboard.foobar\" , & dashboard ), resource . TestCheckResourceAttr ( \"aws_cloudwatch_dashboard.foobar\" , \"dashboard_name\" , testAccDashboardName ( rInt )), ), }, }, }) } When executing the test, the following steps are taken for each TestStep : The Terraform configuration required for the test is applied. This is responsible for configuring the resource under test, and any dependencies it may have. For example, to test the aws_cloudwatch_dashboard resource, a valid configuration with the requisite fields is required. This results in configuration which looks like this: resource \"aws_cloudwatch_dashboard\" \"foobar\" { dashboard_name = \"terraform-test-dashboard-%d\" dashboard_body = << EOF { \"widgets\": [{ \"type\": \"text\", \"x\": 0, \"y\": 0, \"width\": 6, \"height\": 6, \"properties\": { \"markdown\": \"Hi there from Terraform: CloudWatch\" } }] } EOF } Assertions are run using the provider API. These use the provider API directly rather than asserting against the resource state. For example, to verify that the aws_cloudwatch_dashboard described above was created successfully, a test function like this is used: func testAccCheckDashboardExists ( n string , dashboard * cloudwatch . GetDashboardOutput ) resource . TestCheckFunc { return func ( s * terraform . State ) error { rs , ok := s . RootModule (). Resources [ n ] if ! ok { return fmt . Errorf ( \"Not found: %s\" , n ) } conn := acctest . Provider . Meta ().( * conns . AWSClient ). CloudWatchConn params := cloudwatch . GetDashboardInput { DashboardName : aws . String ( rs . Primary . ID ), } resp , err := conn . GetDashboard ( & params ) if err != nil { return err } * dashboard = * resp return nil } } Notice that the only information used from the Terraform state is the ID of the resource. For computed properties, we instead assert that the value saved in the Terraform state was the expected value if possible. The testing framework provides helper functions for several common types of check - for example: ```go resource.TestCheckResourceAttr(\"aws_cloudwatch_dashboard.foobar\", \"dashboard_name\", testAccDashboardName(rInt)), ``` The resources created by the test are destroyed. This step happens automatically, and is the equivalent of calling terraform destroy . Assertions are made against the provider API to verify that the resources have indeed been removed. If these checks fail, the test fails and reports \"dangling resources\". The code to ensure that the aws_cloudwatch_dashboard shown above has been destroyed looks like this: func testAccCheckDashboardDestroy ( s * terraform . State ) error { conn := acctest . Provider . Meta ().( * conns . AWSClient ). CloudWatchConn for _ , rs := range s . RootModule (). Resources { if rs . Type != \"aws_cloudwatch_dashboard\" { continue } params := cloudwatch . GetDashboardInput { DashboardName : aws . String ( rs . Primary . ID ), } _ , err := conn . GetDashboard ( & params ) if err == nil { return fmt . Errorf ( \"Dashboard still exists: %s\" , rs . Primary . ID ) } if ! isDashboardNotFoundErr ( err ) { return err } } return nil } These functions usually test only for the resource directly under test.","title":"Anatomy of an Acceptance Test"},{"location":"contributing/running-and-writing-acceptance-tests/#resource-acceptance-testing","text":"Most resources that implement standard Create, Read, Update, and Delete functionality should follow the pattern below. Each test type has a section that describes them in more detail: basic : This represents the bare minimum verification that the resource can be created, read, deleted, and optionally imported. disappears : A test that verifies Terraform will offer to recreate a resource if it is deleted outside of Terraform (e.g., via the Console) instead of returning an error that it cannot be found. Per Attribute : A test that verifies the resource with a single additional argument can be created, read, optionally updated (or force resource recreation), deleted, and optionally imported. The leading sections below highlight additional recommended patterns.","title":"Resource Acceptance Testing"},{"location":"contributing/running-and-writing-acceptance-tests/#test-configurations","text":"Most of the existing test configurations you will find in the Terraform AWS Provider are written in the following function-based style: func TestAccExampleThing_basic ( t * testing . T ) { // ... omitted for brevity ... resource . ParallelTest ( t , resource . TestCase { // ... omitted for brevity ... Steps : [] resource . TestStep { { Config : testAccExampleThingConfig (), // ... omitted for brevity ... }, }, }) } func testAccExampleThingConfig () string { return ` resource \"aws_example_thing\" \"test\" { # ... omitted for brevity ... } ` } Even when no values need to be passed in to the test configuration, we have found this setup to be the most flexible for allowing that to be easily implemented. Any configurable values are handled via fmt.Sprintf() . Using text/template or other templating styles is explicitly forbidden. For consistency, resources in the test configuration should be named resource \"...\" \"test\" unless multiple of that resource are necessary. We discourage re-using test configurations across test files (except for some common configuration helpers we provide) as it is much harder to discover potential testing regressions. Please also note that the newline on the first line of the configuration (before resource ) and the newline after the last line of configuration (after } ) are important to allow test configurations to be easily combined without generating Terraform configuration language syntax errors.","title":"Test Configurations"},{"location":"contributing/running-and-writing-acceptance-tests/#combining-test-configurations","text":"We include a helper function, acctest.ConfigCompose() for iteratively building and chaining test configurations together. It accepts any number of configurations to combine them. This simplifies a single resource's testing by allowing the creation of a \"base\" test configuration for all the other test configurations (if necessary) and also allows the maintainers to curate common configurations. Each of these is described in more detail in below sections. Please note that we do discourage excessive chaining of configurations such as implementing multiple layers of \"base\" configurations. Usually these configurations are harder for maintainers and other future readers to understand due to the multiple levels of indirection.","title":"Combining Test Configurations"},{"location":"contributing/running-and-writing-acceptance-tests/#base-test-configurations","text":"If a resource requires the same Terraform configuration as a prerequisite for all test configurations, then a common pattern is implementing a \"base\" test configuration that is combined with each test configuration. For example: func testAccExampleThingConfigBase () string { return ` resource \"aws_iam_role\" \"test\" { # ... omitted for brevity ... } resource \"aws_iam_role_policy\" \"test\" { # ... omitted for brevity ... } ` } func testAccExampleThingConfig () string { return acctest . ConfigCompose ( testAccExampleThingConfigBase (), ` resource \"aws_example_thing\" \"test\" { # ... omitted for brevity ... } ` ) }","title":"Base Test Configurations"},{"location":"contributing/running-and-writing-acceptance-tests/#available-common-test-configurations","text":"These test configurations are typical implementations we have found or allow testing to implement best practices easier, since the Terraform AWS Provider testing is expected to run against various AWS Regions and Partitions. acctest.AvailableEC2InstanceTypeForRegion(\"type1\", \"type2\", ...) : Typically used to replace hardcoded EC2 Instance Types. Uses aws_ec2_instance_type_offering data source to return an available EC2 Instance Type in preferred ordering. Reference the instance type via: data.aws_ec2_instance_type_offering.available.instance_type . Use acctest.AvailableEC2InstanceTypeForRegionNamed(\"name\", \"type1\", \"type2\", ...) to specify a name for the data source acctest.ConfigLatestAmazonLinuxHvmEbsAmi() : Typically used to replace hardcoded EC2 Image IDs ( ami-12345678 ). Uses aws_ami data source to find the latest Amazon Linux image. Reference the AMI ID via: data.aws_ami.amzn-ami-minimal-hvm-ebs.id","title":"Available Common Test Configurations"},{"location":"contributing/running-and-writing-acceptance-tests/#randomized-naming","text":"For AWS resources that require unique naming, the tests should implement a randomized name, typically coded as a rName variable in the test and passed as a parameter to creating the test configuration. For example: func TestAccExampleThing_basic ( t * testing . T ) { rName := sdkacctest . RandomWithPrefix ( acctest . ResourcePrefix ) // ... omitted for brevity ... resource . ParallelTest ( t , resource . TestCase { // ... omitted for brevity ... Steps : [] resource . TestStep { { Config : testAccExampleThingConfigName ( rName ), // ... omitted for brevity ... }, }, }) } func testAccExampleThingConfigName ( rName string ) string { return fmt . Sprintf ( ` resource \"aws_example_thing\" \"test\" { name = %[1]q } ` , rName ) } Typically the rName is always the first argument to the test configuration function, if used, for consistency. Note that if rName (or any other variable) is used multiple times in the fmt.Sprintf() statement, do not repeat rName in the fmt.Sprintf() arguments. Using fmt.Sprintf(..., rName, rName) , for example, would not be correct. Instead, use the indexed %[1]q (or %[x]q , %[x]s , %[x]t , or %[x]d , where x represents the index number) verb multiple times. For example: func testAccExampleThingConfigName ( rName string ) string { return fmt . Sprintf ( ` resource \"aws_example_thing\" \"test\" { name = %[1]q tags = { Name = %[1]q } } ` , rName ) }","title":"Randomized Naming"},{"location":"contributing/running-and-writing-acceptance-tests/#other-recommended-variables","text":"We also typically recommend saving a resourceName variable in the test that contains the resource reference, e.g., aws_example_thing.test , which is repeatedly used in the checks. For example: func TestAccExampleThing_basic ( t * testing . T ) { // ... omitted for brevity ... resourceName := \"aws_example_thing.test\" resource . ParallelTest ( t , resource . TestCase { // ... omitted for brevity ... Steps : [] resource . TestStep { { // ... omitted for brevity ... Check : resource . ComposeTestCheckFunc ( testAccCheckExampleThingExists ( resourceName ), acctest . CheckResourceAttrRegionalARN ( resourceName , \"arn\" , \"example\" , fmt . Sprintf ( \"thing/%s\" , rName )), resource . TestCheckResourceAttr ( resourceName , \"description\" , \"\" ), resource . TestCheckResourceAttr ( resourceName , \"name\" , rName ), ), }, { ResourceName : resourceName , ImportState : true , ImportStateVerify : true , }, }, }) } // below all TestAcc functions func testAccExampleThingConfigName ( rName string ) string { return fmt . Sprintf ( ` resource \"aws_example_thing\" \"test\" { name = %[1]q } ` , rName ) }","title":"Other Recommended Variables"},{"location":"contributing/running-and-writing-acceptance-tests/#basic-acceptance-tests","text":"Usually this test is implemented first. The test configuration should contain only required arguments ( Required: true attributes) and it should check the values of all read-only attributes ( Computed: true without Optional: true ). If the resource supports it, it verifies import. It should NOT perform other TestStep such as updates or verify recreation. These are typically named TestAcc{SERVICE}{THING}_basic , e.g., TestAccCloudWatchDashboard_basic For example: func TestAccExampleThing_basic ( t * testing . T ) { rName := sdkacctest . RandomWithPrefix ( acctest . ResourcePrefix ) resourceName := \"aws_example_thing.test\" resource . ParallelTest ( t , resource . TestCase { PreCheck : func () { acctest . PreCheck ( t ) }, ErrorCheck : acctest . ErrorCheck ( t , service . EndpointsID ), ProviderFactories : acctest . ProviderFactories , CheckDestroy : testAccCheckExampleThingDestroy , Steps : [] resource . TestStep { { Config : testAccExampleThingConfigName ( rName ), Check : resource . ComposeTestCheckFunc ( testAccCheckExampleThingExists ( resourceName ), acctest . CheckResourceAttrRegionalARN ( resourceName , \"arn\" , \"example\" , fmt . Sprintf ( \"thing/%s\" , rName )), resource . TestCheckResourceAttr ( resourceName , \"description\" , \"\" ), resource . TestCheckResourceAttr ( resourceName , \"name\" , rName ), ), }, { ResourceName : resourceName , ImportState : true , ImportStateVerify : true , }, }, }) } // below all TestAcc functions func testAccExampleThingConfigName ( rName string ) string { return fmt . Sprintf ( ` resource \"aws_example_thing\" \"test\" { name = %[1]q } ` , rName ) }","title":"Basic Acceptance Tests"},{"location":"contributing/running-and-writing-acceptance-tests/#prechecks","text":"Acceptance test cases have a PreCheck. The PreCheck ensures that the testing environment meets certain preconditions. If the environment does not meet the preconditions, Go skips the test. Skipping a test avoids reporting a failure and wasting resources where the test cannot succeed. Here is an example of the default PreCheck: func TestAccExampleThing_basic ( t * testing . T ) { rName := sdkacctest . RandomWithPrefix ( acctest . ResourcePrefix ) resourceName := \"aws_example_thing.test\" resource . ParallelTest ( t , resource . TestCase { PreCheck : func () { acctest . PreCheck ( t ) }, // ... additional checks follow ... }) } Extend the default PreCheck by adding calls to functions in the anonymous PreCheck function. The functions can be existing functions in the provider or custom functions you add for new capabilities.","title":"PreChecks"},{"location":"contributing/running-and-writing-acceptance-tests/#standard-provider-prechecks","text":"If you add a new test that has preconditions which are checked by an existing provider function, use that standard PreCheck instead of creating a new one. Some existing tests are missing standard PreChecks and you can help by adding them where appropriate. These are some of the standard provider PreChecks: acctest.PreCheckPartitionHasService(serviceId string, t *testing.T) checks whether the current partition lists the service as part of its offerings. Note: AWS may not add new or public preview services to the service list immediately. This function will return a false positive in that case. acctest.PreCheckOrganizationsAccount(t *testing.T) checks whether the current account can perform AWS Organizations tests. acctest.PreCheckAlternateAccount(t *testing.T) checks whether the environment is set up for tests across accounts. acctest.PreCheckMultipleRegion(t *testing.T, regions int) checks whether the environment is set up for tests across regions. This is an example of using a standard PreCheck function. For an established service, such as WAF or FSx, use acctest.PreCheckPartitionHasService() and the service endpoint ID to check that a partition supports the service. func TestAccExampleThing_basic ( t * testing . T ) { rName := sdkacctest . RandomWithPrefix ( acctest . ResourcePrefix ) resourceName := \"aws_example_thing.test\" resource . ParallelTest ( t , resource . TestCase { PreCheck : func () { acctest . PreCheck ( t ); acctest . PreCheckPartitionHasService ( waf . EndpointsID , t ) }, // ... additional checks follow ... }) }","title":"Standard Provider PreChecks"},{"location":"contributing/running-and-writing-acceptance-tests/#custom-prechecks","text":"In situations where standard PreChecks do not test for the required preconditions, create a custom PreCheck. Below is an example of adding a custom PreCheck function. For a new or preview service that AWS does not include in the partition service list yet, you can verify the existence of the service with a simple read-only request (e.g., list all X service things). (For acceptance tests of established services, use acctest.PreCheckPartitionHasService() instead.) func TestAccExampleThing_basic ( t * testing . T ) { rName := sdkacctest . RandomWithPrefix ( acctest . ResourcePrefix ) resourceName := \"aws_example_thing.test\" resource . ParallelTest ( t , resource . TestCase { PreCheck : func () { acctest . PreCheck ( t ), testAccPreCheckExample ( t ) }, // ... additional checks follow ... }) } func testAccPreCheckExample ( t * testing . T ) { conn := acctest . Provider . Meta ().( * conns . AWSClient ). ExampleConn input := & example . ListThingsInput {} _ , err := conn . ListThings ( input ) if testAccPreCheckSkipError ( err ) { t . Skipf ( \"skipping acceptance testing: %s\" , err ) } if err != nil { t . Fatalf ( \"unexpected PreCheck error: %s\" , err ) } }","title":"Custom PreChecks"},{"location":"contributing/running-and-writing-acceptance-tests/#errorchecks","text":"Acceptance test cases have an ErrorCheck. The ErrorCheck provides a chance to take a look at errors before the test fails. While most errors should result in test failure, some should not. For example, an error that indicates an API operation is not supported in a particular region should cause the test to skip instead of fail. Since errors should flow through the ErrorCheck, do not handle the vast majority of failing conditions. Instead, in ErrorCheck, focus on the rare errors that should cause a test to skip, or in other words, be ignored.","title":"ErrorChecks"},{"location":"contributing/running-and-writing-acceptance-tests/#common-errorcheck","text":"In many situations, the common ErrorCheck is sufficient. It will skip tests for several normal occurrences such as when AWS reports a feature is not supported in the current region. Here is an example of the common ErrorCheck: func TestAccExampleThing_basic ( t * testing . T ) { rName := sdkacctest . RandomWithPrefix ( acctest . ResourcePrefix ) resourceName := \"aws_example_thing.test\" resource . ParallelTest ( t , resource . TestCase { // PreCheck ErrorCheck : acctest . ErrorCheck ( t , service . EndpointsID ), // ... additional checks follow ... }) }","title":"Common ErrorCheck"},{"location":"contributing/running-and-writing-acceptance-tests/#service-specific-errorchecks","text":"However, some services have special conditions that aren't caught by the common ErrorCheck. In these cases, you can create a service-specific ErrorCheck. To add a service-specific ErrorCheck, follow these steps: Make sure there is not already an ErrorCheck for the service you have in mind. For example, search the codebase for acctest.RegisterServiceErrorCheckFunc(service.EndpointsID replacing \"service\" with the package name of the service you're working on (e.g., ec2 ). If there is already an ErrorCheck for the service, add to the existing service-specific ErrorCheck. Create the service-specific ErrorCheck in an _test.go file for the service. See the example below. Register the new service-specific ErrorCheck in the init() at the top of the _test.go file. See the example below. An example of adding a service-specific ErrorCheck: // just after the imports, create or add to the init() function func init () { acctest . RegisterServiceErrorCheck ( service . EndpointsID , testAccErrorCheckSkipService ) } // ... additional code and tests ... // this is the service-specific ErrorCheck func testAccErrorCheckSkipService ( t * testing . T ) resource . ErrorCheckFunc { return acctest . ErrorCheckSkipMessagesContaining ( t , \"Error message specific to the service that indicates unsupported features\" , \"You can include from one to many portions of error messages\" , \"Be careful to not inadvertently capture errors that should not be skipped\" , ) }","title":"Service-Specific ErrorChecks"},{"location":"contributing/running-and-writing-acceptance-tests/#long-running-test-guards","text":"For any acceptance tests that typically run longer than 300 seconds (5 minutes), add a -short test guard at the top of the test function. For example: func TestAccExampleThing_longRunningTest ( t * testing . T ) { if testing . Short () { t . Skip ( \"skipping long-running test in short mode\" ) } // ... omitted for brevity ... resource . ParallelTest ( t , resource . TestCase { // ... omitted for brevity ... }) } When running acceptances tests, tests with these guards can be skipped using the Go -short flag. See Running Only Short Tests for examples.","title":"Long-Running Test Guards"},{"location":"contributing/running-and-writing-acceptance-tests/#disappears-acceptance-tests","text":"This test is generally implemented second. It is straightforward to setup once the basic test is passing since it can reuse that test configuration. It prevents a common bug report with Terraform resources that error when they can not be found (e.g., deleted outside Terraform). These are typically named TestAcc{SERVICE}{THING}_disappears , e.g., TestAccCloudWatchDashboard_disappears For example: func TestAccExampleThing_disappears ( t * testing . T ) { rName := sdkacctest . RandomWithPrefix ( acctest . ResourcePrefix ) resourceName := \"aws_example_thing.test\" resource . ParallelTest ( t , resource . TestCase { PreCheck : func () { acctest . PreCheck ( t ) }, ErrorCheck : acctest . ErrorCheck ( t , service . EndpointsID ), ProviderFactories : acctest . ProviderFactories , CheckDestroy : testAccCheckExampleThingDestroy , Steps : [] resource . TestStep { { Config : testAccExampleThingConfigName ( rName ), Check : resource . ComposeTestCheckFunc ( testAccCheckExampleThingExists ( resourceName , & job ), acctest . CheckResourceDisappears ( acctest . Provider , ResourceExampleThing (), resourceName ), ), ExpectNonEmptyPlan : true , }, }, }) } If this test does fail, the fix for this is generally adding error handling immediately after the Read API call that catches the error and tells Terraform to remove the resource before returning the error: output , err := conn . GetThing ( input ) if isAWSErr ( err , example . ErrCodeResourceNotFound , \"\" ) { log . Printf ( \"[WARN] Example Thing (%s) not found, removing from state\" , d . Id ()) d . SetId ( \"\" ) return nil } if err != nil { return fmt . Errorf ( \"error reading Example Thing (%s): %w\" , d . Id (), err ) } For children resources that are encapsulated by a parent resource, it is also preferable to verify that removing the parent resource will not generate an error either. These are typically named TestAcc{SERVICE}{THING}_disappears_{PARENT} , e.g., TestAccRoute53ZoneAssociation_disappears_Vpc func TestAccExampleChildThing_disappears_ParentThing ( t * testing . T ) { rName := sdkacctest . RandomWithPrefix ( acctest . ResourcePrefix ) parentResourceName := \"aws_example_parent_thing.test\" resourceName := \"aws_example_child_thing.test\" resource . ParallelTest ( t , resource . TestCase { PreCheck : func () { acctest . PreCheck ( t ) }, ErrorCheck : acctest . ErrorCheck ( t , service . EndpointsID ), ProviderFactories : acctest . ProviderFactories , CheckDestroy : testAccCheckExampleChildThingDestroy , Steps : [] resource . TestStep { { Config : testAccExampleThingConfigName ( rName ), Check : resource . ComposeTestCheckFunc ( testAccCheckExampleThingExists ( resourceName ), acctest . CheckResourceDisappears ( acctest . Provider , ResourceExampleParentThing (), parentResourceName ), ), ExpectNonEmptyPlan : true , }, }, }) }","title":"Disappears Acceptance Tests"},{"location":"contributing/running-and-writing-acceptance-tests/#per-attribute-acceptance-tests","text":"These are typically named TestAcc{SERVICE}{THING}_{ATTRIBUTE} , e.g., TestAccCloudWatchDashboard_Name For example: func TestAccExampleThing_Description ( t * testing . T ) { rName := sdkacctest . RandomWithPrefix ( acctest . ResourcePrefix ) resourceName := \"aws_example_thing.test\" resource . ParallelTest ( t , resource . TestCase { PreCheck : func () { acctest . PreCheck ( t ) }, ErrorCheck : acctest . ErrorCheck ( t , service . EndpointsID ), ProviderFactories : acctest . ProviderFactories , CheckDestroy : testAccCheckExampleThingDestroy , Steps : [] resource . TestStep { { Config : testAccExampleThingConfigDescription ( rName , \"description1\" ), Check : resource . ComposeTestCheckFunc ( testAccCheckExampleThingExists ( resourceName ), resource . TestCheckResourceAttr ( resourceName , \"description\" , \"description1\" ), ), }, { ResourceName : resourceName , ImportState : true , ImportStateVerify : true , }, { Config : testAccExampleThingConfigDescription ( rName , \"description2\" ), Check : resource . ComposeTestCheckFunc ( testAccCheckExampleThingExists ( resourceName ), resource . TestCheckResourceAttr ( resourceName , \"description\" , \"description2\" ), ), }, }, }) } // below all TestAcc functions func testAccExampleThingConfigDescription ( rName string , description string ) string { return fmt . Sprintf ( ` resource \"aws_example_thing\" \"test\" { description = %[2]q name = %[1]q } ` , rName , description ) }","title":"Per Attribute Acceptance Tests"},{"location":"contributing/running-and-writing-acceptance-tests/#cross-account-acceptance-tests","text":"When testing requires AWS infrastructure in a second AWS account, the below changes to the normal setup will allow the management or reference of resources and data sources across accounts: In the PreCheck function, include acctest.PreCheckOrganizationsAccount(t) to ensure a standardized set of information is required for cross-account testing credentials Declare a providers variable at the top of the test function: var providers []*schema.Provider Switch usage of ProviderFactories: acctest.ProviderFactories to ProviderFactories: acctest.FactoriesAlternate(&providers) Add acctest.ConfigAlternateAccountProvider() to the test configuration and use provider = awsalternate for cross-account resources. The resource that is the focus of the acceptance test should not use the alternate provider identification to simplify the testing setup. For any TestStep that includes ImportState: true , add the Config that matches the previous TestStep Config An example acceptance test implementation can be seen below: func TestAccExample_basic ( t * testing . T ) { var providers [] * schema . Provider resourceName := \"aws_example.test\" resource . ParallelTest ( t , resource . TestCase { PreCheck : func () { acctest . PreCheck ( t ) acctest . PreCheckOrganizationsAccount ( t ) }, ErrorCheck : acctest . ErrorCheck ( t , service . EndpointsID ), ProviderFactories : acctest . FactoriesAlternate ( & providers ), CheckDestroy : testAccCheckExampleDestroy , Steps : [] resource . TestStep { { Config : testAccExampleConfig (), Check : resource . ComposeTestCheckFunc ( testAccCheckExampleExists ( resourceName ), // ... additional checks ... ), }, { Config : testAccExampleConfig (), ResourceName : resourceName , ImportState : true , ImportStateVerify : true , }, }, }) } func testAccExampleConfig () string { return acctest . ConfigAlternateAccountProvider () + fmt . Sprintf ( ` # Cross account resources should be handled by the cross account provider. # The standardized provider block to use is awsalternate as seen below. resource \"aws_cross_account_example\" \"test\" { provider = awsalternate # ... configuration ... } # The resource that is the focus of the testing should be handled by the default provider, # which is automatically done by not specifying the provider configuration in the resource. resource \"aws_example\" \"test\" { # ... configuration ... } ` ) } Searching for usage of acctest.PreCheckOrganizationsAccount in the codebase will yield real world examples of this setup in action.","title":"Cross-Account Acceptance Tests"},{"location":"contributing/running-and-writing-acceptance-tests/#cross-region-acceptance-tests","text":"When testing requires AWS infrastructure in a second or third AWS region, the below changes to the normal setup will allow the management or reference of resources and data sources across regions: In the PreCheck function, include acctest.PreCheckMultipleRegion(t, ###) to ensure a standardized set of information is required for cross-region testing configuration. If the infrastructure in the second AWS region is also in a second AWS account also include acctest.PreCheckOrganizationsAccount(t) Declare a providers variable at the top of the test function: var providers []*schema.Provider Switch usage of ProviderFactories: acctest.ProviderFactories to ProviderFactories: acctest.FactoriesMultipleRegion(&providers, 2) (where the last parameter is number of regions) Add acctest.ConfigMultipleRegionProvider(###) to the test configuration and use provider = awsalternate (and potentially provider = awsthird ) for cross-region resources. The resource that is the focus of the acceptance test should not use the alternative providers to simplify the testing setup. If the infrastructure in the second AWS region is also in a second AWS account use testAccAlternateAccountAlternateRegionProviderConfig() (EC2) instead For any TestStep that includes ImportState: true , add the Config that matches the previous TestStep Config An example acceptance test implementation can be seen below: func TestAccExample_basic ( t * testing . T ) { var providers [] * schema . Provider resourceName := \"aws_example.test\" resource . ParallelTest ( t , resource . TestCase { PreCheck : func () { acctest . PreCheck ( t ) acctest . PreCheckMultipleRegion ( t , 2 ) }, ErrorCheck : acctest . ErrorCheck ( t , service . EndpointsID ), ProviderFactories : acctest . FactoriesMultipleRegion ( & providers , 2 ), CheckDestroy : testAccCheckExampleDestroy , Steps : [] resource . TestStep { { Config : testAccExampleConfig (), Check : resource . ComposeTestCheckFunc ( testAccCheckExampleExists ( resourceName ), // ... additional checks ... ), }, { Config : testAccExampleConfig (), ResourceName : resourceName , ImportState : true , ImportStateVerify : true , }, }, }) } func testAccExampleConfig () string { return acctest . ConfigMultipleRegionProvider ( 2 ) + fmt . Sprintf ( ` # Cross region resources should be handled by the cross region provider. # The standardized provider is awsalternate as seen below. resource \"aws_cross_region_example\" \"test\" { provider = awsalternate # ... configuration ... } # The resource that is the focus of the testing should be handled by the default provider, # which is automatically done by not specifying the provider configuration in the resource. resource \"aws_example\" \"test\" { # ... configuration ... } ` ) } Searching for usage of acctest.PreCheckMultipleRegion in the codebase will yield real world examples of this setup in action.","title":"Cross-Region Acceptance Tests"},{"location":"contributing/running-and-writing-acceptance-tests/#service-specific-region-acceptance-testing","text":"Certain AWS service APIs are only available in specific AWS regions. For example as of this writing, the pricing service is available in ap-south-1 and us-east-1 , but no other regions or partitions. When encountering these types of services, the acceptance testing can be setup to automatically detect the correct region(s), while skipping the testing in unsupported partitions. To prepare the shared service functionality, create a file named internal/service/{SERVICE}/acc_test.go . A starting example with the Pricing service ( internal/service/pricing/acc_test.go ): package aws import ( \"context\" \"sync\" \"testing\" \"github.com/aws/aws-sdk-go/aws/endpoints\" \"github.com/aws/aws-sdk-go/service/pricing\" \"github.com/hashicorp/terraform-plugin-sdk/v2/diag\" \"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema\" \"github.com/hashicorp/terraform-plugin-sdk/v2/terraform\" \"github.com/hashicorp/terraform-provider-aws/internal/acctest\" \"github.com/hashicorp/terraform-provider-aws/internal/provider\" ) // testAccPricingRegion is the chosen Pricing testing region // // Cached to prevent issues should multiple regions become available. var testAccPricingRegion string // testAccProviderPricing is the Pricing provider instance // // This Provider can be used in testing code for API calls without requiring // the use of saving and referencing specific ProviderFactories instances. // // testAccPreCheckPricing(t) must be called before using this provider instance. var testAccProviderPricing * schema . Provider // testAccProviderPricingConfigure ensures the provider is only configured once var testAccProviderPricingConfigure sync . Once // testAccPreCheckPricing verifies AWS credentials and that Pricing is supported func testAccPreCheckPricing ( t * testing . T ) { acctest . PreCheckPartitionHasService ( pricing . EndpointsID , t ) // Since we are outside the scope of the Terraform configuration we must // call Configure() to properly initialize the provider configuration. testAccProviderPricingConfigure . Do ( func () { testAccProviderPricing = provider . Provider () config := map [ string ] interface {}{ \"region\" : testAccGetPricingRegion (), } diags := testAccProviderPricing . Configure ( context . Background (), terraform . NewResourceConfigRaw ( config )) if diags != nil && diags . HasError () { for _ , d := range diags { if d . Severity == diag . Error { t . Fatalf ( \"error configuring Pricing provider: %s\" , d . Summary ) } } } }) } // testAccPricingRegionProviderConfig is the Terraform provider configuration for Pricing region testing // // Testing Pricing assumes no other provider configurations // are necessary and overwrites the \"aws\" provider configuration. func testAccPricingRegionProviderConfig () string { return acctest . ConfigRegionalProvider ( testAccGetPricingRegion ()) } // testAccGetPricingRegion returns the Pricing region for testing func testAccGetPricingRegion () string { if testAccPricingRegion != \"\" { return testAccPricingRegion } if rs , ok := endpoints . RegionsForService ( endpoints . DefaultPartitions (), testAccGetPartition (), pricing . ServiceName ); ok { // return available region (random if multiple) for regionID := range rs { testAccPricingRegion = regionID return testAccPricingRegion } } testAccPricingRegion = testAccGetRegion () return testAccPricingRegion } For the resource or data source acceptance tests, the key items to adjust are: Ensure TestCase uses ProviderFactories: acctest.ProviderFactories instead of Providers: acctest.Providers Add the call for the new PreCheck function (keeping acctest.PreCheck(t) ), e.g. PreCheck: func() { acctest.PreCheck(t); testAccPreCheckPricing(t) }, If the testing is for a managed resource with a CheckDestroy function, ensure it uses the new provider instance, e.g. testAccProviderPricing , instead of acctest.Provider . If the testing is for a managed resource with a Check...Exists function, ensure it uses the new provider instance, e.g. testAccProviderPricing , instead of acctest.Provider . In each TestStep configuration, ensure the new provider configuration function is called, e.g. func testAccDataSourcePricingProductConfigRedshift () string { return acctest . ConfigCompose ( testAccPricingRegionProviderConfig (), ` # ... test configuration ... ` ) } If the testing configurations require more than one region, reach out to the maintainers for further assistance.","title":"Service-Specific Region Acceptance Testing"},{"location":"contributing/running-and-writing-acceptance-tests/#acceptance-test-concurrency","text":"Certain AWS service APIs allow a limited number of a certain component, while the acceptance testing runs at a default concurrency of twenty tests at a time. For example as of this writing, the SageMaker service only allows one SageMaker Domain per AWS Region. Running the tests with the default concurrency will fail with API errors relating to the component quota being exceeded. When encountering these types of components, the acceptance testing can be setup to limit the available concurrency of that particular component. When limited to one component at a time, this may also be referred to as serializing the acceptance tests. To convert to serialized (one test at a time) acceptance testing: Convert all existing capital T test functions with the limited component to begin with a lowercase t , e.g., TestAccSageMakerDomain_basic becomes testAccSageMakerDomain_basic . This will prevent the test framework from executing these tests directly as the prefix Test is required. In each of these test functions, convert resource.ParallelTest to resource.Test Create a capital T TestAcc{Service}{Thing}_serial test function that then references all the lowercase t test functions. If multiple test files are referenced, this new test be created in a new shared file such as internal/service/{SERVICE}/{SERVICE}_test.go . The contents of this test can be setup like the following: func TestAccExampleThing_serial ( t * testing . T ) { testCases := map [ string ] map [ string ] func ( t * testing . T ){ \"Thing\" : { \"basic\" : testAccExampleThing_basic , \"disappears\" : testAccExampleThing_disappears , // ... potentially other resource tests ... }, // ... potentially other top level resource test groups ... } for group , m := range testCases { m := m t . Run ( group , func ( t * testing . T ) { for name , tc := range m { tc := tc t . Run ( name , func ( t * testing . T ) { tc ( t ) }) } }) } } NOTE: Future iterations of these acceptance testing concurrency instructions will include the ability to handle more than one component at a time including service quota lookup, if supported by the service API.","title":"Acceptance Test Concurrency"},{"location":"contributing/running-and-writing-acceptance-tests/#data-source-acceptance-testing","text":"Writing acceptance testing for data sources is similar to resources, with the biggest changes being: Adding DataSource to the test and configuration naming, such as TestAccExampleThingDataSource_Filter The basic test may be named after the easiest lookup attribute instead, e.g., TestAccExampleThingDataSource_Name No disappears testing Almost all checks should be done with resource.TestCheckResourceAttrPair() to compare the data source attributes to the resource attributes The usage of an additional dataSourceName variable to store a data source reference, e.g., data.aws_example_thing.test Data sources testing should still use the CheckDestroy function of the resource, just to continue verifying that there are no dangling AWS resources after a test is run. Please note that we do not recommend re-using test configurations between resources and their associated data source as it is harder to discover testing regressions. Authors are encouraged to potentially implement similar \"base\" configurations though. For example: func TestAccExampleThingDataSource_Name ( t * testing . T ) { rName := sdkacctest . RandomWithPrefix ( acctest . ResourcePrefix ) dataSourceName := \"data.aws_example_thing.test\" resourceName := \"aws_example_thing.test\" resource . ParallelTest ( t , resource . TestCase { PreCheck : func () { acctest . PreCheck ( t ) }, ErrorCheck : acctest . ErrorCheck ( t , service . EndpointsID ), ProviderFactories : acctest . ProviderFactories , CheckDestroy : testAccCheckExampleThingDestroy , Steps : [] resource . TestStep { { Config : testAccExampleThingDataSourceConfigName ( rName ), Check : resource . ComposeTestCheckFunc ( testAccCheckExampleThingExists ( resourceName ), resource . TestCheckResourceAttrPair ( resourceName , \"arn\" , dataSourceName , \"arn\" ), resource . TestCheckResourceAttrPair ( resourceName , \"description\" , dataSourceName , \"description\" ), resource . TestCheckResourceAttrPair ( resourceName , \"name\" , dataSourceName , \"name\" ), ), }, }, }) } // below all TestAcc functions func testAccExampleThingDataSourceConfigName ( rName string ) string { return fmt . Sprintf ( ` resource \"aws_example_thing\" \"test\" { name = %[1]q } data \"aws_example_thing\" \"test\" { name = aws_example_thing.test.name } ` , rName ) }","title":"Data Source Acceptance Testing"},{"location":"contributing/running-and-writing-acceptance-tests/#acceptance-test-sweepers","text":"When running the acceptance tests, especially when developing or troubleshooting Terraform resources, its possible for code bugs or other issues to prevent the proper destruction of AWS infrastructure. To prevent lingering resources from consuming quota or causing unexpected billing, the Terraform Plugin SDK supports the test sweeper framework to clear out an AWS region of all resources. This section is meant to augment the Extending Terraform documentation on test sweepers with Terraform AWS Provider specific details.","title":"Acceptance Test Sweepers"},{"location":"contributing/running-and-writing-acceptance-tests/#running-test-sweepers","text":"WARNING: Test Sweepers will destroy AWS infrastructure and backups in the target AWS account and region! These are designed to override any API deletion protection. Never run these outside a development AWS account that should be completely empty of resources. To run the sweepers for all resources in us-west-2 and us-east-1 (default testing regions): $ make sweep To run a specific resource sweeper: $ SWEEPARGS = -sweep-run = aws_example_thing make sweep To run sweepers with an assumed role, use the following additional environment variables: TF_AWS_ASSUME_ROLE_ARN - Required. TF_AWS_ASSUME_ROLE_DURATION - Optional, defaults to 1 hour (3600). TF_AWS_ASSUME_ROLE_EXTERNAL_ID - Optional. TF_AWS_ASSUME_ROLE_SESSION_NAME - Optional.","title":"Running Test Sweepers"},{"location":"contributing/running-and-writing-acceptance-tests/#sweeper-checklists","text":"[ ] Add Service To Sweeper List : To allow sweeping for a given service, it needs to be registered in the list of services to be sweeped, at internal/sweep/sweep_test.go . [ ] Add Resource Sweeper Implementation : See Writing Test Sweepers .","title":"Sweeper Checklists"},{"location":"contributing/running-and-writing-acceptance-tests/#writing-test-sweepers","text":"The first step is to initialize the resource into the test sweeper framework: func init () { resource . AddTestSweepers ( \"aws_example_thing\" , & resource . Sweeper { Name : \"aws_example_thing\" , F : sweepThings , // Optionally Dependencies : [] string { \"aws_other_thing\" , }, }) } Then add the actual implementation. Preferably, if a paginated SDK call is available: func sweepThings ( region string ) error { client , err := sweep . SharedRegionalSweepClient ( region ) if err != nil { return fmt . Errorf ( \"error getting client: %w\" , err ) } conn := client .( * conns . AWSClient ). ExampleConn sweepResources := make ([] * sweep . SweepResource , 0 ) var errs * multierror . Error input := & example . ListThingsInput {} err = conn . ListThingsPages ( input , func ( page * example . ListThingsOutput , lastPage bool ) bool { if page == nil { return ! lastPage } for _ , thing := range page . Things { r := ResourceThing () d := r . Data ( nil ) id := aws . StringValue ( thing . Id ) d . SetId ( id ) // Perform resource specific pre-sweep setup. // For example, you may need to perform one or more of these types of pre-sweep tasks, specific to the resource: // // err := r.Read(d, client) // fill in data // d.Set(\"skip_final_snapshot\", true) // set an argument in order to delete // This \"if\" is only needed if the pre-sweep setup can produce errors. // Otherwise, do not include it. if err != nil { err := fmt . Errorf ( \"error reading Example Thing (%s): %w\" , id , err ) log . Printf ( \"[ERROR] %s\" , err ) errs = multierror . Append ( errs , err ) continue } sweepResources = append ( sweepResources , sweep . NewSweepResource ( r , d , client )) } return ! lastPage }) if err != nil { errs = multierror . Append ( errs , fmt . Errorf ( \"error listing Example Thing for %s: %w\" , region , err )) } if err := sweep . SweepOrchestrator ( sweepResources ); err != nil { errs = multierror . Append ( errs , fmt . Errorf ( \"error sweeping Example Thing for %s: %w\" , region , err )) } if sweep . SkipSweepError ( err ) { log . Printf ( \"[WARN] Skipping Example Thing sweep for %s: %s\" , region , errs ) return nil } return errs . ErrorOrNil () } Otherwise, if no paginated SDK call is available: func sweepThings ( region string ) error { client , err := sweep . SharedRegionalSweepClient ( region ) if err != nil { return fmt . Errorf ( \"error getting client: %w\" , err ) } conn := client .( * conns . AWSClient ). ExampleConn sweepResources := make ([] * sweep . SweepResource , 0 ) var errs * multierror . Error input := & example . ListThingsInput {} for { output , err := conn . ListThings ( input ) for _ , thing := range output . Things { r := ResourceThing () d := r . Data ( nil ) id := aws . StringValue ( thing . Id ) d . SetId ( id ) // Perform resource specific pre-sweep setup. // For example, you may need to perform one or more of these types of pre-sweep tasks, specific to the resource: // // err := r.Read(d, client) // fill in data // d.Set(\"skip_final_snapshot\", true) // set an argument in order to delete // This \"if\" is only needed if the pre-sweep setup can produce errors. // Otherwise, do not include it. if err != nil { err := fmt . Errorf ( \"error reading Example Thing (%s): %w\" , id , err ) log . Printf ( \"[ERROR] %s\" , err ) errs = multierror . Append ( errs , err ) continue } sweepResources = append ( sweepResources , sweep . NewSweepResource ( r , d , client )) } if aws . StringValue ( output . NextToken ) == \"\" { break } input . NextToken = output . NextToken } if err := sweep . SweepOrchestrator ( sweepResources ); err != nil { errs = multierror . Append ( errs , fmt . Errorf ( \"error sweeping Example Thing for %s: %w\" , region , err )) } if sweep . SkipSweepError ( err ) { log . Printf ( \"[WARN] Skipping Example Thing sweep for %s: %s\" , region , errs ) return nil } return errs . ErrorOrNil () }","title":"Writing Test Sweepers"},{"location":"contributing/running-and-writing-acceptance-tests/#acceptance-test-checklists","text":"There are several aspects to writing good acceptance tests. These checklists will help ensure effective testing from the design stage through to implementation details.","title":"Acceptance Test Checklists"},{"location":"contributing/running-and-writing-acceptance-tests/#basic-acceptance-test-design","text":"These are basic principles to help guide the creation of acceptance tests. [ ] Covers Changes : Every line of resource or data source code added or changed should be covered by one or more tests. For example, if a resource has two ways of functioning, tests should cover both possible paths. Nearly every codebase change needs test coverage to ensure functionality and prevent future regressions. If a bug or other problem prompted a fix, a test should be added that previously would have failed, especially if the report included a configuration. [ ] Follows the Single Responsibility Principle : Every test should have a single responsibility and effectively test that responsibility. This may include individual tests for verifying basic functionality of the resource (Create, Read, Delete), separately verifying using and updating a single attribute in a resource, or separately changing between two attributes to verify two \"modes\"/\"types\" possible with a resource configuration. In following this principle, test configurations should be as simple as possible. For example, not including extra configuration unless it is necessary for the specific test.","title":"Basic Acceptance Test Design"},{"location":"contributing/running-and-writing-acceptance-tests/#test-implementation","text":"The below are required items that will be noted during submission review and prevent immediate merging: [ ] Implements CheckDestroy : Resource testing should include a CheckDestroy function (typically named testAccCheck{SERVICE}{RESOURCE}Destroy ) that calls the API to verify that the Terraform resource has been deleted or disassociated as appropriate. More information about CheckDestroy functions can be found in the Extending Terraform TestCase documentation . [ ] Implements Exists Check Function : Resource testing should include a TestCheckFunc function (typically named testAccCheck{SERVICE}{RESOURCE}Exists ) that calls the API to verify that the Terraform resource has been created or associated as appropriate. Preferably, this function will also accept a pointer to an API object representing the Terraform resource from the API response that can be set for potential usage in later TestCheckFunc . More information about these functions can be found in the Extending Terraform Custom Check Functions documentation . [ ] Excludes Provider Declarations : Test configurations should not include provider \"aws\" {...} declarations. If necessary, only the provider declarations in acctest.go should be used for multiple account/region or otherwise specialized testing. [ ] Passes in us-west-2 Region : Tests default to running in us-west-2 and at a minimum should pass in that region or include necessary PreCheck functions to skip the test when ran outside an expected environment. [ ] Includes ErrorCheck : All acceptance tests should include a call to the common ErrorCheck ( ErrorCheck: acctest.ErrorCheck(t, service.EndpointsID), ). [ ] Uses resource.ParallelTest : Tests should use resource.ParallelTest() instead of resource.Test() except where serialized testing is absolutely required. [ ] Uses fmt.Sprintf() : Test configurations preferably should to be separated into their own functions (typically named testAcc{SERVICE}{RESOURCE}Config{PURPOSE} ) that call fmt.Sprintf() for variable injection or a string const for completely static configurations. Test configurations should avoid var or other variable injection functionality such as text/template . [ ] Uses Randomized Infrastructure Naming : Test configurations that use resources where a unique name is required should generate a random name. Typically this is created via rName := sdkacctest.RandomWithPrefix(acctest.ResourcePrefix) in the acceptance test function before generating the configuration. [ ] Prevents S3 Bucket Deletion Errors : Test configurations that use aws_s3_bucket resources as a logging destination should include the force_destroy = true configuration. This is to prevent race conditions where logging objects may be written during the testing duration which will cause BucketNotEmpty errors during deletion. For resources that support import, the additional item below is required that will be noted during submission review and prevent immediate merging: [ ] Implements ImportState Testing : Tests should include an additional TestStep configuration that verifies resource import via ImportState: true and ImportStateVerify: true . This TestStep should be added to all possible tests for the resource to ensure that all infrastructure configurations are properly imported into Terraform. The below are style-based items that may be noted during review and are recommended for simplicity, consistency, and quality assurance: [ ] Uses Builtin Check Functions : Tests should use already available check functions, e.g. resource.TestCheckResourceAttr() , to verify values in the Terraform state over creating custom TestCheckFunc . More information about these functions can be found in the Extending Terraform Builtin Check Functions documentation . [ ] Uses TestCheckResoureAttrPair() for Data Sources : Tests should use resource.TestCheckResourceAttrPair() to verify values in the Terraform state for data sources attributes to compare them with their expected resource attributes. [ ] Excludes Timeouts Configurations : Test configurations should not include timeouts {...} configuration blocks except for explicit testing of customizable timeouts (typically very short timeouts with ExpectError ). [ ] Implements Default and Zero Value Validation : The basic test for a resource (typically named TestAcc{SERVICE}{RESOURCE}_basic ) should use available check functions, e.g. resource.TestCheckResourceAttr() , to verify default and zero values in the Terraform state for all attributes. Empty/missing configuration blocks can be verified with resource.TestCheckResourceAttr(resourceName, \"{ATTRIBUTE}.#\", \"0\") and empty maps with resource.TestCheckResourceAttr(resourceName, \"{ATTRIBUTE}.%\", \"0\")","title":"Test Implementation"},{"location":"contributing/running-and-writing-acceptance-tests/#avoid-hard-coding","text":"Avoid hard coding values in acceptance test checks and configurations for consistency and testing flexibility. Resource testing is expected to pass across multiple AWS environments supported by the Terraform AWS Provider (e.g., AWS Standard and AWS GovCloud (US)). Contributors are not expected or required to perform testing outside of AWS Standard, e.g., running only in the us-west-2 region is perfectly acceptable. However, contributors are expected to avoid hard coding with these guidelines.","title":"Avoid Hard Coding"},{"location":"contributing/running-and-writing-acceptance-tests/#hardcoded-account-ids","text":"[ ] Uses Account Data Sources : Any hardcoded account numbers in configuration, e.g., 137112412989 , should be replaced with a data source. Depending on the situation, there are several data sources for account IDs including: aws_caller_identity data source , aws_canonical_user_id data source , aws_billing_service_account data source , and aws_sagemaker_prebuilt_ecr_image data source . [ ] Uses Account Test Checks : Any check required to verify an AWS Account ID of the current testing account or another account should use one of the following available helper functions over the usage of resource.TestCheckResourceAttrSet() and resource.TestMatchResourceAttr() : acctest.CheckResourceAttrAccountID() : Validates the state value equals the AWS Account ID of the current account running the test. This is the most common implementation. acctest.MatchResourceAttrAccountID() : Validates the state value matches any AWS Account ID (e.g. a 12 digit number). This is typically only used in data source testing of AWS managed components. Here's an example of using aws_caller_identity : data \"aws_caller_identity\" \"current\" {} resource \"aws_backup_selection\" \"test\" { plan_id = aws_backup_plan.test.id name = \"tf_acc_test_backup_selection_%[1]d\" iam_role_arn = \"arn:${data.aws_partition.current.partition}:iam::${data.aws_caller_identity.current.account_id}:role/service-role/AWSBackupDefaultServiceRole\" }","title":"Hardcoded Account IDs"},{"location":"contributing/running-and-writing-acceptance-tests/#hardcoded-ami-ids","text":"[ ] Uses aws_ami Data Source : Any hardcoded AMI ID configuration, e.g. ami-12345678 , should be replaced with the aws_ami data source pointing to an Amazon Linux image. The package internal/acctest includes test configuration helper functions to simplify these lookups: acctest.ConfigLatestAmazonLinuxHvmEbsAmi() : The recommended AMI for most situations, using Amazon Linux, HVM virtualization, and EBS storage. To reference the AMI ID in the test configuration: data.aws_ami.amzn-ami-minimal-hvm-ebs.id . testAccLatestAmazonLinuxHVMInstanceStoreAMIConfig() (EC2): AMI lookup using Amazon Linux, HVM virtualization, and Instance Store storage. Should only be used in testing that requires Instance Store storage rather than EBS. To reference the AMI ID in the test configuration: data.aws_ami.amzn-ami-minimal-hvm-instance-store.id . testAccLatestAmazonLinuxPVEBSAMIConfig() (EC2): AMI lookup using Amazon Linux, Paravirtual virtualization, and EBS storage. Should only be used in testing that requires Paravirtual over Hardware Virtual Machine (HVM) virtualization. To reference the AMI ID in the test configuration: data.aws_ami.amzn-ami-minimal-pv-ebs.id . configLatestAmazonLinuxPvInstanceStoreAmi (EC2): AMI lookup using Amazon Linux, Paravirtual virtualization, and Instance Store storage. Should only be used in testing that requires Paravirtual virtualization over HVM and Instance Store storage over EBS. To reference the AMI ID in the test configuration: data.aws_ami.amzn-ami-minimal-pv-instance-store.id . testAccLatestWindowsServer2016CoreAMIConfig() (EC2): AMI lookup using Windows Server 2016 Core, HVM virtualization, and EBS storage. Should only be used in testing that requires Windows. To reference the AMI ID in the test configuration: data.aws_ami.win2016core-ami.id . Here's an example of using acctest.ConfigLatestAmazonLinuxHvmEbsAmi() and data.aws_ami.amzn-ami-minimal-hvm-ebs.id : func testAccLaunchConfigurationDataSourceConfig_basic ( rName string ) string { return acctest . ConfigCompose ( acctest . ConfigLatestAmazonLinuxHvmEbsAmi (), fmt . Sprintf ( ` resource \"aws_launch_configuration\" \"test\" { name = %[1]q image_id = data.aws_ami.amzn-ami-minimal-hvm-ebs.id instance_type = \"m1.small\" } ` , rName )) }","title":"Hardcoded AMI IDs"},{"location":"contributing/running-and-writing-acceptance-tests/#hardcoded-availability-zones","text":"[ ] Uses aws_availability_zones Data Source : Any hardcoded AWS Availability Zone configuration, e.g. us-west-2a , should be replaced with the aws_availability_zones data source . Use the convenience function called acctest.ConfigAvailableAZsNoOptIn() (defined in internal/acctest/acctest.go ) to declare data \"aws_availability_zones\" \"available\" {...} . You can then reference the data source via data.aws_availability_zones.available.names[0] or data.aws_availability_zones.available.names[count.index] in resources using count . Here's an example of using acctest.ConfigAvailableAZsNoOptIn() and data.aws_availability_zones.available.names[0] : func testAccInstanceVpcConfigBasic ( rName string ) string { return acctest . ConfigCompose ( acctest . ConfigAvailableAZsNoOptIn (), fmt . Sprintf ( ` resource \"aws_subnet\" \"test\" { availability_zone = data.aws_availability_zones.available.names[0] cidr_block = \"10.0.0.0/24\" vpc_id = aws_vpc.test.id } ` , rName )) }","title":"Hardcoded Availability Zones"},{"location":"contributing/running-and-writing-acceptance-tests/#hardcoded-database-versions","text":"[ ] Uses Database Version Data Sources : Hardcoded database versions, e.g., RDS MySQL Engine Version 5.7.42 , should be removed (which means the AWS-defined default version will be used) or replaced with a list of preferred versions using a data source. Because versions change over times and version offerings vary from region to region and partition to partition, using the default version or providing a list of preferences ensures a version will be available. Depending on the situation, there are several data sources for versions, including: aws_rds_engine_version data source , aws_docdb_engine_version data source , and aws_neptune_engine_version data source . Here's an example of using aws_rds_engine_version and data.aws_rds_engine_version.default.version : data \"aws_rds_engine_version\" \"default\" { engine = \"mysql\" } data \"aws_rds_orderable_db_instance\" \"test\" { engine = data.aws_rds_engine_version.default.engine engine_version = data.aws_rds_engine_version.default.version preferred_instance_classes = [ \"db.t3.small\", \"db.t2.small\", \"db.t2.medium\" ] } resource \"aws_db_instance\" \"bar\" { engine = data.aws_rds_engine_version.default.engine engine_version = data.aws_rds_engine_version.default.version instance_class = data.aws_rds_orderable_db_instance.test.instance_class skip_final_snapshot = true parameter_group_name = \"default.${data.aws_rds_engine_version.default.parameter_group_family}\" }","title":"Hardcoded Database Versions"},{"location":"contributing/running-and-writing-acceptance-tests/#hardcoded-direct-connect-locations","text":"[ ] Uses aws_dx_locations Data Source : Hardcoded AWS Direct Connect locations, e.g., EqSe2 , should be replaced with the aws_dx_locations data source . Here's an example using data.aws_dx_locations.test.location_codes : data \"aws_dx_locations\" \"test\" {} resource \"aws_dx_lag\" \"test\" { name = \"Test LAG\" connections_bandwidth = \"1Gbps\" location = tolist ( data.aws_dx_locations.test.location_codes )[ 0 ] force_destroy = true }","title":"Hardcoded Direct Connect Locations"},{"location":"contributing/running-and-writing-acceptance-tests/#hardcoded-instance-types","text":"[ ] Uses Instance Type Data Source : Singular hardcoded instance types and classes, e.g., t2.micro and db.t2.micro , should be replaced with a list of preferences using a data source. Because offerings vary from region to region and partition to partition, providing a list of preferences dramatically improves the likelihood that one of the options will be available. Depending on the situation, there are several data sources for instance types and classes, including: aws_ec2_instance_type_offering data source - Convenience functions declare configurations that are referenced with data.aws_ec2_instance_type_offering.available including: The acctest.AvailableEC2InstanceTypeForAvailabilityZone() function for test configurations using an EC2 Subnet which is inherently within a single Availability Zone The acctest.AvailableEC2InstanceTypeForRegion() function for test configurations that do not include specific Availability Zones aws_rds_orderable_db_instance data source , aws_neptune_orderable_db_instance data source , and aws_docdb_orderable_db_instance data source . Here's an example of using acctest.AvailableEC2InstanceTypeForRegion() and data.aws_ec2_instance_type_offering.available.instance_type : func testAccSpotInstanceRequestConfig ( rInt int ) string { return acctest . ConfigCompose ( acctest . AvailableEC2InstanceTypeForRegion ( \"t3.micro\" , \"t2.micro\" ), fmt . Sprintf ( ` resource \"aws_spot_instance_request\" \"test\" { instance_type = data.aws_ec2_instance_type_offering.available.instance_type spot_price = \"0.05\" wait_for_fulfillment = true } ` , rInt )) } Here's an example of using aws_rds_orderable_db_instance and data.aws_rds_orderable_db_instance.test.instance_class : data \"aws_rds_orderable_db_instance\" \"test\" { engine = \"mysql\" engine_version = \"5.7.31\" preferred_instance_classes = [ \"db.t3.micro\", \"db.t2.micro\", \"db.t3.small\" ] } resource \"aws_db_instance\" \"test\" { engine = data.aws_rds_orderable_db_instance.test.engine engine_version = data.aws_rds_orderable_db_instance.test.engine_version instance_class = data.aws_rds_orderable_db_instance.test.instance_class skip_final_snapshot = true username = \"test\" }","title":"Hardcoded Instance Types"},{"location":"contributing/running-and-writing-acceptance-tests/#hardcoded-partition-dns-suffix","text":"[ ] Uses aws_partition Data Source : Any hardcoded DNS suffix configuration, e.g., the amazonaws.com in a ec2.amazonaws.com service principal, should be replaced with the aws_partition data source . A common pattern is declaring data \"aws_partition\" \"current\" {} and referencing it via data.aws_partition.current.dns_suffix . Here's an example of using aws_partition and data.aws_partition.current.dns_suffix : data \"aws_partition\" \"current\" {} resource \"aws_iam_role\" \"test\" { assume_role_policy = << POLICY { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"\", \"Effect\": \"Allow\", \"Principal\": { \"Service\": \"cloudtrail.${data.aws_partition.current.dns_suffix}\" }, \"Action\": \"sts:AssumeRole\" } ] } POLICY }","title":"Hardcoded Partition DNS Suffix"},{"location":"contributing/running-and-writing-acceptance-tests/#hardcoded-partition-in-arn","text":"[ ] Uses aws_partition Data Source : Any hardcoded AWS Partition configuration, e.g. the aws in a arn:aws:SERVICE:REGION:ACCOUNT:RESOURCE ARN, should be replaced with the aws_partition data source . A common pattern is declaring data \"aws_partition\" \"current\" {} and referencing it via data.aws_partition.current.partition . [ ] Uses Builtin ARN Check Functions : Tests should use available ARN check functions to validate ARN attribute values in the Terraform state over resource.TestCheckResourceAttrSet() and resource.TestMatchResourceAttr() : acctest.CheckResourceAttrRegionalARN() verifies that an ARN matches the account ID and region of the test execution with an exact resource value acctest.MatchResourceAttrRegionalARN() verifies that an ARN matches the account ID and region of the test execution with a regular expression of the resource value acctest.CheckResourceAttrGlobalARN() verifies that an ARN matches the account ID of the test execution with an exact resource value acctest.MatchResourceAttrGlobalARN() verifies that an ARN matches the account ID of the test execution with a regular expression of the resource value acctest.CheckResourceAttrRegionalARNNoAccount() verifies than an ARN has no account ID and matches the current region of the test execution with an exact resource value acctest.CheckResourceAttrGlobalARNNoAccount() verifies than an ARN has no account ID and matches an exact resource value acctest.CheckResourceAttrRegionalARNAccountID() verifies than an ARN matches a specific account ID and the current region of the test execution with an exact resource value acctest.CheckResourceAttrGlobalARNAccountID() verifies than an ARN matches a specific account ID with an exact resource value Here's an example of using aws_partition and data.aws_partition.current.partition : data \"aws_partition\" \"current\" {} resource \"aws_iam_role_policy_attachment\" \"test\" { policy_arn = \"arn:${data.aws_partition.current.partition}:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole\" role = aws_iam_role.test.name }","title":"Hardcoded Partition in ARN"},{"location":"contributing/running-and-writing-acceptance-tests/#hardcoded-region","text":"[ ] Uses aws_region Data Source : Any hardcoded AWS Region configuration, e.g., us-west-2 , should be replaced with the aws_region data source . A common pattern is declaring data \"aws_region\" \"current\" {} and referencing it via data.aws_region.current.name Here's an example of using aws_region and data.aws_region.current.name : data \"aws_region\" \"current\" {} resource \"aws_route53_zone\" \"test\" { vpc { vpc_id = aws_vpc.test.id vpc_region = data.aws_region.current.name } }","title":"Hardcoded Region"},{"location":"contributing/running-and-writing-acceptance-tests/#hardcoded-spot-price","text":"[ ] Uses aws_ec2_spot_price Data Source : Any hardcoded spot prices, e.g., 0.05 , should be replaced with the aws_ec2_spot_price data source . A common pattern is declaring data \"aws_ec2_spot_price\" \"current\" {} and referencing it via data.aws_ec2_spot_price.current.spot_price . Here's an example of using aws_ec2_spot_price and data.aws_ec2_spot_price.current.spot_price : data \"aws_ec2_spot_price\" \"current\" { instance_type = \"t3.medium\" filter { name = \"product-description\" values = [ \"Linux/UNIX\" ] } } resource \"aws_spot_fleet_request\" \"test\" { spot_price = data.aws_ec2_spot_price.current.spot_price target_capacity = 2 }","title":"Hardcoded Spot Price"},{"location":"contributing/running-and-writing-acceptance-tests/#hardcoded-ssh-keys","text":"[ ] Uses acctest.RandSSHKeyPair() or RandSSHKeyPairSize() Functions : Any hardcoded SSH keys should be replaced with random SSH keys generated by either the acceptance testing framework's function RandSSHKeyPair() or the provider function RandSSHKeyPairSize() . RandSSHKeyPair() generates 1024-bit keys. Here's an example using aws_key_pair func TestAccKeyPair_basic ( t * testing . T ) { ... rName := sdkacctest . RandomWithPrefix ( acctest . ResourcePrefix ) publicKey , _ , err := acctest . RandSSHKeyPair ( acctest . DefaultEmailAddress ) if err != nil { t . Fatalf ( \"error generating random SSH key: %s\" , err ) } resource . ParallelTest ( t , resource . TestCase { ... Steps : [] resource . TestStep { { Config : testAccKeyPairConfig ( rName , publicKey ), ... }, }, }) } func testAccKeyPairConfig ( rName , publicKey string ) string { return fmt . Sprintf ( ` resource \"aws_key_pair\" \"test\" { key_name = %[1]q public_key = %[2]q } ` , rName , publicKey ) }","title":"Hardcoded SSH Keys"},{"location":"contributing/running-and-writing-acceptance-tests/#hardcoded-email-addresses","text":"[ ] Uses either acctest.DefaultEmailAddress Constant or acctest.RandomEmailAddress() Function : Any hardcoded email addresses should replaced with either the constant acctest.DefaultEmailAddress or the function acctest.RandomEmailAddress() . Using acctest.DefaultEmailAddress is preferred when using a single email address in an acceptance test. Here's an example using acctest.DefaultEmailAddress func TestAccSNSTopicSubscription_email ( t * testing . T ) { ... rName := sdkacctest . RandomWithPrefix ( acctest . ResourcePrefix ) resource . ParallelTest ( t , resource . TestCase { ... Steps : [] resource . TestStep { { Config : testAccTopicSubscriptionEmailConfig ( rName , acctest . DefaultEmailAddress ), Check : resource . ComposeTestCheckFunc ( ... resource . TestCheckResourceAttr ( resourceName , \"endpoint\" , acctest . DefaultEmailAddress ), ), }, }, }) } Here's an example using acctest.RandomEmailAddress() func TestAccPinpointEmailChannel_basic ( t * testing . T ) { ... domain := acctest . RandomDomainName () address1 := acctest . RandomEmailAddress ( domain ) address2 := acctest . RandomEmailAddress ( domain ) resource . ParallelTest ( t , resource . TestCase { ... Steps : [] resource . TestStep { { Config : testAccEmailChannelConfig_FromAddress ( domain , address1 ), Check : resource . ComposeTestCheckFunc ( ... resource . TestCheckResourceAttr ( resourceName , \"from_address\" , address1 ), ), }, { Config : testAccEmailChannelConfig_FromAddress ( domain , address2 ), Check : resource . ComposeTestCheckFunc ( ... resource . TestCheckResourceAttr ( resourceName , \"from_address\" , address2 ), ), }, }, }) }","title":"Hardcoded Email Addresses"},{"location":"contributing/service-package-pullrequest-guide/","text":"Service Package Refactor Pull Request Guide # Pull request #21306 has significantly refactored the AWS provider codebase. Specifically, the code for all AWS resources and data sources has been relocated from a single aws directory to a large number of separate directories in internal/service , each corresponding to a particular AWS service. In addition to vastly simplifying the codebase's overall structure, this change has also allowed us to simplify the names of a number of underlying functions -- without encountering namespace collisions. Issue #20000 contains a more complete description of these changes. As a result, nearly every pull request opened prior to the refactoring has merge conflicts; they are attempting to apply changes to files that have since been relocated. Furthermore, any new files or functions introduced must be brought into line with the codebase's new conventions. The following steps are intended to resolve such a conflict -- though it should be noted that this guide is an active work in progress as additional pull requests are ameneded. These fixes, however, in no way affect the prioritization of a particular pull request. Once a pull request has been selected for review, the necessary changes will be made by a maintainer -- either directly or in collaboration with the pull request author. Fixing a Pre-Refactor Pull Request # git checkout the branch pertaining to the pull request you wish to amend Begin a merge of the latest version of main branch into your local branch: git pull origin main . Merge conflicts are expected. For any new file , rename and move the file to its appropriate service package directory: Resource Files git mv aws/resource_aws_{service_name}_{resource_name}.go \\ internal/service/{service_name}/{resource_name}.go Resource Test Files git mv aws/resource_aws_{service_name}_{resource_name}_test.go \\ internal/service/{service_name}/{resource_name}_test.go Data Source Files git mv aws/data_source_aws_{service_name}_{resource_name}.go \\ internal/service/{service_name}/{resource_name}_data_source.go Data Source Test Files git mv aws/data_source_aws_{service_name}_{resource_name}_test.go \\ internal/service/{service_name}/{resource_name}_data_source_test.go For any new function , rename the function appropriately: Resource Schema Functions func resourceAws{ResourceName}() => func Resource{ResourceName}() Resource Generic Functions func resourceAws{ServiceName}{ResourceName}{FunctionName}() => func resource{ResourceName}{FunctionName}() Resource Acceptance Test Functions func TestAccAWS{ServiceName}{ResourceName}_{testType}() => func TestAcc{ResourceName}_{testType}() Data Source Schema Functions func dataSourceAws{ResourceName}() => func DataSource{ResourceName}() Data Source Generic Functions func dataSourceAws{ServiceName}{ResourceName}{FunctionName}() => func dataSource{ResourceName}{FunctionName}() Data Source Acceptance Test Functions func TestAccDataSourceAWS{ServiceName}{ResourceName}_{testType}() => func TestAcc{ResourceName}DataSource_{testType}() Finder Functions func finder.{FunctionName}() => func Find{FunctionName}() Status Functions func waiter.{FunctionName}Status() => func status{FunctionName}() Waiter Functions func waiter.{FunctionName}() => func wait{FunctionName}() If a file has a package declaration of package aws , you will need to change it to the new package location. For example, if you moved a file to internal/service/ecs , the declaration will now be package ecs . Any file that imports \"github.com/hashicorp/terraform-provider-aws/internal/acctest\" must be in the <package>_test package. For example, internal/service/ecs/account_setting_default_test.go does import the acctest package and must have a package declaration of package ecs_test . If you have made any changes to aws/provider.go , you will have to manually re-enact those changes on the new internal/provider/provider.go file. Most commonly, these changes involve the addition of an entry to either the DataSourcesMap or ResourcesMap . If this is the case for your PR, you will have to adapt your entry to follow our new code conventions. Resources Map Entries \"{aws_terraform_resource_type}\": resourceAws{ServiceName}{ResourceName}(), => \"{aws_terraform_resource_type}\": {serviceName}.Resource{ResourceName}(), Data Source Map Entries \"{aws_terraform_data_source_type}\": dataSourceAws{ServiceName}{ResourceName}(), => \"{aws_terraform_data_source_type}\": {serviceName}.DataSource{ResourceName}(), Some functions, constants, and variables have been moved, removed, or renamed. This table shows some of the common changes you may need to make to fix compile errors. Before Now isAWSErr(\u03b1, \u03b2, \"<message>\") tfawserr.ErrMessageContains(\u03b1, \u03b2, \"<message>\") isAWSErr(\u03b1, \u03b2, \"\") tfawserr.ErrCodeEquals(\u03b1, \u03b2) isResourceNotFoundError(\u03b1) tfresource.NotFound(\u03b1) isResourceTimeoutError(\u03b1) tfresource.TimedOut(\u03b1) testSweepSkipResourceError(\u03b1) tfawserr.ErrCodeContains(\u03b1, \"AccessDenied\") testAccPreCheck(t) acctest.PreCheck(t) testAccProviders acctest.Providers acctest.RandomWithPrefix(\"tf-acc-test\") sdkacctest.RandomWithPrefix(acctest.ResourcePrefix) composeConfig(\u03b1) acctest.ConfigCompose(\u03b1) Use git status to report the state of the merge. Review any merge conflicts -- being sure to adopt the new naming conventions described in the previous step where relevant. Use git add to add any new files to the commit.","title":"Service Package Refactor Pull Request Guide"},{"location":"contributing/service-package-pullrequest-guide/#service-package-refactor-pull-request-guide","text":"Pull request #21306 has significantly refactored the AWS provider codebase. Specifically, the code for all AWS resources and data sources has been relocated from a single aws directory to a large number of separate directories in internal/service , each corresponding to a particular AWS service. In addition to vastly simplifying the codebase's overall structure, this change has also allowed us to simplify the names of a number of underlying functions -- without encountering namespace collisions. Issue #20000 contains a more complete description of these changes. As a result, nearly every pull request opened prior to the refactoring has merge conflicts; they are attempting to apply changes to files that have since been relocated. Furthermore, any new files or functions introduced must be brought into line with the codebase's new conventions. The following steps are intended to resolve such a conflict -- though it should be noted that this guide is an active work in progress as additional pull requests are ameneded. These fixes, however, in no way affect the prioritization of a particular pull request. Once a pull request has been selected for review, the necessary changes will be made by a maintainer -- either directly or in collaboration with the pull request author.","title":"Service Package Refactor Pull Request Guide"},{"location":"contributing/service-package-pullrequest-guide/#fixing-a-pre-refactor-pull-request","text":"git checkout the branch pertaining to the pull request you wish to amend Begin a merge of the latest version of main branch into your local branch: git pull origin main . Merge conflicts are expected. For any new file , rename and move the file to its appropriate service package directory: Resource Files git mv aws/resource_aws_{service_name}_{resource_name}.go \\ internal/service/{service_name}/{resource_name}.go Resource Test Files git mv aws/resource_aws_{service_name}_{resource_name}_test.go \\ internal/service/{service_name}/{resource_name}_test.go Data Source Files git mv aws/data_source_aws_{service_name}_{resource_name}.go \\ internal/service/{service_name}/{resource_name}_data_source.go Data Source Test Files git mv aws/data_source_aws_{service_name}_{resource_name}_test.go \\ internal/service/{service_name}/{resource_name}_data_source_test.go For any new function , rename the function appropriately: Resource Schema Functions func resourceAws{ResourceName}() => func Resource{ResourceName}() Resource Generic Functions func resourceAws{ServiceName}{ResourceName}{FunctionName}() => func resource{ResourceName}{FunctionName}() Resource Acceptance Test Functions func TestAccAWS{ServiceName}{ResourceName}_{testType}() => func TestAcc{ResourceName}_{testType}() Data Source Schema Functions func dataSourceAws{ResourceName}() => func DataSource{ResourceName}() Data Source Generic Functions func dataSourceAws{ServiceName}{ResourceName}{FunctionName}() => func dataSource{ResourceName}{FunctionName}() Data Source Acceptance Test Functions func TestAccDataSourceAWS{ServiceName}{ResourceName}_{testType}() => func TestAcc{ResourceName}DataSource_{testType}() Finder Functions func finder.{FunctionName}() => func Find{FunctionName}() Status Functions func waiter.{FunctionName}Status() => func status{FunctionName}() Waiter Functions func waiter.{FunctionName}() => func wait{FunctionName}() If a file has a package declaration of package aws , you will need to change it to the new package location. For example, if you moved a file to internal/service/ecs , the declaration will now be package ecs . Any file that imports \"github.com/hashicorp/terraform-provider-aws/internal/acctest\" must be in the <package>_test package. For example, internal/service/ecs/account_setting_default_test.go does import the acctest package and must have a package declaration of package ecs_test . If you have made any changes to aws/provider.go , you will have to manually re-enact those changes on the new internal/provider/provider.go file. Most commonly, these changes involve the addition of an entry to either the DataSourcesMap or ResourcesMap . If this is the case for your PR, you will have to adapt your entry to follow our new code conventions. Resources Map Entries \"{aws_terraform_resource_type}\": resourceAws{ServiceName}{ResourceName}(), => \"{aws_terraform_resource_type}\": {serviceName}.Resource{ResourceName}(), Data Source Map Entries \"{aws_terraform_data_source_type}\": dataSourceAws{ServiceName}{ResourceName}(), => \"{aws_terraform_data_source_type}\": {serviceName}.DataSource{ResourceName}(), Some functions, constants, and variables have been moved, removed, or renamed. This table shows some of the common changes you may need to make to fix compile errors. Before Now isAWSErr(\u03b1, \u03b2, \"<message>\") tfawserr.ErrMessageContains(\u03b1, \u03b2, \"<message>\") isAWSErr(\u03b1, \u03b2, \"\") tfawserr.ErrCodeEquals(\u03b1, \u03b2) isResourceNotFoundError(\u03b1) tfresource.NotFound(\u03b1) isResourceTimeoutError(\u03b1) tfresource.TimedOut(\u03b1) testSweepSkipResourceError(\u03b1) tfawserr.ErrCodeContains(\u03b1, \"AccessDenied\") testAccPreCheck(t) acctest.PreCheck(t) testAccProviders acctest.Providers acctest.RandomWithPrefix(\"tf-acc-test\") sdkacctest.RandomWithPrefix(acctest.ResourcePrefix) composeConfig(\u03b1) acctest.ConfigCompose(\u03b1) Use git status to report the state of the merge. Review any merge conflicts -- being sure to adopt the new naming conventions described in the previous step where relevant. Use git add to add any new files to the commit.","title":"Fixing a Pre-Refactor Pull Request"},{"location":"data-sources/ami/","text":"aws_ami (Data Source) # Schema # Required # owners (List of String) Optional # executable_users (List of String) filter (Block Set) (see below for nested schema ) most_recent (Boolean) name_regex (String) tags (Map of String) Read-Only # architecture (String) arn (String) block_device_mappings (Set of Object) (see below for nested schema ) boot_mode (String) creation_date (String) deprecation_time (String) description (String) ena_support (Boolean) hypervisor (String) id (String) The ID of this resource. image_id (String) image_location (String) image_owner_alias (String) image_type (String) kernel_id (String) name (String) owner_id (String) platform (String) platform_details (String) product_codes (Set of Object) (see below for nested schema ) public (Boolean) ramdisk_id (String) root_device_name (String) root_device_type (String) root_snapshot_id (String) sriov_net_support (String) state (String) state_reason (Map of String) usage_operation (String) virtualization_type (String) Nested Schema for filter # Required: name (String) values (List of String) Nested Schema for block_device_mappings # Read-Only: device_name (String) ebs (Map of String) no_device (String) virtual_name (String) Nested Schema for product_codes # Read-Only: product_code_id (String) product_code_type (String)","title":"aws_ami (Data Source)"},{"location":"data-sources/ami/#aws_ami-data-source","text":"","title":"aws_ami (Data Source)"},{"location":"data-sources/ami/#schema","text":"","title":"Schema"},{"location":"data-sources/ami/#required","text":"owners (List of String)","title":"Required"},{"location":"data-sources/ami/#optional","text":"executable_users (List of String) filter (Block Set) (see below for nested schema ) most_recent (Boolean) name_regex (String) tags (Map of String)","title":"Optional"},{"location":"data-sources/ami/#read-only","text":"architecture (String) arn (String) block_device_mappings (Set of Object) (see below for nested schema ) boot_mode (String) creation_date (String) deprecation_time (String) description (String) ena_support (Boolean) hypervisor (String) id (String) The ID of this resource. image_id (String) image_location (String) image_owner_alias (String) image_type (String) kernel_id (String) name (String) owner_id (String) platform (String) platform_details (String) product_codes (Set of Object) (see below for nested schema ) public (Boolean) ramdisk_id (String) root_device_name (String) root_device_type (String) root_snapshot_id (String) sriov_net_support (String) state (String) state_reason (Map of String) usage_operation (String) virtualization_type (String)","title":"Read-Only"},{"location":"data-sources/ami/#nested-schema-for-filter","text":"Required: name (String) values (List of String)","title":"Nested Schema for filter"},{"location":"data-sources/ami/#nested-schema-for-block_device_mappings","text":"Read-Only: device_name (String) ebs (Map of String) no_device (String) virtual_name (String)","title":"Nested Schema for block_device_mappings"},{"location":"data-sources/ami/#nested-schema-for-product_codes","text":"Read-Only: product_code_id (String) product_code_type (String)","title":"Nested Schema for product_codes"},{"location":"data-sources/ami_ids/","text":"aws_ami_ids (Data Source) # Schema # Required # owners (List of String) Optional # executable_users (List of String) filter (Block Set) (see below for nested schema ) name_regex (String) sort_ascending (Boolean) Read-Only # id (String) The ID of this resource. ids (List of String) Nested Schema for filter # Required: name (String) values (List of String)","title":"aws_ami_ids (Data Source)"},{"location":"data-sources/ami_ids/#aws_ami_ids-data-source","text":"","title":"aws_ami_ids (Data Source)"},{"location":"data-sources/ami_ids/#schema","text":"","title":"Schema"},{"location":"data-sources/ami_ids/#required","text":"owners (List of String)","title":"Required"},{"location":"data-sources/ami_ids/#optional","text":"executable_users (List of String) filter (Block Set) (see below for nested schema ) name_regex (String) sort_ascending (Boolean)","title":"Optional"},{"location":"data-sources/ami_ids/#read-only","text":"id (String) The ID of this resource. ids (List of String)","title":"Read-Only"},{"location":"data-sources/ami_ids/#nested-schema-for-filter","text":"Required: name (String) values (List of String)","title":"Nested Schema for filter"},{"location":"data-sources/autoscaling_group/","text":"aws_autoscaling_group (Data Source) # Schema # Required # name (String) Read-Only # arn (String) availability_zones (Set of String) default_cooldown (Number) desired_capacity (Number) enabled_metrics (Set of String) health_check_grace_period (Number) health_check_type (String) id (String) The ID of this resource. launch_configuration (String) launch_template (List of Object) (see below for nested schema ) load_balancers (Set of String) max_size (Number) min_size (Number) new_instances_protected_from_scale_in (Boolean) placement_group (String) service_linked_role_arn (String) status (String) target_group_arns (Set of String) termination_policies (Set of String) vpc_zone_identifier (String) Nested Schema for launch_template # Read-Only: id (String) name (String) version (String)","title":"aws_autoscaling_group (Data Source)"},{"location":"data-sources/autoscaling_group/#aws_autoscaling_group-data-source","text":"","title":"aws_autoscaling_group (Data Source)"},{"location":"data-sources/autoscaling_group/#schema","text":"","title":"Schema"},{"location":"data-sources/autoscaling_group/#required","text":"name (String)","title":"Required"},{"location":"data-sources/autoscaling_group/#read-only","text":"arn (String) availability_zones (Set of String) default_cooldown (Number) desired_capacity (Number) enabled_metrics (Set of String) health_check_grace_period (Number) health_check_type (String) id (String) The ID of this resource. launch_configuration (String) launch_template (List of Object) (see below for nested schema ) load_balancers (Set of String) max_size (Number) min_size (Number) new_instances_protected_from_scale_in (Boolean) placement_group (String) service_linked_role_arn (String) status (String) target_group_arns (Set of String) termination_policies (Set of String) vpc_zone_identifier (String)","title":"Read-Only"},{"location":"data-sources/autoscaling_group/#nested-schema-for-launch_template","text":"Read-Only: id (String) name (String) version (String)","title":"Nested Schema for launch_template"},{"location":"data-sources/availability_zone/","text":"aws_availability_zone (Data Source) # Schema # Optional # all_availability_zones (Boolean) filter (Block Set) (see below for nested schema ) name (String) state (String) zone_id (String) Read-Only # group_name (String) id (String) The ID of this resource. name_suffix (String) network_border_group (String) opt_in_status (String) parent_zone_id (String) parent_zone_name (String) region (String) zone_type (String) Nested Schema for filter # Required: name (String) values (Set of String)","title":"aws_availability_zone (Data Source)"},{"location":"data-sources/availability_zone/#aws_availability_zone-data-source","text":"","title":"aws_availability_zone (Data Source)"},{"location":"data-sources/availability_zone/#schema","text":"","title":"Schema"},{"location":"data-sources/availability_zone/#optional","text":"all_availability_zones (Boolean) filter (Block Set) (see below for nested schema ) name (String) state (String) zone_id (String)","title":"Optional"},{"location":"data-sources/availability_zone/#read-only","text":"group_name (String) id (String) The ID of this resource. name_suffix (String) network_border_group (String) opt_in_status (String) parent_zone_id (String) parent_zone_name (String) region (String) zone_type (String)","title":"Read-Only"},{"location":"data-sources/availability_zone/#nested-schema-for-filter","text":"Required: name (String) values (Set of String)","title":"Nested Schema for filter"},{"location":"data-sources/availability_zones/","text":"aws_availability_zones (Data Source) # Schema # Optional # all_availability_zones (Boolean) exclude_names (Set of String) exclude_zone_ids (Set of String) filter (Block Set) (see below for nested schema ) state (String) Read-Only # group_names (Set of String) id (String) The ID of this resource. names (List of String) zone_ids (List of String) Nested Schema for filter # Required: name (String) values (Set of String)","title":"aws_availability_zones (Data Source)"},{"location":"data-sources/availability_zones/#aws_availability_zones-data-source","text":"","title":"aws_availability_zones (Data Source)"},{"location":"data-sources/availability_zones/#schema","text":"","title":"Schema"},{"location":"data-sources/availability_zones/#optional","text":"all_availability_zones (Boolean) exclude_names (Set of String) exclude_zone_ids (Set of String) filter (Block Set) (see below for nested schema ) state (String)","title":"Optional"},{"location":"data-sources/availability_zones/#read-only","text":"group_names (Set of String) id (String) The ID of this resource. names (List of String) zone_ids (List of String)","title":"Read-Only"},{"location":"data-sources/availability_zones/#nested-schema-for-filter","text":"Required: name (String) values (Set of String)","title":"Nested Schema for filter"},{"location":"data-sources/backup_plan/","text":"aws_backup_plan (Data Source) # Schema # Required # plan_id (String) Read-Only # arn (String) id (String) The ID of this resource. name (String) version (String)","title":"aws_backup_plan (Data Source)"},{"location":"data-sources/backup_plan/#aws_backup_plan-data-source","text":"","title":"aws_backup_plan (Data Source)"},{"location":"data-sources/backup_plan/#schema","text":"","title":"Schema"},{"location":"data-sources/backup_plan/#required","text":"plan_id (String)","title":"Required"},{"location":"data-sources/backup_plan/#read-only","text":"arn (String) id (String) The ID of this resource. name (String) version (String)","title":"Read-Only"},{"location":"data-sources/backup_selection/","text":"aws_backup_selection (Data Source) # Schema # Required # plan_id (String) selection_id (String) Read-Only # iam_role_arn (String) id (String) The ID of this resource. name (String) resources (Set of String)","title":"aws_backup_selection (Data Source)"},{"location":"data-sources/backup_selection/#aws_backup_selection-data-source","text":"","title":"aws_backup_selection (Data Source)"},{"location":"data-sources/backup_selection/#schema","text":"","title":"Schema"},{"location":"data-sources/backup_selection/#required","text":"plan_id (String) selection_id (String)","title":"Required"},{"location":"data-sources/backup_selection/#read-only","text":"iam_role_arn (String) id (String) The ID of this resource. name (String) resources (Set of String)","title":"Read-Only"},{"location":"data-sources/backup_vault/","text":"aws_backup_vault (Data Source) # Schema # Required # name (String) Read-Only # arn (String) id (String) The ID of this resource. kms_key_arn (String) recovery_points (Number)","title":"aws_backup_vault (Data Source)"},{"location":"data-sources/backup_vault/#aws_backup_vault-data-source","text":"","title":"aws_backup_vault (Data Source)"},{"location":"data-sources/backup_vault/#schema","text":"","title":"Schema"},{"location":"data-sources/backup_vault/#required","text":"name (String)","title":"Required"},{"location":"data-sources/backup_vault/#read-only","text":"arn (String) id (String) The ID of this resource. kms_key_arn (String) recovery_points (Number)","title":"Read-Only"},{"location":"data-sources/canonical_user_id/","text":"aws_canonical_user_id (Data Source) # Schema # Read-Only # display_name (String) id (String) The ID of this resource.","title":"aws_canonical_user_id (Data Source)"},{"location":"data-sources/canonical_user_id/#aws_canonical_user_id-data-source","text":"","title":"aws_canonical_user_id (Data Source)"},{"location":"data-sources/canonical_user_id/#schema","text":"","title":"Schema"},{"location":"data-sources/canonical_user_id/#read-only","text":"display_name (String) id (String) The ID of this resource.","title":"Read-Only"},{"location":"data-sources/customer_gateway/","text":"aws_customer_gateway (Data Source) # Schema # Optional # filter (Block Set) (see below for nested schema ) tags (Map of String) Read-Only # arn (String) bgp_asn (Number) certificate_arn (String) device_name (String) id (String) The ID of this resource. ip_address (String) type (String) Nested Schema for filter # Required: name (String) values (List of String)","title":"aws_customer_gateway (Data Source)"},{"location":"data-sources/customer_gateway/#aws_customer_gateway-data-source","text":"","title":"aws_customer_gateway (Data Source)"},{"location":"data-sources/customer_gateway/#schema","text":"","title":"Schema"},{"location":"data-sources/customer_gateway/#optional","text":"filter (Block Set) (see below for nested schema ) tags (Map of String)","title":"Optional"},{"location":"data-sources/customer_gateway/#read-only","text":"arn (String) bgp_asn (Number) certificate_arn (String) device_name (String) id (String) The ID of this resource. ip_address (String) type (String)","title":"Read-Only"},{"location":"data-sources/customer_gateway/#nested-schema-for-filter","text":"Required: name (String) values (List of String)","title":"Nested Schema for filter"},{"location":"data-sources/ebs_snapshot/","text":"aws_ebs_snapshot (Data Source) # Schema # Optional # filter (Block Set) (see below for nested schema ) most_recent (Boolean) owners (List of String) restorable_by_user_ids (List of String) snapshot_ids (List of String) tags (Map of String) Read-Only # arn (String) data_encryption_key_id (String) description (String) encrypted (Boolean) id (String) The ID of this resource. kms_key_id (String) outpost_arn (String) owner_alias (String) owner_id (String) snapshot_id (String) state (String) storage_tier (String) volume_id (String) volume_size (Number) Nested Schema for filter # Required: name (String) values (List of String)","title":"aws_ebs_snapshot (Data Source)"},{"location":"data-sources/ebs_snapshot/#aws_ebs_snapshot-data-source","text":"","title":"aws_ebs_snapshot (Data Source)"},{"location":"data-sources/ebs_snapshot/#schema","text":"","title":"Schema"},{"location":"data-sources/ebs_snapshot/#optional","text":"filter (Block Set) (see below for nested schema ) most_recent (Boolean) owners (List of String) restorable_by_user_ids (List of String) snapshot_ids (List of String) tags (Map of String)","title":"Optional"},{"location":"data-sources/ebs_snapshot/#read-only","text":"arn (String) data_encryption_key_id (String) description (String) encrypted (Boolean) id (String) The ID of this resource. kms_key_id (String) outpost_arn (String) owner_alias (String) owner_id (String) snapshot_id (String) state (String) storage_tier (String) volume_id (String) volume_size (Number)","title":"Read-Only"},{"location":"data-sources/ebs_snapshot/#nested-schema-for-filter","text":"Required: name (String) values (List of String)","title":"Nested Schema for filter"},{"location":"data-sources/ebs_snapshot_ids/","text":"aws_ebs_snapshot_ids (Data Source) # Schema # Optional # filter (Block Set) (see below for nested schema ) owners (List of String) restorable_by_user_ids (List of String) Read-Only # id (String) The ID of this resource. ids (List of String) Nested Schema for filter # Required: name (String) values (List of String)","title":"aws_ebs_snapshot_ids (Data Source)"},{"location":"data-sources/ebs_snapshot_ids/#aws_ebs_snapshot_ids-data-source","text":"","title":"aws_ebs_snapshot_ids (Data Source)"},{"location":"data-sources/ebs_snapshot_ids/#schema","text":"","title":"Schema"},{"location":"data-sources/ebs_snapshot_ids/#optional","text":"filter (Block Set) (see below for nested schema ) owners (List of String) restorable_by_user_ids (List of String)","title":"Optional"},{"location":"data-sources/ebs_snapshot_ids/#read-only","text":"id (String) The ID of this resource. ids (List of String)","title":"Read-Only"},{"location":"data-sources/ebs_snapshot_ids/#nested-schema-for-filter","text":"Required: name (String) values (List of String)","title":"Nested Schema for filter"},{"location":"data-sources/ebs_volume/","text":"aws_ebs_volume (Data Source) # Schema # Optional # filter (Block Set) (see below for nested schema ) most_recent (Boolean) tags (Map of String) Read-Only # arn (String) availability_zone (String) encrypted (Boolean) id (String) The ID of this resource. iops (Number) kms_key_id (String) multi_attach_enabled (Boolean) outpost_arn (String) size (Number) snapshot_id (String) throughput (Number) volume_id (String) volume_type (String) Nested Schema for filter # Required: name (String) values (List of String)","title":"aws_ebs_volume (Data Source)"},{"location":"data-sources/ebs_volume/#aws_ebs_volume-data-source","text":"","title":"aws_ebs_volume (Data Source)"},{"location":"data-sources/ebs_volume/#schema","text":"","title":"Schema"},{"location":"data-sources/ebs_volume/#optional","text":"filter (Block Set) (see below for nested schema ) most_recent (Boolean) tags (Map of String)","title":"Optional"},{"location":"data-sources/ebs_volume/#read-only","text":"arn (String) availability_zone (String) encrypted (Boolean) id (String) The ID of this resource. iops (Number) kms_key_id (String) multi_attach_enabled (Boolean) outpost_arn (String) size (Number) snapshot_id (String) throughput (Number) volume_id (String) volume_type (String)","title":"Read-Only"},{"location":"data-sources/ebs_volume/#nested-schema-for-filter","text":"Required: name (String) values (List of String)","title":"Nested Schema for filter"},{"location":"data-sources/ebs_volumes/","text":"aws_ebs_volumes (Data Source) # Schema # Optional # filter (Block Set) (see below for nested schema ) tags (Map of String) Read-Only # id (String) The ID of this resource. ids (List of String) Nested Schema for filter # Required: name (String) values (List of String)","title":"aws_ebs_volumes (Data Source)"},{"location":"data-sources/ebs_volumes/#aws_ebs_volumes-data-source","text":"","title":"aws_ebs_volumes (Data Source)"},{"location":"data-sources/ebs_volumes/#schema","text":"","title":"Schema"},{"location":"data-sources/ebs_volumes/#optional","text":"filter (Block Set) (see below for nested schema ) tags (Map of String)","title":"Optional"},{"location":"data-sources/ebs_volumes/#read-only","text":"id (String) The ID of this resource. ids (List of String)","title":"Read-Only"},{"location":"data-sources/ebs_volumes/#nested-schema-for-filter","text":"Required: name (String) values (List of String)","title":"Nested Schema for filter"},{"location":"data-sources/ec2_host/","text":"aws_ec2_host (Data Source) # Schema # Optional # filter (Block Set) (see below for nested schema ) host_id (String) tags (Map of String) Read-Only # arn (String) auto_placement (String) availability_zone (String) cores (Number) host_recovery (String) id (String) The ID of this resource. instance_family (List of String) instance_type (String) owner_id (String) sockets (Number) total_vcpus (Number) Nested Schema for filter # Required: name (String) values (List of String)","title":"aws_ec2_host (Data Source)"},{"location":"data-sources/ec2_host/#aws_ec2_host-data-source","text":"","title":"aws_ec2_host (Data Source)"},{"location":"data-sources/ec2_host/#schema","text":"","title":"Schema"},{"location":"data-sources/ec2_host/#optional","text":"filter (Block Set) (see below for nested schema ) host_id (String) tags (Map of String)","title":"Optional"},{"location":"data-sources/ec2_host/#read-only","text":"arn (String) auto_placement (String) availability_zone (String) cores (Number) host_recovery (String) id (String) The ID of this resource. instance_family (List of String) instance_type (String) owner_id (String) sockets (Number) total_vcpus (Number)","title":"Read-Only"},{"location":"data-sources/ec2_host/#nested-schema-for-filter","text":"Required: name (String) values (List of String)","title":"Nested Schema for filter"},{"location":"data-sources/ec2_transit_gateway/","text":"aws_ec2_transit_gateway (Data Source) # Schema # Optional # filter (Block Set) (see below for nested schema ) tags (Map of String) Read-Only # amazon_side_asn (Number) arn (String) association_default_route_table_id (String) auto_accept_shared_attachments (String) default_route_table_association (String) default_route_table_propagation (String) description (String) dns_support (String) id (String) The ID of this resource. multicast_support (String) owner_id (String) propagation_default_route_table_id (String) shared_owners (Set of String) transit_gateway_cidr_blocks (List of String) vpn_ecmp_support (String) Nested Schema for filter # Required: name (String) values (List of String)","title":"aws_ec2_transit_gateway (Data Source)"},{"location":"data-sources/ec2_transit_gateway/#aws_ec2_transit_gateway-data-source","text":"","title":"aws_ec2_transit_gateway (Data Source)"},{"location":"data-sources/ec2_transit_gateway/#schema","text":"","title":"Schema"},{"location":"data-sources/ec2_transit_gateway/#optional","text":"filter (Block Set) (see below for nested schema ) tags (Map of String)","title":"Optional"},{"location":"data-sources/ec2_transit_gateway/#read-only","text":"amazon_side_asn (Number) arn (String) association_default_route_table_id (String) auto_accept_shared_attachments (String) default_route_table_association (String) default_route_table_propagation (String) description (String) dns_support (String) id (String) The ID of this resource. multicast_support (String) owner_id (String) propagation_default_route_table_id (String) shared_owners (Set of String) transit_gateway_cidr_blocks (List of String) vpn_ecmp_support (String)","title":"Read-Only"},{"location":"data-sources/ec2_transit_gateway/#nested-schema-for-filter","text":"Required: name (String) values (List of String)","title":"Nested Schema for filter"},{"location":"data-sources/ec2_transit_gateway_route_table/","text":"aws_ec2_transit_gateway_route_table (Data Source) # Schema # Optional # filter (Block Set) (see below for nested schema ) tags (Map of String) Read-Only # arn (String) default_association_route_table (Boolean) default_propagation_route_table (Boolean) id (String) The ID of this resource. transit_gateway_id (String) Nested Schema for filter # Required: name (String) values (List of String)","title":"aws_ec2_transit_gateway_route_table (Data Source)"},{"location":"data-sources/ec2_transit_gateway_route_table/#aws_ec2_transit_gateway_route_table-data-source","text":"","title":"aws_ec2_transit_gateway_route_table (Data Source)"},{"location":"data-sources/ec2_transit_gateway_route_table/#schema","text":"","title":"Schema"},{"location":"data-sources/ec2_transit_gateway_route_table/#optional","text":"filter (Block Set) (see below for nested schema ) tags (Map of String)","title":"Optional"},{"location":"data-sources/ec2_transit_gateway_route_table/#read-only","text":"arn (String) default_association_route_table (Boolean) default_propagation_route_table (Boolean) id (String) The ID of this resource. transit_gateway_id (String)","title":"Read-Only"},{"location":"data-sources/ec2_transit_gateway_route_table/#nested-schema-for-filter","text":"Required: name (String) values (List of String)","title":"Nested Schema for filter"},{"location":"data-sources/ec2_transit_gateway_route_tables/","text":"aws_ec2_transit_gateway_route_tables (Data Source) # Schema # Optional # filter (Block Set) (see below for nested schema ) tags (Map of String) Read-Only # id (String) The ID of this resource. ids (List of String) Nested Schema for filter # Required: name (String) values (List of String)","title":"aws_ec2_transit_gateway_route_tables (Data Source)"},{"location":"data-sources/ec2_transit_gateway_route_tables/#aws_ec2_transit_gateway_route_tables-data-source","text":"","title":"aws_ec2_transit_gateway_route_tables (Data Source)"},{"location":"data-sources/ec2_transit_gateway_route_tables/#schema","text":"","title":"Schema"},{"location":"data-sources/ec2_transit_gateway_route_tables/#optional","text":"filter (Block Set) (see below for nested schema ) tags (Map of String)","title":"Optional"},{"location":"data-sources/ec2_transit_gateway_route_tables/#read-only","text":"id (String) The ID of this resource. ids (List of String)","title":"Read-Only"},{"location":"data-sources/ec2_transit_gateway_route_tables/#nested-schema-for-filter","text":"Required: name (String) values (List of String)","title":"Nested Schema for filter"},{"location":"data-sources/ec2_transit_gateway_vpc_attachment/","text":"aws_ec2_transit_gateway_vpc_attachment (Data Source) # Schema # Optional # filter (Block Set) (see below for nested schema ) tags (Map of String) Read-Only # appliance_mode_support (String) dns_support (String) id (String) The ID of this resource. ipv6_support (String) subnet_ids (Set of String) transit_gateway_id (String) vpc_id (String) vpc_owner_id (String) Nested Schema for filter # Required: name (String) values (List of String)","title":"aws_ec2_transit_gateway_vpc_attachment (Data Source)"},{"location":"data-sources/ec2_transit_gateway_vpc_attachment/#aws_ec2_transit_gateway_vpc_attachment-data-source","text":"","title":"aws_ec2_transit_gateway_vpc_attachment (Data Source)"},{"location":"data-sources/ec2_transit_gateway_vpc_attachment/#schema","text":"","title":"Schema"},{"location":"data-sources/ec2_transit_gateway_vpc_attachment/#optional","text":"filter (Block Set) (see below for nested schema ) tags (Map of String)","title":"Optional"},{"location":"data-sources/ec2_transit_gateway_vpc_attachment/#read-only","text":"appliance_mode_support (String) dns_support (String) id (String) The ID of this resource. ipv6_support (String) subnet_ids (Set of String) transit_gateway_id (String) vpc_id (String) vpc_owner_id (String)","title":"Read-Only"},{"location":"data-sources/ec2_transit_gateway_vpc_attachment/#nested-schema-for-filter","text":"Required: name (String) values (List of String)","title":"Nested Schema for filter"},{"location":"data-sources/ec2_transit_gateway_vpc_attachments/","text":"aws_ec2_transit_gateway_vpc_attachments (Data Source) # Schema # Optional # filter (Block Set) (see below for nested schema ) Read-Only # id (String) The ID of this resource. ids (List of String) Nested Schema for filter # Required: name (String) values (List of String)","title":"aws_ec2_transit_gateway_vpc_attachments (Data Source)"},{"location":"data-sources/ec2_transit_gateway_vpc_attachments/#aws_ec2_transit_gateway_vpc_attachments-data-source","text":"","title":"aws_ec2_transit_gateway_vpc_attachments (Data Source)"},{"location":"data-sources/ec2_transit_gateway_vpc_attachments/#schema","text":"","title":"Schema"},{"location":"data-sources/ec2_transit_gateway_vpc_attachments/#optional","text":"filter (Block Set) (see below for nested schema )","title":"Optional"},{"location":"data-sources/ec2_transit_gateway_vpc_attachments/#read-only","text":"id (String) The ID of this resource. ids (List of String)","title":"Read-Only"},{"location":"data-sources/ec2_transit_gateway_vpc_attachments/#nested-schema-for-filter","text":"Required: name (String) values (List of String)","title":"Nested Schema for filter"},{"location":"data-sources/eip/","text":"aws_eip (Data Source) # Schema # Optional # filter (Block Set) (see below for nested schema ) public_ip (String) tags (Map of String) Read-Only # association_id (String) carrier_ip (String) customer_owned_ip (String) customer_owned_ipv4_pool (String) domain (String) id (String) The ID of this resource. instance_id (String) network_interface_id (String) network_interface_owner_id (String) private_dns (String) private_ip (String) public_dns (String) public_ipv4_pool (String) Nested Schema for filter # Required: name (String) values (Set of String)","title":"aws_eip (Data Source)"},{"location":"data-sources/eip/#aws_eip-data-source","text":"","title":"aws_eip (Data Source)"},{"location":"data-sources/eip/#schema","text":"","title":"Schema"},{"location":"data-sources/eip/#optional","text":"filter (Block Set) (see below for nested schema ) public_ip (String) tags (Map of String)","title":"Optional"},{"location":"data-sources/eip/#read-only","text":"association_id (String) carrier_ip (String) customer_owned_ip (String) customer_owned_ipv4_pool (String) domain (String) id (String) The ID of this resource. instance_id (String) network_interface_id (String) network_interface_owner_id (String) private_dns (String) private_ip (String) public_dns (String) public_ipv4_pool (String)","title":"Read-Only"},{"location":"data-sources/eip/#nested-schema-for-filter","text":"Required: name (String) values (Set of String)","title":"Nested Schema for filter"},{"location":"data-sources/eips/","text":"aws_eips (Data Source) # Schema # Optional # filter (Block Set) (see below for nested schema ) tags (Map of String) Read-Only # allocation_ids (List of String) id (String) The ID of this resource. public_ips (List of String) Nested Schema for filter # Required: name (String) values (List of String)","title":"aws_eips (Data Source)"},{"location":"data-sources/eips/#aws_eips-data-source","text":"","title":"aws_eips (Data Source)"},{"location":"data-sources/eips/#schema","text":"","title":"Schema"},{"location":"data-sources/eips/#optional","text":"filter (Block Set) (see below for nested schema ) tags (Map of String)","title":"Optional"},{"location":"data-sources/eips/#read-only","text":"allocation_ids (List of String) id (String) The ID of this resource. public_ips (List of String)","title":"Read-Only"},{"location":"data-sources/eips/#nested-schema-for-filter","text":"Required: name (String) values (List of String)","title":"Nested Schema for filter"},{"location":"data-sources/eks_cluster/","text":"aws_eks_cluster (Data Source) # Schema # Required # name (String) Optional # tags (Map of String) Read-Only # arn (String) certificate_authority (List of Object) (see below for nested schema ) created_at (String) enabled_cluster_log_types (Set of String) endpoint (String) id (String) The ID of this resource. identity (List of Object) (see below for nested schema ) kubernetes_network_config (List of Object) (see below for nested schema ) platform_version (String) role_arn (String) status (String) version (String) vpc_config (List of Object) (see below for nested schema ) Nested Schema for certificate_authority # Read-Only: data (String) Nested Schema for identity # Read-Only: oidc (List of Object) (see below for nested schema ) Nested Schema for identity.oidc # Read-Only: issuer (String) Nested Schema for kubernetes_network_config # Read-Only: ip_family (String) service_ipv4_cidr (String) Nested Schema for vpc_config # Read-Only: cluster_security_group_id (String) endpoint_private_access (Boolean) endpoint_public_access (Boolean) public_access_cidrs (Set of String) security_group_ids (Set of String) subnet_ids (Set of String) vpc_id (String)","title":"aws_eks_cluster (Data Source)"},{"location":"data-sources/eks_cluster/#aws_eks_cluster-data-source","text":"","title":"aws_eks_cluster (Data Source)"},{"location":"data-sources/eks_cluster/#schema","text":"","title":"Schema"},{"location":"data-sources/eks_cluster/#required","text":"name (String)","title":"Required"},{"location":"data-sources/eks_cluster/#optional","text":"tags (Map of String)","title":"Optional"},{"location":"data-sources/eks_cluster/#read-only","text":"arn (String) certificate_authority (List of Object) (see below for nested schema ) created_at (String) enabled_cluster_log_types (Set of String) endpoint (String) id (String) The ID of this resource. identity (List of Object) (see below for nested schema ) kubernetes_network_config (List of Object) (see below for nested schema ) platform_version (String) role_arn (String) status (String) version (String) vpc_config (List of Object) (see below for nested schema )","title":"Read-Only"},{"location":"data-sources/eks_cluster/#nested-schema-for-certificate_authority","text":"Read-Only: data (String)","title":"Nested Schema for certificate_authority"},{"location":"data-sources/eks_cluster/#nested-schema-for-identity","text":"Read-Only: oidc (List of Object) (see below for nested schema )","title":"Nested Schema for identity"},{"location":"data-sources/eks_cluster/#nested-schema-for-identityoidc","text":"Read-Only: issuer (String)","title":"Nested Schema for identity.oidc"},{"location":"data-sources/eks_cluster/#nested-schema-for-kubernetes_network_config","text":"Read-Only: ip_family (String) service_ipv4_cidr (String)","title":"Nested Schema for kubernetes_network_config"},{"location":"data-sources/eks_cluster/#nested-schema-for-vpc_config","text":"Read-Only: cluster_security_group_id (String) endpoint_private_access (Boolean) endpoint_public_access (Boolean) public_access_cidrs (Set of String) security_group_ids (Set of String) subnet_ids (Set of String) vpc_id (String)","title":"Nested Schema for vpc_config"},{"location":"data-sources/eks_cluster_auth/","text":"aws_eks_cluster_auth (Data Source) # Schema # Required # name (String) Read-Only # id (String) The ID of this resource. token (String, Sensitive)","title":"aws_eks_cluster_auth (Data Source)"},{"location":"data-sources/eks_cluster_auth/#aws_eks_cluster_auth-data-source","text":"","title":"aws_eks_cluster_auth (Data Source)"},{"location":"data-sources/eks_cluster_auth/#schema","text":"","title":"Schema"},{"location":"data-sources/eks_cluster_auth/#required","text":"name (String)","title":"Required"},{"location":"data-sources/eks_cluster_auth/#read-only","text":"id (String) The ID of this resource. token (String, Sensitive)","title":"Read-Only"},{"location":"data-sources/eks_clusters/","text":"aws_eks_clusters (Data Source) # Schema # Read-Only # id (String) The ID of this resource. names (Set of String)","title":"aws_eks_clusters (Data Source)"},{"location":"data-sources/eks_clusters/#aws_eks_clusters-data-source","text":"","title":"aws_eks_clusters (Data Source)"},{"location":"data-sources/eks_clusters/#schema","text":"","title":"Schema"},{"location":"data-sources/eks_clusters/#read-only","text":"id (String) The ID of this resource. names (Set of String)","title":"Read-Only"},{"location":"data-sources/eks_node_group/","text":"aws_eks_node_group (Data Source) # Schema # Required # cluster_name (String) node_group_name (String) Optional # tags (Map of String) Read-Only # ami_type (String) arn (String) disk_size (Number) id (String) The ID of this resource. instance_types (List of String) labels (Map of String) node_role_arn (String) release_version (String) remote_access (List of Object) (see below for nested schema ) resources (List of Object) (see below for nested schema ) scaling_config (List of Object) (see below for nested schema ) status (String) subnet_ids (Set of String) taints (List of Object) (see below for nested schema ) version (String) Nested Schema for remote_access # Read-Only: ec2_ssh_key (String) source_security_group_ids (Set of String) Nested Schema for resources # Read-Only: autoscaling_groups (List of Object) (see below for nested schema ) remote_access_security_group_id (String) Nested Schema for resources.autoscaling_groups # Read-Only: name (String) Nested Schema for scaling_config # Read-Only: desired_size (Number) max_size (Number) min_size (Number) Nested Schema for taints # Read-Only: effect (String) key (String) value (String)","title":"aws_eks_node_group (Data Source)"},{"location":"data-sources/eks_node_group/#aws_eks_node_group-data-source","text":"","title":"aws_eks_node_group (Data Source)"},{"location":"data-sources/eks_node_group/#schema","text":"","title":"Schema"},{"location":"data-sources/eks_node_group/#required","text":"cluster_name (String) node_group_name (String)","title":"Required"},{"location":"data-sources/eks_node_group/#optional","text":"tags (Map of String)","title":"Optional"},{"location":"data-sources/eks_node_group/#read-only","text":"ami_type (String) arn (String) disk_size (Number) id (String) The ID of this resource. instance_types (List of String) labels (Map of String) node_role_arn (String) release_version (String) remote_access (List of Object) (see below for nested schema ) resources (List of Object) (see below for nested schema ) scaling_config (List of Object) (see below for nested schema ) status (String) subnet_ids (Set of String) taints (List of Object) (see below for nested schema ) version (String)","title":"Read-Only"},{"location":"data-sources/eks_node_group/#nested-schema-for-remote_access","text":"Read-Only: ec2_ssh_key (String) source_security_group_ids (Set of String)","title":"Nested Schema for remote_access"},{"location":"data-sources/eks_node_group/#nested-schema-for-resources","text":"Read-Only: autoscaling_groups (List of Object) (see below for nested schema ) remote_access_security_group_id (String)","title":"Nested Schema for resources"},{"location":"data-sources/eks_node_group/#nested-schema-for-resourcesautoscaling_groups","text":"Read-Only: name (String)","title":"Nested Schema for resources.autoscaling_groups"},{"location":"data-sources/eks_node_group/#nested-schema-for-scaling_config","text":"Read-Only: desired_size (Number) max_size (Number) min_size (Number)","title":"Nested Schema for scaling_config"},{"location":"data-sources/eks_node_group/#nested-schema-for-taints","text":"Read-Only: effect (String) key (String) value (String)","title":"Nested Schema for taints"},{"location":"data-sources/eks_node_groups/","text":"aws_eks_node_groups (Data Source) # Schema # Required # cluster_name (String) Read-Only # id (String) The ID of this resource. names (Set of String)","title":"aws_eks_node_groups (Data Source)"},{"location":"data-sources/eks_node_groups/#aws_eks_node_groups-data-source","text":"","title":"aws_eks_node_groups (Data Source)"},{"location":"data-sources/eks_node_groups/#schema","text":"","title":"Schema"},{"location":"data-sources/eks_node_groups/#required","text":"cluster_name (String)","title":"Required"},{"location":"data-sources/eks_node_groups/#read-only","text":"id (String) The ID of this resource. names (Set of String)","title":"Read-Only"},{"location":"data-sources/iam_group/","text":"aws_iam_group (Data Source) # Schema # Optional # arn (String) name (String) Read-Only # create_date (String) group_id (String) id (String) The ID of this resource. owner (String) path (String) type (String) users (List of Object) (see below for nested schema ) Nested Schema for users # Read-Only: arn (String) path (String) user_id (String) user_name (String)","title":"aws_iam_group (Data Source)"},{"location":"data-sources/iam_group/#aws_iam_group-data-source","text":"","title":"aws_iam_group (Data Source)"},{"location":"data-sources/iam_group/#schema","text":"","title":"Schema"},{"location":"data-sources/iam_group/#optional","text":"arn (String) name (String)","title":"Optional"},{"location":"data-sources/iam_group/#read-only","text":"create_date (String) group_id (String) id (String) The ID of this resource. owner (String) path (String) type (String) users (List of Object) (see below for nested schema )","title":"Read-Only"},{"location":"data-sources/iam_group/#nested-schema-for-users","text":"Read-Only: arn (String) path (String) user_id (String) user_name (String)","title":"Nested Schema for users"},{"location":"data-sources/iam_policy/","text":"aws_iam_policy (Data Source) # Schema # Optional # arn (String) name (String) path_prefix (String) tags (Map of String) Read-Only # create_date (String) description (String) id (String) The ID of this resource. owner (String) path (String) policy (String) policy_id (String) type (String) update_date (String)","title":"aws_iam_policy (Data Source)"},{"location":"data-sources/iam_policy/#aws_iam_policy-data-source","text":"","title":"aws_iam_policy (Data Source)"},{"location":"data-sources/iam_policy/#schema","text":"","title":"Schema"},{"location":"data-sources/iam_policy/#optional","text":"arn (String) name (String) path_prefix (String) tags (Map of String)","title":"Optional"},{"location":"data-sources/iam_policy/#read-only","text":"create_date (String) description (String) id (String) The ID of this resource. owner (String) path (String) policy (String) policy_id (String) type (String) update_date (String)","title":"Read-Only"},{"location":"data-sources/iam_project/","text":"aws_iam_project (Data Source) # Schema # Required # name (String) Read-Only # arn (String) create_date (String) display_name (String) id (String) The ID of this resource. project_id (String) s3_email (String) state (String)","title":"aws_iam_project (Data Source)"},{"location":"data-sources/iam_project/#aws_iam_project-data-source","text":"","title":"aws_iam_project (Data Source)"},{"location":"data-sources/iam_project/#schema","text":"","title":"Schema"},{"location":"data-sources/iam_project/#required","text":"name (String)","title":"Required"},{"location":"data-sources/iam_project/#read-only","text":"arn (String) create_date (String) display_name (String) id (String) The ID of this resource. project_id (String) s3_email (String) state (String)","title":"Read-Only"},{"location":"data-sources/iam_user/","text":"aws_iam_user (Data Source) # Schema # Required # name (String) Optional # tags (Map of String) Read-Only # arn (String) display_name (String) email (String) enabled (Boolean) id (String) The ID of this resource. last_login_date (String) login (String) otp_required (Boolean) path (String) permissions_boundary (String) phone (String) update_date (String) user_id (String)","title":"aws_iam_user (Data Source)"},{"location":"data-sources/iam_user/#aws_iam_user-data-source","text":"","title":"aws_iam_user (Data Source)"},{"location":"data-sources/iam_user/#schema","text":"","title":"Schema"},{"location":"data-sources/iam_user/#required","text":"name (String)","title":"Required"},{"location":"data-sources/iam_user/#optional","text":"tags (Map of String)","title":"Optional"},{"location":"data-sources/iam_user/#read-only","text":"arn (String) display_name (String) email (String) enabled (Boolean) id (String) The ID of this resource. last_login_date (String) login (String) otp_required (Boolean) path (String) permissions_boundary (String) phone (String) update_date (String) user_id (String)","title":"Read-Only"},{"location":"data-sources/iam_users/","text":"aws_iam_users (Data Source) # Schema # Optional # name_regex (String) path_prefix (String) Read-Only # arns (Set of String) id (String) The ID of this resource. names (Set of String)","title":"aws_iam_users (Data Source)"},{"location":"data-sources/iam_users/#aws_iam_users-data-source","text":"","title":"aws_iam_users (Data Source)"},{"location":"data-sources/iam_users/#schema","text":"","title":"Schema"},{"location":"data-sources/iam_users/#optional","text":"name_regex (String) path_prefix (String)","title":"Optional"},{"location":"data-sources/iam_users/#read-only","text":"arns (Set of String) id (String) The ID of this resource. names (Set of String)","title":"Read-Only"},{"location":"data-sources/instance/","text":"aws_instance (Data Source) # Schema # Optional # filter (Block Set) (see below for nested schema ) get_password_data (Boolean) get_user_data (Boolean) instance_id (String) instance_tags (Map of String) tags (Map of String) Read-Only # affinity (String) ami (String) arn (String) associate_public_ip_address (Boolean) availability_zone (String) credit_specification (List of Object) (see below for nested schema ) disable_api_termination (Boolean) ebs_block_device (Set of Object) (see below for nested schema ) ebs_optimized (Boolean) enclave_options (List of Object) (see below for nested schema ) ephemeral_block_device (List of Object) (see below for nested schema ) host_id (String) iam_instance_profile (String) id (String) The ID of this resource. instance_state (String) instance_type (String) ipv6_addresses (Set of String) key_name (String) maintenance_options (List of Object) (see below for nested schema ) metadata_options (List of Object) (see below for nested schema ) monitoring (Boolean) network_interface_id (String) outpost_arn (String) password_data (String) placement_group (String) placement_partition_number (Number) private_dns (String) private_ip (String) public_dns (String) public_ip (String) root_block_device (Set of Object) (see below for nested schema ) secondary_private_ips (Set of String) security_groups (Set of String) source_dest_check (Boolean) subnet_id (String) tenancy (String) user_data (String) user_data_base64 (String) vpc_security_group_ids (Set of String) Nested Schema for filter # Required: name (String) values (Set of String) Nested Schema for credit_specification # Read-Only: cpu_credits (String) Nested Schema for ebs_block_device # Read-Only: delete_on_termination (Boolean) device_name (String) encrypted (Boolean) iops (Number) kms_key_id (String) snapshot_id (String) tags (Map of String) throughput (Number) volume_id (String) volume_size (Number) volume_type (String) Nested Schema for enclave_options # Read-Only: enabled (Boolean) Nested Schema for ephemeral_block_device # Read-Only: device_name (String) no_device (Boolean) virtual_name (String) Nested Schema for maintenance_options # Read-Only: auto_recovery (String) Nested Schema for metadata_options # Read-Only: http_endpoint (String) http_put_response_hop_limit (Number) http_tokens (String) instance_metadata_tags (String) Nested Schema for root_block_device # Read-Only: delete_on_termination (Boolean) device_name (String) encrypted (Boolean) iops (Number) kms_key_id (String) tags (Map of String) throughput (Number) volume_id (String) volume_size (Number) volume_type (String)","title":"aws_instance (Data Source)"},{"location":"data-sources/instance/#aws_instance-data-source","text":"","title":"aws_instance (Data Source)"},{"location":"data-sources/instance/#schema","text":"","title":"Schema"},{"location":"data-sources/instance/#optional","text":"filter (Block Set) (see below for nested schema ) get_password_data (Boolean) get_user_data (Boolean) instance_id (String) instance_tags (Map of String) tags (Map of String)","title":"Optional"},{"location":"data-sources/instance/#read-only","text":"affinity (String) ami (String) arn (String) associate_public_ip_address (Boolean) availability_zone (String) credit_specification (List of Object) (see below for nested schema ) disable_api_termination (Boolean) ebs_block_device (Set of Object) (see below for nested schema ) ebs_optimized (Boolean) enclave_options (List of Object) (see below for nested schema ) ephemeral_block_device (List of Object) (see below for nested schema ) host_id (String) iam_instance_profile (String) id (String) The ID of this resource. instance_state (String) instance_type (String) ipv6_addresses (Set of String) key_name (String) maintenance_options (List of Object) (see below for nested schema ) metadata_options (List of Object) (see below for nested schema ) monitoring (Boolean) network_interface_id (String) outpost_arn (String) password_data (String) placement_group (String) placement_partition_number (Number) private_dns (String) private_ip (String) public_dns (String) public_ip (String) root_block_device (Set of Object) (see below for nested schema ) secondary_private_ips (Set of String) security_groups (Set of String) source_dest_check (Boolean) subnet_id (String) tenancy (String) user_data (String) user_data_base64 (String) vpc_security_group_ids (Set of String)","title":"Read-Only"},{"location":"data-sources/instance/#nested-schema-for-filter","text":"Required: name (String) values (Set of String)","title":"Nested Schema for filter"},{"location":"data-sources/instance/#nested-schema-for-credit_specification","text":"Read-Only: cpu_credits (String)","title":"Nested Schema for credit_specification"},{"location":"data-sources/instance/#nested-schema-for-ebs_block_device","text":"Read-Only: delete_on_termination (Boolean) device_name (String) encrypted (Boolean) iops (Number) kms_key_id (String) snapshot_id (String) tags (Map of String) throughput (Number) volume_id (String) volume_size (Number) volume_type (String)","title":"Nested Schema for ebs_block_device"},{"location":"data-sources/instance/#nested-schema-for-enclave_options","text":"Read-Only: enabled (Boolean)","title":"Nested Schema for enclave_options"},{"location":"data-sources/instance/#nested-schema-for-ephemeral_block_device","text":"Read-Only: device_name (String) no_device (Boolean) virtual_name (String)","title":"Nested Schema for ephemeral_block_device"},{"location":"data-sources/instance/#nested-schema-for-maintenance_options","text":"Read-Only: auto_recovery (String)","title":"Nested Schema for maintenance_options"},{"location":"data-sources/instance/#nested-schema-for-metadata_options","text":"Read-Only: http_endpoint (String) http_put_response_hop_limit (Number) http_tokens (String) instance_metadata_tags (String)","title":"Nested Schema for metadata_options"},{"location":"data-sources/instance/#nested-schema-for-root_block_device","text":"Read-Only: delete_on_termination (Boolean) device_name (String) encrypted (Boolean) iops (Number) kms_key_id (String) tags (Map of String) throughput (Number) volume_id (String) volume_size (Number) volume_type (String)","title":"Nested Schema for root_block_device"},{"location":"data-sources/instances/","text":"aws_instances (Data Source) # Schema # Optional # filter (Block Set) (see below for nested schema ) instance_state_names (Set of String) instance_tags (Map of String) Read-Only # id (String) The ID of this resource. ids (List of String) private_ips (List of String) public_ips (List of String) Nested Schema for filter # Required: name (String) values (List of String)","title":"aws_instances (Data Source)"},{"location":"data-sources/instances/#aws_instances-data-source","text":"","title":"aws_instances (Data Source)"},{"location":"data-sources/instances/#schema","text":"","title":"Schema"},{"location":"data-sources/instances/#optional","text":"filter (Block Set) (see below for nested schema ) instance_state_names (Set of String) instance_tags (Map of String)","title":"Optional"},{"location":"data-sources/instances/#read-only","text":"id (String) The ID of this resource. ids (List of String) private_ips (List of String) public_ips (List of String)","title":"Read-Only"},{"location":"data-sources/instances/#nested-schema-for-filter","text":"Required: name (String) values (List of String)","title":"Nested Schema for filter"},{"location":"data-sources/key_pair/","text":"aws_key_pair (Data Source) # Schema # Optional # filter (Block Set) (see below for nested schema ) key_name (String) key_pair_id (String) tags (Map of String) Read-Only # arn (String) fingerprint (String) id (String) The ID of this resource. Nested Schema for filter # Required: name (String) values (List of String)","title":"aws_key_pair (Data Source)"},{"location":"data-sources/key_pair/#aws_key_pair-data-source","text":"","title":"aws_key_pair (Data Source)"},{"location":"data-sources/key_pair/#schema","text":"","title":"Schema"},{"location":"data-sources/key_pair/#optional","text":"filter (Block Set) (see below for nested schema ) key_name (String) key_pair_id (String) tags (Map of String)","title":"Optional"},{"location":"data-sources/key_pair/#read-only","text":"arn (String) fingerprint (String) id (String) The ID of this resource.","title":"Read-Only"},{"location":"data-sources/key_pair/#nested-schema-for-filter","text":"Required: name (String) values (List of String)","title":"Nested Schema for filter"},{"location":"data-sources/launch_template/","text":"aws_launch_template (Data Source) # Schema # Optional # filter (Block Set) (see below for nested schema ) name (String) tags (Map of String) Read-Only # arn (String) block_device_mappings (List of Object) (see below for nested schema ) capacity_reservation_specification (List of Object) (see below for nested schema ) cpu_options (List of Object) (see below for nested schema ) credit_specification (List of Object) (see below for nested schema ) default_version (Number) description (String) disable_api_termination (Boolean) ebs_optimized (String) elastic_gpu_specifications (List of Object) (see below for nested schema ) elastic_inference_accelerator (List of Object) (see below for nested schema ) enclave_options (List of Object) (see below for nested schema ) hibernation_options (List of Object) (see below for nested schema ) iam_instance_profile (List of Object) (see below for nested schema ) id (String) The ID of this resource. image_id (String) instance_initiated_shutdown_behavior (String) instance_market_options (List of Object) (see below for nested schema ) instance_requirements (List of Object) (see below for nested schema ) instance_type (String) kernel_id (String) key_name (String) latest_version (Number) license_specification (List of Object) (see below for nested schema ) maintenance_options (List of Object) (see below for nested schema ) metadata_options (List of Object) (see below for nested schema ) monitoring (List of Object) (see below for nested schema ) network_interfaces (List of Object) (see below for nested schema ) placement (List of Object) (see below for nested schema ) private_dns_name_options (List of Object) (see below for nested schema ) ram_disk_id (String) security_group_names (Set of String) tag_specifications (List of Object) (see below for nested schema ) user_data (String) vpc_security_group_ids (Set of String) Nested Schema for filter # Required: name (String) values (List of String) Nested Schema for block_device_mappings # Read-Only: device_name (String) ebs (List of Object) (see below for nested schema ) no_device (String) virtual_name (String) Nested Schema for block_device_mappings.ebs # Read-Only: delete_on_termination (String) encrypted (String) iops (Number) kms_key_id (String) snapshot_id (String) throughput (Number) volume_size (Number) volume_type (String) Nested Schema for capacity_reservation_specification # Read-Only: capacity_reservation_preference (String) capacity_reservation_target (List of Object) (see below for nested schema ) Nested Schema for capacity_reservation_specification.capacity_reservation_target # Read-Only: capacity_reservation_id (String) capacity_reservation_resource_group_arn (String) Nested Schema for cpu_options # Read-Only: core_count (Number) threads_per_core (Number) Nested Schema for credit_specification # Read-Only: cpu_credits (String) Nested Schema for elastic_gpu_specifications # Read-Only: type (String) Nested Schema for elastic_inference_accelerator # Read-Only: type (String) Nested Schema for enclave_options # Read-Only: enabled (Boolean) Nested Schema for hibernation_options # Read-Only: configured (Boolean) Nested Schema for iam_instance_profile # Read-Only: arn (String) name (String) Nested Schema for instance_market_options # Read-Only: market_type (String) spot_options (List of Object) (see below for nested schema ) Nested Schema for instance_market_options.spot_options # Read-Only: block_duration_minutes (Number) instance_interruption_behavior (String) max_price (String) spot_instance_type (String) valid_until (String) Nested Schema for instance_requirements # Read-Only: accelerator_count (List of Object) (see below for nested schema ) accelerator_manufacturers (Set of String) accelerator_names (Set of String) accelerator_total_memory_mib (List of Object) (see below for nested schema ) accelerator_types (Set of String) bare_metal (String) baseline_ebs_bandwidth_mbps (List of Object) (see below for nested schema ) burstable_performance (String) cpu_manufacturers (Set of String) excluded_instance_types (Set of String) instance_generations (Set of String) local_storage (String) local_storage_types (Set of String) memory_gib_per_vcpu (List of Object) (see below for nested schema ) memory_mib (List of Object) (see below for nested schema ) network_interface_count (List of Object) (see below for nested schema ) on_demand_max_price_percentage_over_lowest_price (Number) require_hibernate_support (Boolean) spot_max_price_percentage_over_lowest_price (Number) total_local_storage_gb (List of Object) (see below for nested schema ) vcpu_count (List of Object) (see below for nested schema ) Nested Schema for instance_requirements.accelerator_count # Read-Only: max (Number) min (Number) Nested Schema for instance_requirements.accelerator_total_memory_mib # Read-Only: max (Number) min (Number) Nested Schema for instance_requirements.baseline_ebs_bandwidth_mbps # Read-Only: max (Number) min (Number) Nested Schema for instance_requirements.memory_gib_per_vcpu # Read-Only: max (Number) min (Number) Nested Schema for instance_requirements.memory_mib # Read-Only: max (Number) min (Number) Nested Schema for instance_requirements.network_interface_count # Read-Only: max (Number) min (Number) Nested Schema for instance_requirements.total_local_storage_gb # Read-Only: max (Number) min (Number) Nested Schema for instance_requirements.vcpu_count # Read-Only: max (Number) min (Number) Nested Schema for license_specification # Read-Only: license_configuration_arn (String) Nested Schema for maintenance_options # Read-Only: auto_recovery (String) Nested Schema for metadata_options # Read-Only: http_endpoint (String) http_protocol_ipv6 (String) http_put_response_hop_limit (Number) http_tokens (String) instance_metadata_tags (String) Nested Schema for monitoring # Read-Only: enabled (Boolean) Nested Schema for network_interfaces # Read-Only: associate_carrier_ip_address (String) associate_public_ip_address (String) delete_on_termination (String) description (String) device_index (Number) interface_type (String) ipv4_address_count (Number) ipv4_addresses (Set of String) ipv4_prefix_count (Number) ipv4_prefixes (Set of String) ipv6_address_count (Number) ipv6_addresses (Set of String) ipv6_prefix_count (Number) ipv6_prefixes (Set of String) network_card_index (Number) network_interface_id (String) private_ip_address (String) security_groups (Set of String) subnet_id (String) Nested Schema for placement # Read-Only: affinity (String) availability_zone (String) group_name (String) host_id (String) host_resource_group_arn (String) partition_number (Number) spread_domain (String) tenancy (String) Nested Schema for private_dns_name_options # Read-Only: enable_resource_name_dns_a_record (Boolean) enable_resource_name_dns_aaaa_record (Boolean) hostname_type (String) Nested Schema for tag_specifications # Read-Only: resource_type (String) tags (Map of String)","title":"aws_launch_template (Data Source)"},{"location":"data-sources/launch_template/#aws_launch_template-data-source","text":"","title":"aws_launch_template (Data Source)"},{"location":"data-sources/launch_template/#schema","text":"","title":"Schema"},{"location":"data-sources/launch_template/#optional","text":"filter (Block Set) (see below for nested schema ) name (String) tags (Map of String)","title":"Optional"},{"location":"data-sources/launch_template/#read-only","text":"arn (String) block_device_mappings (List of Object) (see below for nested schema ) capacity_reservation_specification (List of Object) (see below for nested schema ) cpu_options (List of Object) (see below for nested schema ) credit_specification (List of Object) (see below for nested schema ) default_version (Number) description (String) disable_api_termination (Boolean) ebs_optimized (String) elastic_gpu_specifications (List of Object) (see below for nested schema ) elastic_inference_accelerator (List of Object) (see below for nested schema ) enclave_options (List of Object) (see below for nested schema ) hibernation_options (List of Object) (see below for nested schema ) iam_instance_profile (List of Object) (see below for nested schema ) id (String) The ID of this resource. image_id (String) instance_initiated_shutdown_behavior (String) instance_market_options (List of Object) (see below for nested schema ) instance_requirements (List of Object) (see below for nested schema ) instance_type (String) kernel_id (String) key_name (String) latest_version (Number) license_specification (List of Object) (see below for nested schema ) maintenance_options (List of Object) (see below for nested schema ) metadata_options (List of Object) (see below for nested schema ) monitoring (List of Object) (see below for nested schema ) network_interfaces (List of Object) (see below for nested schema ) placement (List of Object) (see below for nested schema ) private_dns_name_options (List of Object) (see below for nested schema ) ram_disk_id (String) security_group_names (Set of String) tag_specifications (List of Object) (see below for nested schema ) user_data (String) vpc_security_group_ids (Set of String)","title":"Read-Only"},{"location":"data-sources/launch_template/#nested-schema-for-filter","text":"Required: name (String) values (List of String)","title":"Nested Schema for filter"},{"location":"data-sources/launch_template/#nested-schema-for-block_device_mappings","text":"Read-Only: device_name (String) ebs (List of Object) (see below for nested schema ) no_device (String) virtual_name (String)","title":"Nested Schema for block_device_mappings"},{"location":"data-sources/launch_template/#nested-schema-for-block_device_mappingsebs","text":"Read-Only: delete_on_termination (String) encrypted (String) iops (Number) kms_key_id (String) snapshot_id (String) throughput (Number) volume_size (Number) volume_type (String)","title":"Nested Schema for block_device_mappings.ebs"},{"location":"data-sources/launch_template/#nested-schema-for-capacity_reservation_specification","text":"Read-Only: capacity_reservation_preference (String) capacity_reservation_target (List of Object) (see below for nested schema )","title":"Nested Schema for capacity_reservation_specification"},{"location":"data-sources/launch_template/#nested-schema-for-capacity_reservation_specificationcapacity_reservation_target","text":"Read-Only: capacity_reservation_id (String) capacity_reservation_resource_group_arn (String)","title":"Nested Schema for capacity_reservation_specification.capacity_reservation_target"},{"location":"data-sources/launch_template/#nested-schema-for-cpu_options","text":"Read-Only: core_count (Number) threads_per_core (Number)","title":"Nested Schema for cpu_options"},{"location":"data-sources/launch_template/#nested-schema-for-credit_specification","text":"Read-Only: cpu_credits (String)","title":"Nested Schema for credit_specification"},{"location":"data-sources/launch_template/#nested-schema-for-elastic_gpu_specifications","text":"Read-Only: type (String)","title":"Nested Schema for elastic_gpu_specifications"},{"location":"data-sources/launch_template/#nested-schema-for-elastic_inference_accelerator","text":"Read-Only: type (String)","title":"Nested Schema for elastic_inference_accelerator"},{"location":"data-sources/launch_template/#nested-schema-for-enclave_options","text":"Read-Only: enabled (Boolean)","title":"Nested Schema for enclave_options"},{"location":"data-sources/launch_template/#nested-schema-for-hibernation_options","text":"Read-Only: configured (Boolean)","title":"Nested Schema for hibernation_options"},{"location":"data-sources/launch_template/#nested-schema-for-iam_instance_profile","text":"Read-Only: arn (String) name (String)","title":"Nested Schema for iam_instance_profile"},{"location":"data-sources/launch_template/#nested-schema-for-instance_market_options","text":"Read-Only: market_type (String) spot_options (List of Object) (see below for nested schema )","title":"Nested Schema for instance_market_options"},{"location":"data-sources/launch_template/#nested-schema-for-instance_market_optionsspot_options","text":"Read-Only: block_duration_minutes (Number) instance_interruption_behavior (String) max_price (String) spot_instance_type (String) valid_until (String)","title":"Nested Schema for instance_market_options.spot_options"},{"location":"data-sources/launch_template/#nested-schema-for-instance_requirements","text":"Read-Only: accelerator_count (List of Object) (see below for nested schema ) accelerator_manufacturers (Set of String) accelerator_names (Set of String) accelerator_total_memory_mib (List of Object) (see below for nested schema ) accelerator_types (Set of String) bare_metal (String) baseline_ebs_bandwidth_mbps (List of Object) (see below for nested schema ) burstable_performance (String) cpu_manufacturers (Set of String) excluded_instance_types (Set of String) instance_generations (Set of String) local_storage (String) local_storage_types (Set of String) memory_gib_per_vcpu (List of Object) (see below for nested schema ) memory_mib (List of Object) (see below for nested schema ) network_interface_count (List of Object) (see below for nested schema ) on_demand_max_price_percentage_over_lowest_price (Number) require_hibernate_support (Boolean) spot_max_price_percentage_over_lowest_price (Number) total_local_storage_gb (List of Object) (see below for nested schema ) vcpu_count (List of Object) (see below for nested schema )","title":"Nested Schema for instance_requirements"},{"location":"data-sources/launch_template/#nested-schema-for-instance_requirementsaccelerator_count","text":"Read-Only: max (Number) min (Number)","title":"Nested Schema for instance_requirements.accelerator_count"},{"location":"data-sources/launch_template/#nested-schema-for-instance_requirementsaccelerator_total_memory_mib","text":"Read-Only: max (Number) min (Number)","title":"Nested Schema for instance_requirements.accelerator_total_memory_mib"},{"location":"data-sources/launch_template/#nested-schema-for-instance_requirementsbaseline_ebs_bandwidth_mbps","text":"Read-Only: max (Number) min (Number)","title":"Nested Schema for instance_requirements.baseline_ebs_bandwidth_mbps"},{"location":"data-sources/launch_template/#nested-schema-for-instance_requirementsmemory_gib_per_vcpu","text":"Read-Only: max (Number) min (Number)","title":"Nested Schema for instance_requirements.memory_gib_per_vcpu"},{"location":"data-sources/launch_template/#nested-schema-for-instance_requirementsmemory_mib","text":"Read-Only: max (Number) min (Number)","title":"Nested Schema for instance_requirements.memory_mib"},{"location":"data-sources/launch_template/#nested-schema-for-instance_requirementsnetwork_interface_count","text":"Read-Only: max (Number) min (Number)","title":"Nested Schema for instance_requirements.network_interface_count"},{"location":"data-sources/launch_template/#nested-schema-for-instance_requirementstotal_local_storage_gb","text":"Read-Only: max (Number) min (Number)","title":"Nested Schema for instance_requirements.total_local_storage_gb"},{"location":"data-sources/launch_template/#nested-schema-for-instance_requirementsvcpu_count","text":"Read-Only: max (Number) min (Number)","title":"Nested Schema for instance_requirements.vcpu_count"},{"location":"data-sources/launch_template/#nested-schema-for-license_specification","text":"Read-Only: license_configuration_arn (String)","title":"Nested Schema for license_specification"},{"location":"data-sources/launch_template/#nested-schema-for-maintenance_options","text":"Read-Only: auto_recovery (String)","title":"Nested Schema for maintenance_options"},{"location":"data-sources/launch_template/#nested-schema-for-metadata_options","text":"Read-Only: http_endpoint (String) http_protocol_ipv6 (String) http_put_response_hop_limit (Number) http_tokens (String) instance_metadata_tags (String)","title":"Nested Schema for metadata_options"},{"location":"data-sources/launch_template/#nested-schema-for-monitoring","text":"Read-Only: enabled (Boolean)","title":"Nested Schema for monitoring"},{"location":"data-sources/launch_template/#nested-schema-for-network_interfaces","text":"Read-Only: associate_carrier_ip_address (String) associate_public_ip_address (String) delete_on_termination (String) description (String) device_index (Number) interface_type (String) ipv4_address_count (Number) ipv4_addresses (Set of String) ipv4_prefix_count (Number) ipv4_prefixes (Set of String) ipv6_address_count (Number) ipv6_addresses (Set of String) ipv6_prefix_count (Number) ipv6_prefixes (Set of String) network_card_index (Number) network_interface_id (String) private_ip_address (String) security_groups (Set of String) subnet_id (String)","title":"Nested Schema for network_interfaces"},{"location":"data-sources/launch_template/#nested-schema-for-placement","text":"Read-Only: affinity (String) availability_zone (String) group_name (String) host_id (String) host_resource_group_arn (String) partition_number (Number) spread_domain (String) tenancy (String)","title":"Nested Schema for placement"},{"location":"data-sources/launch_template/#nested-schema-for-private_dns_name_options","text":"Read-Only: enable_resource_name_dns_a_record (Boolean) enable_resource_name_dns_aaaa_record (Boolean) hostname_type (String)","title":"Nested Schema for private_dns_name_options"},{"location":"data-sources/launch_template/#nested-schema-for-tag_specifications","text":"Read-Only: resource_type (String) tags (Map of String)","title":"Nested Schema for tag_specifications"},{"location":"data-sources/lb/","text":"aws_lb (Data Source) # Schema # Optional # arn (String) name (String) tags (Map of String) Read-Only # access_logs (List of Object) (see below for nested schema ) arn_suffix (String) customer_owned_ipv4_pool (String) desync_mitigation_mode (String) dns_name (String) drop_invalid_header_fields (Boolean) enable_deletion_protection (Boolean) enable_http2 (Boolean) enable_waf_fail_open (Boolean) id (String) The ID of this resource. idle_timeout (Number) internal (Boolean) ip_address_type (String) load_balancer_type (String) security_groups (Set of String) subnet_mapping (Set of Object) (see below for nested schema ) subnets (Set of String) vpc_id (String) zone_id (String) Nested Schema for access_logs # Read-Only: bucket (String) enabled (Boolean) prefix (String) Nested Schema for subnet_mapping # Read-Only: allocation_id (String) ipv6_address (String) outpost_id (String) private_ipv4_address (String) subnet_id (String)","title":"aws_lb (Data Source)"},{"location":"data-sources/lb/#aws_lb-data-source","text":"","title":"aws_lb (Data Source)"},{"location":"data-sources/lb/#schema","text":"","title":"Schema"},{"location":"data-sources/lb/#optional","text":"arn (String) name (String) tags (Map of String)","title":"Optional"},{"location":"data-sources/lb/#read-only","text":"access_logs (List of Object) (see below for nested schema ) arn_suffix (String) customer_owned_ipv4_pool (String) desync_mitigation_mode (String) dns_name (String) drop_invalid_header_fields (Boolean) enable_deletion_protection (Boolean) enable_http2 (Boolean) enable_waf_fail_open (Boolean) id (String) The ID of this resource. idle_timeout (Number) internal (Boolean) ip_address_type (String) load_balancer_type (String) security_groups (Set of String) subnet_mapping (Set of Object) (see below for nested schema ) subnets (Set of String) vpc_id (String) zone_id (String)","title":"Read-Only"},{"location":"data-sources/lb/#nested-schema-for-access_logs","text":"Read-Only: bucket (String) enabled (Boolean) prefix (String)","title":"Nested Schema for access_logs"},{"location":"data-sources/lb/#nested-schema-for-subnet_mapping","text":"Read-Only: allocation_id (String) ipv6_address (String) outpost_id (String) private_ipv4_address (String) subnet_id (String)","title":"Nested Schema for subnet_mapping"},{"location":"data-sources/lb_listener/","text":"aws_lb_listener (Data Source) # Schema # Optional # arn (String) load_balancer_arn (String) port (Number) tags (Map of String) Read-Only # alpn_policy (String) certificate_arn (String) default_action (List of Object) (see below for nested schema ) id (String) The ID of this resource. protocol (String) ssl_policy (String) Nested Schema for default_action # Read-Only: authenticate_cognito (List of Object) (see below for nested schema ) authenticate_oidc (List of Object) (see below for nested schema ) fixed_response (List of Object) (see below for nested schema ) forward (List of Object) (see below for nested schema ) order (Number) redirect (List of Object) (see below for nested schema ) target_group_arn (String) type (String) Nested Schema for default_action.authenticate_cognito # Read-Only: authentication_request_extra_params (Map of String) on_unauthenticated_request (String) scope (String) session_cookie_name (String) session_timeout (Number) user_pool_arn (String) user_pool_client_id (String) user_pool_domain (String) Nested Schema for default_action.authenticate_oidc # Read-Only: authentication_request_extra_params (Map of String) authorization_endpoint (String) client_id (String) client_secret (String) issuer (String) on_unauthenticated_request (String) scope (String) session_cookie_name (String) session_timeout (Number) token_endpoint (String) user_info_endpoint (String) Nested Schema for default_action.fixed_response # Read-Only: content_type (String) message_body (String) status_code (String) Nested Schema for default_action.forward # Read-Only: stickiness (List of Object) (see below for nested schema ) target_group (Set of Object) (see below for nested schema ) Nested Schema for default_action.forward.stickiness # Read-Only: duration (Number) enabled (Boolean) Nested Schema for default_action.forward.target_group # Read-Only: arn (String) weight (Number) Nested Schema for default_action.redirect # Read-Only: host (String) path (String) port (String) protocol (String) query (String) status_code (String)","title":"aws_lb_listener (Data Source)"},{"location":"data-sources/lb_listener/#aws_lb_listener-data-source","text":"","title":"aws_lb_listener (Data Source)"},{"location":"data-sources/lb_listener/#schema","text":"","title":"Schema"},{"location":"data-sources/lb_listener/#optional","text":"arn (String) load_balancer_arn (String) port (Number) tags (Map of String)","title":"Optional"},{"location":"data-sources/lb_listener/#read-only","text":"alpn_policy (String) certificate_arn (String) default_action (List of Object) (see below for nested schema ) id (String) The ID of this resource. protocol (String) ssl_policy (String)","title":"Read-Only"},{"location":"data-sources/lb_listener/#nested-schema-for-default_action","text":"Read-Only: authenticate_cognito (List of Object) (see below for nested schema ) authenticate_oidc (List of Object) (see below for nested schema ) fixed_response (List of Object) (see below for nested schema ) forward (List of Object) (see below for nested schema ) order (Number) redirect (List of Object) (see below for nested schema ) target_group_arn (String) type (String)","title":"Nested Schema for default_action"},{"location":"data-sources/lb_listener/#nested-schema-for-default_actionauthenticate_cognito","text":"Read-Only: authentication_request_extra_params (Map of String) on_unauthenticated_request (String) scope (String) session_cookie_name (String) session_timeout (Number) user_pool_arn (String) user_pool_client_id (String) user_pool_domain (String)","title":"Nested Schema for default_action.authenticate_cognito"},{"location":"data-sources/lb_listener/#nested-schema-for-default_actionauthenticate_oidc","text":"Read-Only: authentication_request_extra_params (Map of String) authorization_endpoint (String) client_id (String) client_secret (String) issuer (String) on_unauthenticated_request (String) scope (String) session_cookie_name (String) session_timeout (Number) token_endpoint (String) user_info_endpoint (String)","title":"Nested Schema for default_action.authenticate_oidc"},{"location":"data-sources/lb_listener/#nested-schema-for-default_actionfixed_response","text":"Read-Only: content_type (String) message_body (String) status_code (String)","title":"Nested Schema for default_action.fixed_response"},{"location":"data-sources/lb_listener/#nested-schema-for-default_actionforward","text":"Read-Only: stickiness (List of Object) (see below for nested schema ) target_group (Set of Object) (see below for nested schema )","title":"Nested Schema for default_action.forward"},{"location":"data-sources/lb_listener/#nested-schema-for-default_actionforwardstickiness","text":"Read-Only: duration (Number) enabled (Boolean)","title":"Nested Schema for default_action.forward.stickiness"},{"location":"data-sources/lb_listener/#nested-schema-for-default_actionforwardtarget_group","text":"Read-Only: arn (String) weight (Number)","title":"Nested Schema for default_action.forward.target_group"},{"location":"data-sources/lb_listener/#nested-schema-for-default_actionredirect","text":"Read-Only: host (String) path (String) port (String) protocol (String) query (String) status_code (String)","title":"Nested Schema for default_action.redirect"},{"location":"data-sources/lb_target_group/","text":"aws_lb_target_group (Data Source) # Schema # Optional # arn (String) name (String) tags (Map of String) Read-Only # arn_suffix (String) connection_termination (Boolean) deregistration_delay (Number) health_check (List of Object) (see below for nested schema ) id (String) The ID of this resource. lambda_multi_value_headers_enabled (Boolean) load_balancing_algorithm_type (String) port (Number) preserve_client_ip (String) protocol (String) protocol_version (String) proxy_protocol_v2 (Boolean) slow_start (Number) stickiness (List of Object) (see below for nested schema ) target_type (String) vpc_id (String) Nested Schema for health_check # Read-Only: enabled (Boolean) healthy_threshold (Number) interval (Number) matcher (String) path (String) port (String) protocol (String) timeout (Number) unhealthy_threshold (Number) Nested Schema for stickiness # Read-Only: cookie_duration (Number) cookie_name (String) enabled (Boolean) type (String)","title":"aws_lb_target_group (Data Source)"},{"location":"data-sources/lb_target_group/#aws_lb_target_group-data-source","text":"","title":"aws_lb_target_group (Data Source)"},{"location":"data-sources/lb_target_group/#schema","text":"","title":"Schema"},{"location":"data-sources/lb_target_group/#optional","text":"arn (String) name (String) tags (Map of String)","title":"Optional"},{"location":"data-sources/lb_target_group/#read-only","text":"arn_suffix (String) connection_termination (Boolean) deregistration_delay (Number) health_check (List of Object) (see below for nested schema ) id (String) The ID of this resource. lambda_multi_value_headers_enabled (Boolean) load_balancing_algorithm_type (String) port (Number) preserve_client_ip (String) protocol (String) protocol_version (String) proxy_protocol_v2 (Boolean) slow_start (Number) stickiness (List of Object) (see below for nested schema ) target_type (String) vpc_id (String)","title":"Read-Only"},{"location":"data-sources/lb_target_group/#nested-schema-for-health_check","text":"Read-Only: enabled (Boolean) healthy_threshold (Number) interval (Number) matcher (String) path (String) port (String) protocol (String) timeout (Number) unhealthy_threshold (Number)","title":"Nested Schema for health_check"},{"location":"data-sources/lb_target_group/#nested-schema-for-stickiness","text":"Read-Only: cookie_duration (Number) cookie_name (String) enabled (Boolean) type (String)","title":"Nested Schema for stickiness"},{"location":"data-sources/network_acls/","text":"aws_network_acls (Data Source) # Schema # Optional # filter (Block Set) (see below for nested schema ) tags (Map of String) vpc_id (String) Read-Only # id (String) The ID of this resource. ids (List of String) Nested Schema for filter # Required: name (String) values (List of String)","title":"aws_network_acls (Data Source)"},{"location":"data-sources/network_acls/#aws_network_acls-data-source","text":"","title":"aws_network_acls (Data Source)"},{"location":"data-sources/network_acls/#schema","text":"","title":"Schema"},{"location":"data-sources/network_acls/#optional","text":"filter (Block Set) (see below for nested schema ) tags (Map of String) vpc_id (String)","title":"Optional"},{"location":"data-sources/network_acls/#read-only","text":"id (String) The ID of this resource. ids (List of String)","title":"Read-Only"},{"location":"data-sources/network_acls/#nested-schema-for-filter","text":"Required: name (String) values (List of String)","title":"Nested Schema for filter"},{"location":"data-sources/network_interface/","text":"aws_network_interface (Data Source) # Schema # Optional # filter (Block Set) (see below for nested schema ) tags (Map of String) Read-Only # arn (String) association (List of Object) (see below for nested schema ) attachment (List of Object) (see below for nested schema ) availability_zone (String) description (String) id (String) The ID of this resource. interface_type (String) ipv6_addresses (Set of String) mac_address (String) outpost_arn (String) owner_id (String) private_dns_name (String) private_ip (String) private_ips (List of String) requester_id (String) security_groups (Set of String) subnet_id (String) vpc_id (String) Nested Schema for filter # Required: name (String) values (List of String) Nested Schema for association # Read-Only: allocation_id (String) association_id (String) carrier_ip (String) customer_owned_ip (String) ip_owner_id (String) public_dns_name (String) public_ip (String) Nested Schema for attachment # Read-Only: attachment_id (String) device_index (Number) instance_id (String) instance_owner_id (String)","title":"aws_network_interface (Data Source)"},{"location":"data-sources/network_interface/#aws_network_interface-data-source","text":"","title":"aws_network_interface (Data Source)"},{"location":"data-sources/network_interface/#schema","text":"","title":"Schema"},{"location":"data-sources/network_interface/#optional","text":"filter (Block Set) (see below for nested schema ) tags (Map of String)","title":"Optional"},{"location":"data-sources/network_interface/#read-only","text":"arn (String) association (List of Object) (see below for nested schema ) attachment (List of Object) (see below for nested schema ) availability_zone (String) description (String) id (String) The ID of this resource. interface_type (String) ipv6_addresses (Set of String) mac_address (String) outpost_arn (String) owner_id (String) private_dns_name (String) private_ip (String) private_ips (List of String) requester_id (String) security_groups (Set of String) subnet_id (String) vpc_id (String)","title":"Read-Only"},{"location":"data-sources/network_interface/#nested-schema-for-filter","text":"Required: name (String) values (List of String)","title":"Nested Schema for filter"},{"location":"data-sources/network_interface/#nested-schema-for-association","text":"Read-Only: allocation_id (String) association_id (String) carrier_ip (String) customer_owned_ip (String) ip_owner_id (String) public_dns_name (String) public_ip (String)","title":"Nested Schema for association"},{"location":"data-sources/network_interface/#nested-schema-for-attachment","text":"Read-Only: attachment_id (String) device_index (Number) instance_id (String) instance_owner_id (String)","title":"Nested Schema for attachment"},{"location":"data-sources/network_interfaces/","text":"aws_network_interfaces (Data Source) # Schema # Optional # filter (Block Set) (see below for nested schema ) tags (Map of String) Read-Only # id (String) The ID of this resource. ids (List of String) Nested Schema for filter # Required: name (String) values (List of String)","title":"aws_network_interfaces (Data Source)"},{"location":"data-sources/network_interfaces/#aws_network_interfaces-data-source","text":"","title":"aws_network_interfaces (Data Source)"},{"location":"data-sources/network_interfaces/#schema","text":"","title":"Schema"},{"location":"data-sources/network_interfaces/#optional","text":"filter (Block Set) (see below for nested schema ) tags (Map of String)","title":"Optional"},{"location":"data-sources/network_interfaces/#read-only","text":"id (String) The ID of this resource. ids (List of String)","title":"Read-Only"},{"location":"data-sources/network_interfaces/#nested-schema-for-filter","text":"Required: name (String) values (List of String)","title":"Nested Schema for filter"},{"location":"data-sources/paas_backup/","text":"aws_paas_backup (Data Source) # Schema # Optional # age_days (Number) database_name (String) ready_only (Boolean) service_class (String) service_id (String) service_type (String) Read-Only # databases (List of Object) (see below for nested schema ) id (String) The ID of this resource. protected (Boolean) service_deleted (Boolean) service_name (String) status (String) time (String) Nested Schema for databases # Read-Only: backup_enabled (Boolean) id (String) location (String) logfile (String) name (String) size (Number) status (String)","title":"aws_paas_backup (Data Source)"},{"location":"data-sources/paas_backup/#aws_paas_backup-data-source","text":"","title":"aws_paas_backup (Data Source)"},{"location":"data-sources/paas_backup/#schema","text":"","title":"Schema"},{"location":"data-sources/paas_backup/#optional","text":"age_days (Number) database_name (String) ready_only (Boolean) service_class (String) service_id (String) service_type (String)","title":"Optional"},{"location":"data-sources/paas_backup/#read-only","text":"databases (List of Object) (see below for nested schema ) id (String) The ID of this resource. protected (Boolean) service_deleted (Boolean) service_name (String) status (String) time (String)","title":"Read-Only"},{"location":"data-sources/paas_backup/#nested-schema-for-databases","text":"Read-Only: backup_enabled (Boolean) id (String) location (String) logfile (String) name (String) size (Number) status (String)","title":"Nested Schema for databases"},{"location":"data-sources/paas_backup_users/","text":"aws_paas_backup_users (Data Source) # Schema # Optional # active_only (Boolean) Read-Only # id (String) The ID of this resource. users (List of Object) (see below for nested schema ) Nested Schema for users # Read-Only: email (String) enabled (Boolean) id (String) login (String) name (String)","title":"aws_paas_backup_users (Data Source)"},{"location":"data-sources/paas_backup_users/#aws_paas_backup_users-data-source","text":"","title":"aws_paas_backup_users (Data Source)"},{"location":"data-sources/paas_backup_users/#schema","text":"","title":"Schema"},{"location":"data-sources/paas_backup_users/#optional","text":"active_only (Boolean)","title":"Optional"},{"location":"data-sources/paas_backup_users/#read-only","text":"id (String) The ID of this resource. users (List of Object) (see below for nested schema )","title":"Read-Only"},{"location":"data-sources/paas_backup_users/#nested-schema-for-users","text":"Read-Only: email (String) enabled (Boolean) id (String) login (String) name (String)","title":"Nested Schema for users"},{"location":"data-sources/paas_backups/","text":"aws_paas_backups (Data Source) # Schema # Optional # service_class (String) service_id (String) service_type (String) Read-Only # backup_ids (Set of String) id (String) The ID of this resource.","title":"aws_paas_backups (Data Source)"},{"location":"data-sources/paas_backups/#aws_paas_backups-data-source","text":"","title":"aws_paas_backups (Data Source)"},{"location":"data-sources/paas_backups/#schema","text":"","title":"Schema"},{"location":"data-sources/paas_backups/#optional","text":"service_class (String) service_id (String) service_type (String)","title":"Optional"},{"location":"data-sources/paas_backups/#read-only","text":"backup_ids (Set of String) id (String) The ID of this resource.","title":"Read-Only"},{"location":"data-sources/paas_service/","text":"aws_paas_service (Data Source) # Schema # Read-Only # auto_created_security_group_ids (Set of String) backup_settings (List of Object) (see below for nested schema ) data_volume (List of Object) (see below for nested schema ) elasticsearch (List of Object) (see below for nested schema ) endpoints (Set of String) error_code (String) error_description (String) high_availability (Boolean) id (String) The ID of this resource. instance_type (String) instances (Set of Object) (see below for nested schema ) memcached (List of Object) (see below for nested schema ) mongodb (List of Object) (see below for nested schema ) mysql (List of Object) (see below for nested schema ) name (String) network_interface_ids (Set of String) pgsql (List of Object) (see below for nested schema ) rabbitmq (List of Object) (see below for nested schema ) redis (List of Object) (see below for nested schema ) root_volume (List of Object) (see below for nested schema ) security_group_ids (Set of String) service_class (String) service_type (String) ssh_key_name (String) status (String) subnet_ids (Set of String) supported_features (Set of String) total_cpu_count (Number) total_memory (Number) vpc_id (String) Nested Schema for backup_settings # Read-Only: bucket_name (String) enabled (Boolean) expiration_days (Number) notification_email (String) start_time (String) user_id (String) user_login (String) Nested Schema for data_volume # Read-Only: iops (Number) size (Number) type (String) Nested Schema for elasticsearch # Read-Only: class (String) kibana (Boolean) logging (List of Object) (see below for nested schema ) monitoring (List of Object) (see below for nested schema ) options (Map of String) password (String) version (String) Nested Schema for elasticsearch.logging # Read-Only: log_to (String) logging_tags (Set of String) Nested Schema for elasticsearch.monitoring # Read-Only: monitor_by (String) monitoring_labels (Map of String) Nested Schema for instances # Read-Only: endpoint (String) index (Number) instance_id (String) interface_id (String) name (String) private_ip (String) role (String) status (String) Nested Schema for memcached # Read-Only: class (String) logging (List of Object) (see below for nested schema ) monitoring (List of Object) (see below for nested schema ) Nested Schema for memcached.logging # Read-Only: log_to (String) logging_tags (Set of String) Nested Schema for memcached.monitoring # Read-Only: monitor_by (String) monitoring_labels (Map of String) Nested Schema for mongodb # Read-Only: class (String) database (Set of Object) (see below for nested schema ) journal_commit_interval (Number) logging (List of Object) (see below for nested schema ) maxconns (Number) monitoring (List of Object) (see below for nested schema ) options (Map of String) profile (String) quiet (Boolean) slowms (Number) storage_engine_cache_size (Number) user (Set of Object) (see below for nested schema ) verbositylevel (String) version (String) Nested Schema for mongodb.database # Read-Only: id (String) name (String) user (Set of Object) (see below for nested schema ) Nested Schema for mongodb.database.user # Read-Only: id (String) name (String) roles (Set of String) Nested Schema for mongodb.logging # Read-Only: log_to (String) logging_tags (Set of String) Nested Schema for mongodb.monitoring # Read-Only: monitor_by (String) monitoring_labels (Map of String) Nested Schema for mongodb.user # Read-Only: id (String) name (String) password (String) Nested Schema for mysql # Read-Only: class (String) connect_timeout (Number) database (Set of Object) (see below for nested schema ) galera_options (Map of String) gcache_size (Number) gcs_fc_factor (Number) gcs_fc_limit (Number) gcs_fc_master_slave (String) gcs_fc_single_primary (String) innodb_buffer_pool_instances (Number) innodb_buffer_pool_size (String) innodb_change_buffering (String) innodb_flush_log_at_trx_commit (Number) innodb_io_capacity (String) innodb_io_capacity_max (String) innodb_log_file_size (String) innodb_log_files_in_group (Number) innodb_purge_threads (Number) innodb_strict_mode (String) innodb_sync_array_size (Number) innodb_thread_concurrency (Number) logging (List of Object) (see below for nested schema ) max_allowed_packet (Number) max_connect_errors (String) max_connections (Number) max_heap_table_size (String) monitoring (List of Object) (see below for nested schema ) options (Map of String) pxc_strict_mode (String) table_open_cache (Number) thread_cache_size (Number) tmp_table_size (String) transaction_isolation (String) user (Set of Object) (see below for nested schema ) vendor (String) version (String) wait_timeout (Number) Nested Schema for mysql.database # Read-Only: backup_db_name (String) backup_enabled (Boolean) backup_id (String) charset (String) collate (String) id (String) name (String) user (Set of Object) (see below for nested schema ) Nested Schema for mysql.database.user # Read-Only: id (String) name (String) options (Set of String) privileges (Set of String) Nested Schema for mysql.logging # Read-Only: log_to (String) logging_tags (Set of String) Nested Schema for mysql.monitoring # Read-Only: monitor_by (String) monitoring_labels (Map of String) Nested Schema for mysql.user # Read-Only: host (String) id (String) name (String) password (String) Nested Schema for pgsql # Read-Only: autovacuum (String) autovacuum_analyze_scale_factor (Number) autovacuum_max_workers (Number) autovacuum_vacuum_cost_delay (Number) autovacuum_vacuum_cost_limit (Number) autovacuum_vacuum_scale_factor (Number) class (String) database (Set of Object) (see below for nested schema ) effective_cache_size (Number) effective_io_concurrency (Number) logging (List of Object) (see below for nested schema ) maintenance_work_mem (String) max_connections (Number) max_parallel_maintenance_workers (Number) max_parallel_workers (Number) max_parallel_workers_per_gather (Number) max_wal_size (String) max_worker_processes (Number) min_wal_size (String) monitoring (List of Object) (see below for nested schema ) options (Map of String) replication_mode (String) shared_buffers (Number) user (Set of Object) (see below for nested schema ) version (String) wal_buffers (Number) wal_keep_segments (Number) work_mem (String) Nested Schema for pgsql.database # Read-Only: backup_db_name (String) backup_enabled (Boolean) backup_id (String) encoding (String) extensions (Set of String) id (String) locale (String) name (String) owner (String) user (Set of Object) (see below for nested schema ) Nested Schema for pgsql.database.user # Read-Only: id (String) name (String) Nested Schema for pgsql.logging # Read-Only: log_to (String) logging_tags (Set of String) Nested Schema for pgsql.monitoring # Read-Only: monitor_by (String) monitoring_labels (Map of String) Nested Schema for pgsql.user # Read-Only: id (String) name (String) password (String) Nested Schema for rabbitmq # Read-Only: class (String) logging (List of Object) (see below for nested schema ) monitoring (List of Object) (see below for nested schema ) options (Map of String) password (String) version (String) Nested Schema for rabbitmq.logging # Read-Only: log_to (String) logging_tags (Set of String) Nested Schema for rabbitmq.monitoring # Read-Only: monitor_by (String) monitoring_labels (Map of String) Nested Schema for redis # Read-Only: class (String) cluster_type (String) databases (Number) logging (List of Object) (see below for nested schema ) maxmemory_policy (String) monitoring (List of Object) (see below for nested schema ) options (Map of String) password (String) persistence_aof (Boolean) persistence_rdb (Boolean) tcp_backlog (Number) tcp_keepalive (Number) timeout (Number) version (String) Nested Schema for redis.logging # Read-Only: log_to (String) logging_tags (Set of String) Nested Schema for redis.monitoring # Read-Only: monitor_by (String) monitoring_labels (Map of String) Nested Schema for root_volume # Read-Only: iops (Number) size (Number) type (String)","title":"aws_paas_service (Data Source)"},{"location":"data-sources/paas_service/#aws_paas_service-data-source","text":"","title":"aws_paas_service (Data Source)"},{"location":"data-sources/paas_service/#schema","text":"","title":"Schema"},{"location":"data-sources/paas_service/#read-only","text":"auto_created_security_group_ids (Set of String) backup_settings (List of Object) (see below for nested schema ) data_volume (List of Object) (see below for nested schema ) elasticsearch (List of Object) (see below for nested schema ) endpoints (Set of String) error_code (String) error_description (String) high_availability (Boolean) id (String) The ID of this resource. instance_type (String) instances (Set of Object) (see below for nested schema ) memcached (List of Object) (see below for nested schema ) mongodb (List of Object) (see below for nested schema ) mysql (List of Object) (see below for nested schema ) name (String) network_interface_ids (Set of String) pgsql (List of Object) (see below for nested schema ) rabbitmq (List of Object) (see below for nested schema ) redis (List of Object) (see below for nested schema ) root_volume (List of Object) (see below for nested schema ) security_group_ids (Set of String) service_class (String) service_type (String) ssh_key_name (String) status (String) subnet_ids (Set of String) supported_features (Set of String) total_cpu_count (Number) total_memory (Number) vpc_id (String)","title":"Read-Only"},{"location":"data-sources/paas_service/#nested-schema-for-backup_settings","text":"Read-Only: bucket_name (String) enabled (Boolean) expiration_days (Number) notification_email (String) start_time (String) user_id (String) user_login (String)","title":"Nested Schema for backup_settings"},{"location":"data-sources/paas_service/#nested-schema-for-data_volume","text":"Read-Only: iops (Number) size (Number) type (String)","title":"Nested Schema for data_volume"},{"location":"data-sources/paas_service/#nested-schema-for-elasticsearch","text":"Read-Only: class (String) kibana (Boolean) logging (List of Object) (see below for nested schema ) monitoring (List of Object) (see below for nested schema ) options (Map of String) password (String) version (String)","title":"Nested Schema for elasticsearch"},{"location":"data-sources/paas_service/#nested-schema-for-elasticsearchlogging","text":"Read-Only: log_to (String) logging_tags (Set of String)","title":"Nested Schema for elasticsearch.logging"},{"location":"data-sources/paas_service/#nested-schema-for-elasticsearchmonitoring","text":"Read-Only: monitor_by (String) monitoring_labels (Map of String)","title":"Nested Schema for elasticsearch.monitoring"},{"location":"data-sources/paas_service/#nested-schema-for-instances","text":"Read-Only: endpoint (String) index (Number) instance_id (String) interface_id (String) name (String) private_ip (String) role (String) status (String)","title":"Nested Schema for instances"},{"location":"data-sources/paas_service/#nested-schema-for-memcached","text":"Read-Only: class (String) logging (List of Object) (see below for nested schema ) monitoring (List of Object) (see below for nested schema )","title":"Nested Schema for memcached"},{"location":"data-sources/paas_service/#nested-schema-for-memcachedlogging","text":"Read-Only: log_to (String) logging_tags (Set of String)","title":"Nested Schema for memcached.logging"},{"location":"data-sources/paas_service/#nested-schema-for-memcachedmonitoring","text":"Read-Only: monitor_by (String) monitoring_labels (Map of String)","title":"Nested Schema for memcached.monitoring"},{"location":"data-sources/paas_service/#nested-schema-for-mongodb","text":"Read-Only: class (String) database (Set of Object) (see below for nested schema ) journal_commit_interval (Number) logging (List of Object) (see below for nested schema ) maxconns (Number) monitoring (List of Object) (see below for nested schema ) options (Map of String) profile (String) quiet (Boolean) slowms (Number) storage_engine_cache_size (Number) user (Set of Object) (see below for nested schema ) verbositylevel (String) version (String)","title":"Nested Schema for mongodb"},{"location":"data-sources/paas_service/#nested-schema-for-mongodbdatabase","text":"Read-Only: id (String) name (String) user (Set of Object) (see below for nested schema )","title":"Nested Schema for mongodb.database"},{"location":"data-sources/paas_service/#nested-schema-for-mongodbdatabaseuser","text":"Read-Only: id (String) name (String) roles (Set of String)","title":"Nested Schema for mongodb.database.user"},{"location":"data-sources/paas_service/#nested-schema-for-mongodblogging","text":"Read-Only: log_to (String) logging_tags (Set of String)","title":"Nested Schema for mongodb.logging"},{"location":"data-sources/paas_service/#nested-schema-for-mongodbmonitoring","text":"Read-Only: monitor_by (String) monitoring_labels (Map of String)","title":"Nested Schema for mongodb.monitoring"},{"location":"data-sources/paas_service/#nested-schema-for-mongodbuser","text":"Read-Only: id (String) name (String) password (String)","title":"Nested Schema for mongodb.user"},{"location":"data-sources/paas_service/#nested-schema-for-mysql","text":"Read-Only: class (String) connect_timeout (Number) database (Set of Object) (see below for nested schema ) galera_options (Map of String) gcache_size (Number) gcs_fc_factor (Number) gcs_fc_limit (Number) gcs_fc_master_slave (String) gcs_fc_single_primary (String) innodb_buffer_pool_instances (Number) innodb_buffer_pool_size (String) innodb_change_buffering (String) innodb_flush_log_at_trx_commit (Number) innodb_io_capacity (String) innodb_io_capacity_max (String) innodb_log_file_size (String) innodb_log_files_in_group (Number) innodb_purge_threads (Number) innodb_strict_mode (String) innodb_sync_array_size (Number) innodb_thread_concurrency (Number) logging (List of Object) (see below for nested schema ) max_allowed_packet (Number) max_connect_errors (String) max_connections (Number) max_heap_table_size (String) monitoring (List of Object) (see below for nested schema ) options (Map of String) pxc_strict_mode (String) table_open_cache (Number) thread_cache_size (Number) tmp_table_size (String) transaction_isolation (String) user (Set of Object) (see below for nested schema ) vendor (String) version (String) wait_timeout (Number)","title":"Nested Schema for mysql"},{"location":"data-sources/paas_service/#nested-schema-for-mysqldatabase","text":"Read-Only: backup_db_name (String) backup_enabled (Boolean) backup_id (String) charset (String) collate (String) id (String) name (String) user (Set of Object) (see below for nested schema )","title":"Nested Schema for mysql.database"},{"location":"data-sources/paas_service/#nested-schema-for-mysqldatabaseuser","text":"Read-Only: id (String) name (String) options (Set of String) privileges (Set of String)","title":"Nested Schema for mysql.database.user"},{"location":"data-sources/paas_service/#nested-schema-for-mysqllogging","text":"Read-Only: log_to (String) logging_tags (Set of String)","title":"Nested Schema for mysql.logging"},{"location":"data-sources/paas_service/#nested-schema-for-mysqlmonitoring","text":"Read-Only: monitor_by (String) monitoring_labels (Map of String)","title":"Nested Schema for mysql.monitoring"},{"location":"data-sources/paas_service/#nested-schema-for-mysqluser","text":"Read-Only: host (String) id (String) name (String) password (String)","title":"Nested Schema for mysql.user"},{"location":"data-sources/paas_service/#nested-schema-for-pgsql","text":"Read-Only: autovacuum (String) autovacuum_analyze_scale_factor (Number) autovacuum_max_workers (Number) autovacuum_vacuum_cost_delay (Number) autovacuum_vacuum_cost_limit (Number) autovacuum_vacuum_scale_factor (Number) class (String) database (Set of Object) (see below for nested schema ) effective_cache_size (Number) effective_io_concurrency (Number) logging (List of Object) (see below for nested schema ) maintenance_work_mem (String) max_connections (Number) max_parallel_maintenance_workers (Number) max_parallel_workers (Number) max_parallel_workers_per_gather (Number) max_wal_size (String) max_worker_processes (Number) min_wal_size (String) monitoring (List of Object) (see below for nested schema ) options (Map of String) replication_mode (String) shared_buffers (Number) user (Set of Object) (see below for nested schema ) version (String) wal_buffers (Number) wal_keep_segments (Number) work_mem (String)","title":"Nested Schema for pgsql"},{"location":"data-sources/paas_service/#nested-schema-for-pgsqldatabase","text":"Read-Only: backup_db_name (String) backup_enabled (Boolean) backup_id (String) encoding (String) extensions (Set of String) id (String) locale (String) name (String) owner (String) user (Set of Object) (see below for nested schema )","title":"Nested Schema for pgsql.database"},{"location":"data-sources/paas_service/#nested-schema-for-pgsqldatabaseuser","text":"Read-Only: id (String) name (String)","title":"Nested Schema for pgsql.database.user"},{"location":"data-sources/paas_service/#nested-schema-for-pgsqllogging","text":"Read-Only: log_to (String) logging_tags (Set of String)","title":"Nested Schema for pgsql.logging"},{"location":"data-sources/paas_service/#nested-schema-for-pgsqlmonitoring","text":"Read-Only: monitor_by (String) monitoring_labels (Map of String)","title":"Nested Schema for pgsql.monitoring"},{"location":"data-sources/paas_service/#nested-schema-for-pgsqluser","text":"Read-Only: id (String) name (String) password (String)","title":"Nested Schema for pgsql.user"},{"location":"data-sources/paas_service/#nested-schema-for-rabbitmq","text":"Read-Only: class (String) logging (List of Object) (see below for nested schema ) monitoring (List of Object) (see below for nested schema ) options (Map of String) password (String) version (String)","title":"Nested Schema for rabbitmq"},{"location":"data-sources/paas_service/#nested-schema-for-rabbitmqlogging","text":"Read-Only: log_to (String) logging_tags (Set of String)","title":"Nested Schema for rabbitmq.logging"},{"location":"data-sources/paas_service/#nested-schema-for-rabbitmqmonitoring","text":"Read-Only: monitor_by (String) monitoring_labels (Map of String)","title":"Nested Schema for rabbitmq.monitoring"},{"location":"data-sources/paas_service/#nested-schema-for-redis","text":"Read-Only: class (String) cluster_type (String) databases (Number) logging (List of Object) (see below for nested schema ) maxmemory_policy (String) monitoring (List of Object) (see below for nested schema ) options (Map of String) password (String) persistence_aof (Boolean) persistence_rdb (Boolean) tcp_backlog (Number) tcp_keepalive (Number) timeout (Number) version (String)","title":"Nested Schema for redis"},{"location":"data-sources/paas_service/#nested-schema-for-redislogging","text":"Read-Only: log_to (String) logging_tags (Set of String)","title":"Nested Schema for redis.logging"},{"location":"data-sources/paas_service/#nested-schema-for-redismonitoring","text":"Read-Only: monitor_by (String) monitoring_labels (Map of String)","title":"Nested Schema for redis.monitoring"},{"location":"data-sources/paas_service/#nested-schema-for-root_volume","text":"Read-Only: iops (Number) size (Number) type (String)","title":"Nested Schema for root_volume"},{"location":"data-sources/route/","text":"aws_route (Data Source) # Schema # Required # route_table_id (String) Optional # carrier_gateway_id (String) core_network_arn (String) destination_cidr_block (String) destination_ipv6_cidr_block (String) destination_prefix_list_id (String) egress_only_gateway_id (String) gateway_id (String) instance_id (String) local_gateway_id (String) nat_gateway_id (String) network_interface_id (String) transit_gateway_id (String) vpc_peering_connection_id (String) Read-Only # id (String) The ID of this resource.","title":"aws_route (Data Source)"},{"location":"data-sources/route/#aws_route-data-source","text":"","title":"aws_route (Data Source)"},{"location":"data-sources/route/#schema","text":"","title":"Schema"},{"location":"data-sources/route/#required","text":"route_table_id (String)","title":"Required"},{"location":"data-sources/route/#optional","text":"carrier_gateway_id (String) core_network_arn (String) destination_cidr_block (String) destination_ipv6_cidr_block (String) destination_prefix_list_id (String) egress_only_gateway_id (String) gateway_id (String) instance_id (String) local_gateway_id (String) nat_gateway_id (String) network_interface_id (String) transit_gateway_id (String) vpc_peering_connection_id (String)","title":"Optional"},{"location":"data-sources/route/#read-only","text":"id (String) The ID of this resource.","title":"Read-Only"},{"location":"data-sources/route53_zone/","text":"aws_route53_zone (Data Source) # Schema # Optional # name (String) private_zone (Boolean) resource_record_set_count (Number) tags (Map of String) vpc_id (String) zone_id (String) Read-Only # arn (String) caller_reference (String) comment (String) id (String) The ID of this resource. linked_service_description (String) linked_service_principal (String) name_servers (List of String)","title":"aws_route53_zone (Data Source)"},{"location":"data-sources/route53_zone/#aws_route53_zone-data-source","text":"","title":"aws_route53_zone (Data Source)"},{"location":"data-sources/route53_zone/#schema","text":"","title":"Schema"},{"location":"data-sources/route53_zone/#optional","text":"name (String) private_zone (Boolean) resource_record_set_count (Number) tags (Map of String) vpc_id (String) zone_id (String)","title":"Optional"},{"location":"data-sources/route53_zone/#read-only","text":"arn (String) caller_reference (String) comment (String) id (String) The ID of this resource. linked_service_description (String) linked_service_principal (String) name_servers (List of String)","title":"Read-Only"},{"location":"data-sources/route_table/","text":"aws_route_table (Data Source) # Schema # Optional # filter (Block Set) (see below for nested schema ) gateway_id (String) route_table_id (String) subnet_id (String) tags (Map of String) vpc_id (String) Read-Only # arn (String) associations (List of Object) (see below for nested schema ) id (String) The ID of this resource. owner_id (String) routes (List of Object) (see below for nested schema ) Nested Schema for filter # Required: name (String) values (Set of String) Nested Schema for associations # Read-Only: gateway_id (String) main (Boolean) route_table_association_id (String) route_table_id (String) subnet_id (String) Nested Schema for routes # Read-Only: carrier_gateway_id (String) cidr_block (String) core_network_arn (String) destination_prefix_list_id (String) egress_only_gateway_id (String) gateway_id (String) instance_id (String) ipv6_cidr_block (String) local_gateway_id (String) nat_gateway_id (String) network_interface_id (String) transit_gateway_id (String) vpc_endpoint_id (String) vpc_peering_connection_id (String)","title":"aws_route_table (Data Source)"},{"location":"data-sources/route_table/#aws_route_table-data-source","text":"","title":"aws_route_table (Data Source)"},{"location":"data-sources/route_table/#schema","text":"","title":"Schema"},{"location":"data-sources/route_table/#optional","text":"filter (Block Set) (see below for nested schema ) gateway_id (String) route_table_id (String) subnet_id (String) tags (Map of String) vpc_id (String)","title":"Optional"},{"location":"data-sources/route_table/#read-only","text":"arn (String) associations (List of Object) (see below for nested schema ) id (String) The ID of this resource. owner_id (String) routes (List of Object) (see below for nested schema )","title":"Read-Only"},{"location":"data-sources/route_table/#nested-schema-for-filter","text":"Required: name (String) values (Set of String)","title":"Nested Schema for filter"},{"location":"data-sources/route_table/#nested-schema-for-associations","text":"Read-Only: gateway_id (String) main (Boolean) route_table_association_id (String) route_table_id (String) subnet_id (String)","title":"Nested Schema for associations"},{"location":"data-sources/route_table/#nested-schema-for-routes","text":"Read-Only: carrier_gateway_id (String) cidr_block (String) core_network_arn (String) destination_prefix_list_id (String) egress_only_gateway_id (String) gateway_id (String) instance_id (String) ipv6_cidr_block (String) local_gateway_id (String) nat_gateway_id (String) network_interface_id (String) transit_gateway_id (String) vpc_endpoint_id (String) vpc_peering_connection_id (String)","title":"Nested Schema for routes"},{"location":"data-sources/route_tables/","text":"aws_route_tables (Data Source) # Schema # Optional # filter (Block Set) (see below for nested schema ) tags (Map of String) vpc_id (String) Read-Only # id (String) The ID of this resource. ids (List of String) Nested Schema for filter # Required: name (String) values (List of String)","title":"aws_route_tables (Data Source)"},{"location":"data-sources/route_tables/#aws_route_tables-data-source","text":"","title":"aws_route_tables (Data Source)"},{"location":"data-sources/route_tables/#schema","text":"","title":"Schema"},{"location":"data-sources/route_tables/#optional","text":"filter (Block Set) (see below for nested schema ) tags (Map of String) vpc_id (String)","title":"Optional"},{"location":"data-sources/route_tables/#read-only","text":"id (String) The ID of this resource. ids (List of String)","title":"Read-Only"},{"location":"data-sources/route_tables/#nested-schema-for-filter","text":"Required: name (String) values (List of String)","title":"Nested Schema for filter"},{"location":"data-sources/s3_bucket/","text":"aws_s3_bucket (Data Source) # Schema # Required # bucket (String) Read-Only # arn (String) bucket_domain_name (String) bucket_regional_domain_name (String) hosted_zone_id (String) id (String) The ID of this resource. region (String) website_domain (String) website_endpoint (String)","title":"aws_s3_bucket (Data Source)"},{"location":"data-sources/s3_bucket/#aws_s3_bucket-data-source","text":"","title":"aws_s3_bucket (Data Source)"},{"location":"data-sources/s3_bucket/#schema","text":"","title":"Schema"},{"location":"data-sources/s3_bucket/#required","text":"bucket (String)","title":"Required"},{"location":"data-sources/s3_bucket/#read-only","text":"arn (String) bucket_domain_name (String) bucket_regional_domain_name (String) hosted_zone_id (String) id (String) The ID of this resource. region (String) website_domain (String) website_endpoint (String)","title":"Read-Only"},{"location":"data-sources/s3_bucket_object/","text":"aws_s3_bucket_object (Data Source) # Schema # Required # bucket (String, Deprecated) key (String) Optional # range (String) tags (Map of String) version_id (String) Read-Only # body (String) bucket_key_enabled (Boolean) cache_control (String) content_disposition (String) content_encoding (String) content_language (String) content_length (Number) content_type (String) etag (String) expiration (String) expires (String) id (String) The ID of this resource. last_modified (String) metadata (Map of String) object_lock_legal_hold_status (String) object_lock_mode (String) object_lock_retain_until_date (String) server_side_encryption (String) sse_kms_key_id (String) storage_class (String) website_redirect_location (String)","title":"aws_s3_bucket_object (Data Source)"},{"location":"data-sources/s3_bucket_object/#aws_s3_bucket_object-data-source","text":"","title":"aws_s3_bucket_object (Data Source)"},{"location":"data-sources/s3_bucket_object/#schema","text":"","title":"Schema"},{"location":"data-sources/s3_bucket_object/#required","text":"bucket (String, Deprecated) key (String)","title":"Required"},{"location":"data-sources/s3_bucket_object/#optional","text":"range (String) tags (Map of String) version_id (String)","title":"Optional"},{"location":"data-sources/s3_bucket_object/#read-only","text":"body (String) bucket_key_enabled (Boolean) cache_control (String) content_disposition (String) content_encoding (String) content_language (String) content_length (Number) content_type (String) etag (String) expiration (String) expires (String) id (String) The ID of this resource. last_modified (String) metadata (Map of String) object_lock_legal_hold_status (String) object_lock_mode (String) object_lock_retain_until_date (String) server_side_encryption (String) sse_kms_key_id (String) storage_class (String) website_redirect_location (String)","title":"Read-Only"},{"location":"data-sources/s3_bucket_objects/","text":"aws_s3_bucket_objects (Data Source) # Schema # Required # bucket (String, Deprecated) Optional # delimiter (String) encoding_type (String) fetch_owner (Boolean) max_keys (Number) prefix (String) start_after (String) Read-Only # common_prefixes (List of String) id (String) The ID of this resource. keys (List of String) owners (List of String)","title":"aws_s3_bucket_objects (Data Source)"},{"location":"data-sources/s3_bucket_objects/#aws_s3_bucket_objects-data-source","text":"","title":"aws_s3_bucket_objects (Data Source)"},{"location":"data-sources/s3_bucket_objects/#schema","text":"","title":"Schema"},{"location":"data-sources/s3_bucket_objects/#required","text":"bucket (String, Deprecated)","title":"Required"},{"location":"data-sources/s3_bucket_objects/#optional","text":"delimiter (String) encoding_type (String) fetch_owner (Boolean) max_keys (Number) prefix (String) start_after (String)","title":"Optional"},{"location":"data-sources/s3_bucket_objects/#read-only","text":"common_prefixes (List of String) id (String) The ID of this resource. keys (List of String) owners (List of String)","title":"Read-Only"},{"location":"data-sources/s3_bucket_policy/","text":"aws_s3_bucket_policy (Data Source) # Schema # Required # bucket (String) Read-Only # id (String) The ID of this resource. policy (String)","title":"aws_s3_bucket_policy (Data Source)"},{"location":"data-sources/s3_bucket_policy/#aws_s3_bucket_policy-data-source","text":"","title":"aws_s3_bucket_policy (Data Source)"},{"location":"data-sources/s3_bucket_policy/#schema","text":"","title":"Schema"},{"location":"data-sources/s3_bucket_policy/#required","text":"bucket (String)","title":"Required"},{"location":"data-sources/s3_bucket_policy/#read-only","text":"id (String) The ID of this resource. policy (String)","title":"Read-Only"},{"location":"data-sources/s3_object/","text":"aws_s3_object (Data Source) # Schema # Required # bucket (String) key (String) Optional # range (String) tags (Map of String) version_id (String) Read-Only # body (String) bucket_key_enabled (Boolean) cache_control (String) content_disposition (String) content_encoding (String) content_language (String) content_length (Number) content_type (String) etag (String) expiration (String) expires (String) id (String) The ID of this resource. last_modified (String) metadata (Map of String) object_lock_legal_hold_status (String) object_lock_mode (String) object_lock_retain_until_date (String) server_side_encryption (String) sse_kms_key_id (String) storage_class (String) website_redirect_location (String)","title":"aws_s3_object (Data Source)"},{"location":"data-sources/s3_object/#aws_s3_object-data-source","text":"","title":"aws_s3_object (Data Source)"},{"location":"data-sources/s3_object/#schema","text":"","title":"Schema"},{"location":"data-sources/s3_object/#required","text":"bucket (String) key (String)","title":"Required"},{"location":"data-sources/s3_object/#optional","text":"range (String) tags (Map of String) version_id (String)","title":"Optional"},{"location":"data-sources/s3_object/#read-only","text":"body (String) bucket_key_enabled (Boolean) cache_control (String) content_disposition (String) content_encoding (String) content_language (String) content_length (Number) content_type (String) etag (String) expiration (String) expires (String) id (String) The ID of this resource. last_modified (String) metadata (Map of String) object_lock_legal_hold_status (String) object_lock_mode (String) object_lock_retain_until_date (String) server_side_encryption (String) sse_kms_key_id (String) storage_class (String) website_redirect_location (String)","title":"Read-Only"},{"location":"data-sources/s3_objects/","text":"aws_s3_objects (Data Source) # Schema # Required # bucket (String) Optional # delimiter (String) encoding_type (String) fetch_owner (Boolean) max_keys (Number) prefix (String) start_after (String) Read-Only # common_prefixes (List of String) id (String) The ID of this resource. keys (List of String) owners (List of String)","title":"aws_s3_objects (Data Source)"},{"location":"data-sources/s3_objects/#aws_s3_objects-data-source","text":"","title":"aws_s3_objects (Data Source)"},{"location":"data-sources/s3_objects/#schema","text":"","title":"Schema"},{"location":"data-sources/s3_objects/#required","text":"bucket (String)","title":"Required"},{"location":"data-sources/s3_objects/#optional","text":"delimiter (String) encoding_type (String) fetch_owner (Boolean) max_keys (Number) prefix (String) start_after (String)","title":"Optional"},{"location":"data-sources/s3_objects/#read-only","text":"common_prefixes (List of String) id (String) The ID of this resource. keys (List of String) owners (List of String)","title":"Read-Only"},{"location":"data-sources/security_group/","text":"aws_security_group (Data Source) # Schema # Optional # filter (Block Set) (see below for nested schema ) name (String) tags (Map of String) vpc_id (String) Read-Only # arn (String) description (String) id (String) The ID of this resource. Nested Schema for filter # Required: name (String) values (Set of String)","title":"aws_security_group (Data Source)"},{"location":"data-sources/security_group/#aws_security_group-data-source","text":"","title":"aws_security_group (Data Source)"},{"location":"data-sources/security_group/#schema","text":"","title":"Schema"},{"location":"data-sources/security_group/#optional","text":"filter (Block Set) (see below for nested schema ) name (String) tags (Map of String) vpc_id (String)","title":"Optional"},{"location":"data-sources/security_group/#read-only","text":"arn (String) description (String) id (String) The ID of this resource.","title":"Read-Only"},{"location":"data-sources/security_group/#nested-schema-for-filter","text":"Required: name (String) values (Set of String)","title":"Nested Schema for filter"},{"location":"data-sources/security_groups/","text":"aws_security_groups (Data Source) # Schema # Optional # filter (Block Set) (see below for nested schema ) tags (Map of String) Read-Only # arns (List of String) id (String) The ID of this resource. ids (List of String) vpc_ids (List of String) Nested Schema for filter # Required: name (String) values (List of String)","title":"aws_security_groups (Data Source)"},{"location":"data-sources/security_groups/#aws_security_groups-data-source","text":"","title":"aws_security_groups (Data Source)"},{"location":"data-sources/security_groups/#schema","text":"","title":"Schema"},{"location":"data-sources/security_groups/#optional","text":"filter (Block Set) (see below for nested schema ) tags (Map of String)","title":"Optional"},{"location":"data-sources/security_groups/#read-only","text":"arns (List of String) id (String) The ID of this resource. ids (List of String) vpc_ids (List of String)","title":"Read-Only"},{"location":"data-sources/security_groups/#nested-schema-for-filter","text":"Required: name (String) values (List of String)","title":"Nested Schema for filter"},{"location":"data-sources/subnet/","text":"aws_subnet (Data Source) # Schema # Optional # availability_zone (String) availability_zone_id (String) cidr_block (String) default_for_az (Boolean) filter (Block Set) (see below for nested schema ) ipv6_cidr_block (String) state (String) tags (Map of String) vpc_id (String) Read-Only # arn (String) assign_ipv6_address_on_creation (Boolean) available_ip_address_count (Number) customer_owned_ipv4_pool (String) enable_dns64 (Boolean) enable_resource_name_dns_a_record_on_launch (Boolean) enable_resource_name_dns_aaaa_record_on_launch (Boolean) id (String) The ID of this resource. ipv6_cidr_block_association_id (String) ipv6_native (Boolean) map_customer_owned_ip_on_launch (Boolean) map_public_ip_on_launch (Boolean) outpost_arn (String) owner_id (String) private_dns_hostname_type_on_launch (String) Nested Schema for filter # Required: name (String) values (Set of String)","title":"aws_subnet (Data Source)"},{"location":"data-sources/subnet/#aws_subnet-data-source","text":"","title":"aws_subnet (Data Source)"},{"location":"data-sources/subnet/#schema","text":"","title":"Schema"},{"location":"data-sources/subnet/#optional","text":"availability_zone (String) availability_zone_id (String) cidr_block (String) default_for_az (Boolean) filter (Block Set) (see below for nested schema ) ipv6_cidr_block (String) state (String) tags (Map of String) vpc_id (String)","title":"Optional"},{"location":"data-sources/subnet/#read-only","text":"arn (String) assign_ipv6_address_on_creation (Boolean) available_ip_address_count (Number) customer_owned_ipv4_pool (String) enable_dns64 (Boolean) enable_resource_name_dns_a_record_on_launch (Boolean) enable_resource_name_dns_aaaa_record_on_launch (Boolean) id (String) The ID of this resource. ipv6_cidr_block_association_id (String) ipv6_native (Boolean) map_customer_owned_ip_on_launch (Boolean) map_public_ip_on_launch (Boolean) outpost_arn (String) owner_id (String) private_dns_hostname_type_on_launch (String)","title":"Read-Only"},{"location":"data-sources/subnet/#nested-schema-for-filter","text":"Required: name (String) values (Set of String)","title":"Nested Schema for filter"},{"location":"data-sources/subnet_ids/","text":"aws_subnet_ids (Data Source) # Schema # Required # vpc_id (String) Optional # filter (Block Set) (see below for nested schema ) tags (Map of String) Read-Only # id (String) The ID of this resource. ids (Set of String) Nested Schema for filter # Required: name (String) values (Set of String)","title":"aws_subnet_ids (Data Source)"},{"location":"data-sources/subnet_ids/#aws_subnet_ids-data-source","text":"","title":"aws_subnet_ids (Data Source)"},{"location":"data-sources/subnet_ids/#schema","text":"","title":"Schema"},{"location":"data-sources/subnet_ids/#required","text":"vpc_id (String)","title":"Required"},{"location":"data-sources/subnet_ids/#optional","text":"filter (Block Set) (see below for nested schema ) tags (Map of String)","title":"Optional"},{"location":"data-sources/subnet_ids/#read-only","text":"id (String) The ID of this resource. ids (Set of String)","title":"Read-Only"},{"location":"data-sources/subnet_ids/#nested-schema-for-filter","text":"Required: name (String) values (Set of String)","title":"Nested Schema for filter"},{"location":"data-sources/subnets/","text":"aws_subnets (Data Source) # Schema # Optional # filter (Block Set) (see below for nested schema ) tags (Map of String) Read-Only # id (String) The ID of this resource. ids (List of String) Nested Schema for filter # Required: name (String) values (List of String)","title":"aws_subnets (Data Source)"},{"location":"data-sources/subnets/#aws_subnets-data-source","text":"","title":"aws_subnets (Data Source)"},{"location":"data-sources/subnets/#schema","text":"","title":"Schema"},{"location":"data-sources/subnets/#optional","text":"filter (Block Set) (see below for nested schema ) tags (Map of String)","title":"Optional"},{"location":"data-sources/subnets/#read-only","text":"id (String) The ID of this resource. ids (List of String)","title":"Read-Only"},{"location":"data-sources/subnets/#nested-schema-for-filter","text":"Required: name (String) values (List of String)","title":"Nested Schema for filter"},{"location":"data-sources/vpc/","text":"aws_vpc (Data Source) # Schema # Optional # cidr_block (String) default (Boolean) dhcp_options_id (String) filter (Block Set) (see below for nested schema ) state (String) tags (Map of String) Read-Only # arn (String) cidr_block_associations (List of Object) (see below for nested schema ) enable_dns_hostnames (Boolean) enable_dns_support (Boolean) id (String) The ID of this resource. instance_tenancy (String) ipv6_association_id (String) ipv6_cidr_block (String) main_route_table_id (String) owner_id (String) Nested Schema for filter # Required: name (String) values (Set of String) Nested Schema for cidr_block_associations # Read-Only: association_id (String) cidr_block (String) state (String)","title":"aws_vpc (Data Source)"},{"location":"data-sources/vpc/#aws_vpc-data-source","text":"","title":"aws_vpc (Data Source)"},{"location":"data-sources/vpc/#schema","text":"","title":"Schema"},{"location":"data-sources/vpc/#optional","text":"cidr_block (String) default (Boolean) dhcp_options_id (String) filter (Block Set) (see below for nested schema ) state (String) tags (Map of String)","title":"Optional"},{"location":"data-sources/vpc/#read-only","text":"arn (String) cidr_block_associations (List of Object) (see below for nested schema ) enable_dns_hostnames (Boolean) enable_dns_support (Boolean) id (String) The ID of this resource. instance_tenancy (String) ipv6_association_id (String) ipv6_cidr_block (String) main_route_table_id (String) owner_id (String)","title":"Read-Only"},{"location":"data-sources/vpc/#nested-schema-for-filter","text":"Required: name (String) values (Set of String)","title":"Nested Schema for filter"},{"location":"data-sources/vpc/#nested-schema-for-cidr_block_associations","text":"Read-Only: association_id (String) cidr_block (String) state (String)","title":"Nested Schema for cidr_block_associations"},{"location":"data-sources/vpc_dhcp_options/","text":"aws_vpc_dhcp_options (Data Source) # Schema # Optional # dhcp_options_id (String) filter (Block Set) (see below for nested schema ) tags (Map of String) Read-Only # arn (String) domain_name (String) domain_name_servers (List of String) id (String) The ID of this resource. netbios_name_servers (List of String) netbios_node_type (String) ntp_servers (List of String) owner_id (String) Nested Schema for filter # Required: name (String) values (Set of String)","title":"aws_vpc_dhcp_options (Data Source)"},{"location":"data-sources/vpc_dhcp_options/#aws_vpc_dhcp_options-data-source","text":"","title":"aws_vpc_dhcp_options (Data Source)"},{"location":"data-sources/vpc_dhcp_options/#schema","text":"","title":"Schema"},{"location":"data-sources/vpc_dhcp_options/#optional","text":"dhcp_options_id (String) filter (Block Set) (see below for nested schema ) tags (Map of String)","title":"Optional"},{"location":"data-sources/vpc_dhcp_options/#read-only","text":"arn (String) domain_name (String) domain_name_servers (List of String) id (String) The ID of this resource. netbios_name_servers (List of String) netbios_node_type (String) ntp_servers (List of String) owner_id (String)","title":"Read-Only"},{"location":"data-sources/vpc_dhcp_options/#nested-schema-for-filter","text":"Required: name (String) values (Set of String)","title":"Nested Schema for filter"},{"location":"data-sources/vpcs/","text":"aws_vpcs (Data Source) # Schema # Optional # filter (Block Set) (see below for nested schema ) tags (Map of String) Read-Only # id (String) The ID of this resource. ids (List of String) Nested Schema for filter # Required: name (String) values (List of String)","title":"aws_vpcs (Data Source)"},{"location":"data-sources/vpcs/#aws_vpcs-data-source","text":"","title":"aws_vpcs (Data Source)"},{"location":"data-sources/vpcs/#schema","text":"","title":"Schema"},{"location":"data-sources/vpcs/#optional","text":"filter (Block Set) (see below for nested schema ) tags (Map of String)","title":"Optional"},{"location":"data-sources/vpcs/#read-only","text":"id (String) The ID of this resource. ids (List of String)","title":"Read-Only"},{"location":"data-sources/vpcs/#nested-schema-for-filter","text":"Required: name (String) values (List of String)","title":"Nested Schema for filter"},{"location":"data-sources/vpn_gateway/","text":"aws_vpn_gateway (Data Source) # Schema # Optional # amazon_side_asn (String) attached_vpc_id (String) availability_zone (String) filter (Block Set) (see below for nested schema ) state (String) tags (Map of String) Read-Only # arn (String) id (String) The ID of this resource. Nested Schema for filter # Required: name (String) values (Set of String)","title":"aws_vpn_gateway (Data Source)"},{"location":"data-sources/vpn_gateway/#aws_vpn_gateway-data-source","text":"","title":"aws_vpn_gateway (Data Source)"},{"location":"data-sources/vpn_gateway/#schema","text":"","title":"Schema"},{"location":"data-sources/vpn_gateway/#optional","text":"amazon_side_asn (String) attached_vpc_id (String) availability_zone (String) filter (Block Set) (see below for nested schema ) state (String) tags (Map of String)","title":"Optional"},{"location":"data-sources/vpn_gateway/#read-only","text":"arn (String) id (String) The ID of this resource.","title":"Read-Only"},{"location":"data-sources/vpn_gateway/#nested-schema-for-filter","text":"Required: name (String) values (Set of String)","title":"Nested Schema for filter"},{"location":"resources/ami/","text":"aws_ami (Resource) # Schema # Required # name (String) Optional # architecture (String) boot_mode (String) deprecation_time (String) description (String) ebs_block_device (Block Set) (see below for nested schema ) ena_support (Boolean) ephemeral_block_device (Block Set) (see below for nested schema ) image_location (String) kernel_id (String) ramdisk_id (String) root_device_name (String) sriov_net_support (String) tags (Map of String) tags_all (Map of String) timeouts (Block, Optional) (see below for nested schema ) virtualization_type (String) Read-Only # arn (String) hypervisor (String) id (String) The ID of this resource. image_owner_alias (String) image_type (String) manage_ebs_snapshots (Boolean) owner_id (String) platform (String) platform_details (String) public (Boolean) root_snapshot_id (String) usage_operation (String) Nested Schema for ebs_block_device # Required: device_name (String) Optional: delete_on_termination (Boolean) encrypted (Boolean) iops (Number) outpost_arn (String) snapshot_id (String) throughput (Number) volume_size (Number) volume_type (String) Nested Schema for ephemeral_block_device # Required: device_name (String) virtual_name (String) Nested Schema for timeouts # Optional: create (String) delete (String) update (String)","title":"aws_ami (Resource)"},{"location":"resources/ami/#aws_ami-resource","text":"","title":"aws_ami (Resource)"},{"location":"resources/ami/#schema","text":"","title":"Schema"},{"location":"resources/ami/#required","text":"name (String)","title":"Required"},{"location":"resources/ami/#optional","text":"architecture (String) boot_mode (String) deprecation_time (String) description (String) ebs_block_device (Block Set) (see below for nested schema ) ena_support (Boolean) ephemeral_block_device (Block Set) (see below for nested schema ) image_location (String) kernel_id (String) ramdisk_id (String) root_device_name (String) sriov_net_support (String) tags (Map of String) tags_all (Map of String) timeouts (Block, Optional) (see below for nested schema ) virtualization_type (String)","title":"Optional"},{"location":"resources/ami/#read-only","text":"arn (String) hypervisor (String) id (String) The ID of this resource. image_owner_alias (String) image_type (String) manage_ebs_snapshots (Boolean) owner_id (String) platform (String) platform_details (String) public (Boolean) root_snapshot_id (String) usage_operation (String)","title":"Read-Only"},{"location":"resources/ami/#nested-schema-for-ebs_block_device","text":"Required: device_name (String) Optional: delete_on_termination (Boolean) encrypted (Boolean) iops (Number) outpost_arn (String) snapshot_id (String) throughput (Number) volume_size (Number) volume_type (String)","title":"Nested Schema for ebs_block_device"},{"location":"resources/ami/#nested-schema-for-ephemeral_block_device","text":"Required: device_name (String) virtual_name (String)","title":"Nested Schema for ephemeral_block_device"},{"location":"resources/ami/#nested-schema-for-timeouts","text":"Optional: create (String) delete (String) update (String)","title":"Nested Schema for timeouts"},{"location":"resources/ami_from_instance/","text":"aws_ami_from_instance (Resource) # Schema # Required # name (String) source_instance_id (String) Optional # deprecation_time (String) description (String) snapshot_without_reboot (Boolean) tags (Map of String) tags_all (Map of String) timeouts (Block, Optional) (see below for nested schema ) Read-Only # architecture (String) arn (String) boot_mode (String) ebs_block_device (Block Set) (see below for nested schema ) ena_support (Boolean) ephemeral_block_device (Block Set) (see below for nested schema ) hypervisor (String) id (String) The ID of this resource. image_location (String) image_owner_alias (String) image_type (String) kernel_id (String) manage_ebs_snapshots (Boolean) owner_id (String) platform (String) platform_details (String) public (Boolean) ramdisk_id (String) root_device_name (String) root_snapshot_id (String) sriov_net_support (String) usage_operation (String) virtualization_type (String) Nested Schema for timeouts # Optional: create (String) delete (String) update (String) Nested Schema for ebs_block_device # Read-Only: delete_on_termination (Boolean) device_name (String) encrypted (Boolean) iops (Number) outpost_arn (String) snapshot_id (String) throughput (Number) volume_size (Number) volume_type (String) Nested Schema for ephemeral_block_device # Read-Only: device_name (String) virtual_name (String)","title":"aws_ami_from_instance (Resource)"},{"location":"resources/ami_from_instance/#aws_ami_from_instance-resource","text":"","title":"aws_ami_from_instance (Resource)"},{"location":"resources/ami_from_instance/#schema","text":"","title":"Schema"},{"location":"resources/ami_from_instance/#required","text":"name (String) source_instance_id (String)","title":"Required"},{"location":"resources/ami_from_instance/#optional","text":"deprecation_time (String) description (String) snapshot_without_reboot (Boolean) tags (Map of String) tags_all (Map of String) timeouts (Block, Optional) (see below for nested schema )","title":"Optional"},{"location":"resources/ami_from_instance/#read-only","text":"architecture (String) arn (String) boot_mode (String) ebs_block_device (Block Set) (see below for nested schema ) ena_support (Boolean) ephemeral_block_device (Block Set) (see below for nested schema ) hypervisor (String) id (String) The ID of this resource. image_location (String) image_owner_alias (String) image_type (String) kernel_id (String) manage_ebs_snapshots (Boolean) owner_id (String) platform (String) platform_details (String) public (Boolean) ramdisk_id (String) root_device_name (String) root_snapshot_id (String) sriov_net_support (String) usage_operation (String) virtualization_type (String)","title":"Read-Only"},{"location":"resources/ami_from_instance/#nested-schema-for-timeouts","text":"Optional: create (String) delete (String) update (String)","title":"Nested Schema for timeouts"},{"location":"resources/ami_from_instance/#nested-schema-for-ebs_block_device","text":"Read-Only: delete_on_termination (Boolean) device_name (String) encrypted (Boolean) iops (Number) outpost_arn (String) snapshot_id (String) throughput (Number) volume_size (Number) volume_type (String)","title":"Nested Schema for ebs_block_device"},{"location":"resources/ami_from_instance/#nested-schema-for-ephemeral_block_device","text":"Read-Only: device_name (String) virtual_name (String)","title":"Nested Schema for ephemeral_block_device"},{"location":"resources/ami_launch_permission/","text":"aws_ami_launch_permission (Resource) # Schema # Required # image_id (String) Optional # account_id (String) group (String) organization_arn (String) organizational_unit_arn (String) Read-Only # id (String) The ID of this resource.","title":"aws_ami_launch_permission (Resource)"},{"location":"resources/ami_launch_permission/#aws_ami_launch_permission-resource","text":"","title":"aws_ami_launch_permission (Resource)"},{"location":"resources/ami_launch_permission/#schema","text":"","title":"Schema"},{"location":"resources/ami_launch_permission/#required","text":"image_id (String)","title":"Required"},{"location":"resources/ami_launch_permission/#optional","text":"account_id (String) group (String) organization_arn (String) organizational_unit_arn (String)","title":"Optional"},{"location":"resources/ami_launch_permission/#read-only","text":"id (String) The ID of this resource.","title":"Read-Only"},{"location":"resources/autoscaling_policy/","text":"aws_autoscaling_policy (Resource) # Schema # Required # autoscaling_group_name (String) name (String) Optional # adjustment_type (String) cooldown (Number) estimated_instance_warmup (Number) metric_aggregation_type (String) min_adjustment_magnitude (Number) policy_type (String) predictive_scaling_configuration (Block List, Max: 1) (see below for nested schema ) scaling_adjustment (Number) step_adjustment (Block Set) (see below for nested schema ) target_tracking_configuration (Block List, Max: 1) (see below for nested schema ) Read-Only # arn (String) id (String) The ID of this resource. Nested Schema for predictive_scaling_configuration # Required: metric_specification (Block List, Min: 1, Max: 1) (see below for nested schema ) Optional: max_capacity_breach_behavior (String) max_capacity_buffer (String) mode (String) scheduling_buffer_time (String) Nested Schema for predictive_scaling_configuration.metric_specification # Required: target_value (Number) Optional: customized_capacity_metric_specification (Block List, Max: 1) (see below for nested schema ) customized_load_metric_specification (Block List, Max: 1) (see below for nested schema ) customized_scaling_metric_specification (Block List, Max: 1) (see below for nested schema ) predefined_load_metric_specification (Block List, Max: 1) (see below for nested schema ) predefined_metric_pair_specification (Block List, Max: 1) (see below for nested schema ) predefined_scaling_metric_specification (Block List, Max: 1) (see below for nested schema ) Nested Schema for predictive_scaling_configuration.metric_specification.customized_capacity_metric_specification # Required: metric_data_queries (Block List, Min: 1, Max: 10) (see below for nested schema ) Nested Schema for predictive_scaling_configuration.metric_specification.customized_capacity_metric_specification.metric_data_queries # Required: id (String) Optional: expression (String) label (String) metric_stat (Block List, Max: 1) (see below for nested schema ) return_data (Boolean) Nested Schema for predictive_scaling_configuration.metric_specification.customized_capacity_metric_specification.metric_data_queries.metric_stat # Required: metric (Block List, Min: 1, Max: 1) (see below for nested schema ) stat (String) Optional: unit (String) Nested Schema for predictive_scaling_configuration.metric_specification.customized_capacity_metric_specification.metric_data_queries.metric_stat.metric # Required: metric_name (String) namespace (String) Optional: dimensions (Block Set) (see below for nested schema ) Nested Schema for predictive_scaling_configuration.metric_specification.customized_capacity_metric_specification.metric_data_queries.metric_stat.metric.dimensions # Required: name (String) value (String) Nested Schema for predictive_scaling_configuration.metric_specification.customized_load_metric_specification # Required: metric_data_queries (Block List, Min: 1, Max: 10) (see below for nested schema ) Nested Schema for predictive_scaling_configuration.metric_specification.customized_load_metric_specification.metric_data_queries # Required: id (String) Optional: expression (String) label (String) metric_stat (Block List, Max: 1) (see below for nested schema ) return_data (Boolean) Nested Schema for predictive_scaling_configuration.metric_specification.customized_load_metric_specification.metric_data_queries.metric_stat # Required: metric (Block List, Min: 1, Max: 1) (see below for nested schema ) stat (String) Optional: unit (String) Nested Schema for predictive_scaling_configuration.metric_specification.customized_load_metric_specification.metric_data_queries.metric_stat.metric # Required: metric_name (String) namespace (String) Optional: dimensions (Block Set) (see below for nested schema ) Nested Schema for predictive_scaling_configuration.metric_specification.customized_load_metric_specification.metric_data_queries.metric_stat.metric.dimensions # Required: name (String) value (String) Nested Schema for predictive_scaling_configuration.metric_specification.customized_scaling_metric_specification # Required: metric_data_queries (Block List, Min: 1, Max: 10) (see below for nested schema ) Nested Schema for predictive_scaling_configuration.metric_specification.customized_scaling_metric_specification.metric_data_queries # Required: id (String) Optional: expression (String) label (String) metric_stat (Block List, Max: 1) (see below for nested schema ) return_data (Boolean) Nested Schema for predictive_scaling_configuration.metric_specification.customized_scaling_metric_specification.metric_data_queries.metric_stat # Required: metric (Block List, Min: 1, Max: 1) (see below for nested schema ) stat (String) Optional: unit (String) Nested Schema for predictive_scaling_configuration.metric_specification.customized_scaling_metric_specification.metric_data_queries.metric_stat.metric # Required: metric_name (String) namespace (String) Optional: dimensions (Block Set) (see below for nested schema ) Nested Schema for predictive_scaling_configuration.metric_specification.customized_scaling_metric_specification.metric_data_queries.metric_stat.metric.dimensions # Required: name (String) value (String) Nested Schema for predictive_scaling_configuration.metric_specification.predefined_load_metric_specification # Required: predefined_metric_type (String) resource_label (String) Nested Schema for predictive_scaling_configuration.metric_specification.predefined_metric_pair_specification # Required: predefined_metric_type (String) resource_label (String) Nested Schema for predictive_scaling_configuration.metric_specification.predefined_scaling_metric_specification # Required: predefined_metric_type (String) resource_label (String) Nested Schema for step_adjustment # Required: scaling_adjustment (Number) Optional: metric_interval_lower_bound (String) metric_interval_upper_bound (String) Nested Schema for target_tracking_configuration # Required: target_value (Number) Optional: customized_metric_specification (Block List, Max: 1) (see below for nested schema ) disable_scale_in (Boolean) predefined_metric_specification (Block List, Max: 1) (see below for nested schema ) Nested Schema for target_tracking_configuration.customized_metric_specification # Required: metric_name (String) namespace (String) statistic (String) Optional: metric_dimension (Block List) (see below for nested schema ) unit (String) Nested Schema for target_tracking_configuration.customized_metric_specification.metric_dimension # Required: name (String) value (String) Nested Schema for target_tracking_configuration.predefined_metric_specification # Required: predefined_metric_type (String) Optional: resource_label (String)","title":"aws_autoscaling_policy (Resource)"},{"location":"resources/autoscaling_policy/#aws_autoscaling_policy-resource","text":"","title":"aws_autoscaling_policy (Resource)"},{"location":"resources/autoscaling_policy/#schema","text":"","title":"Schema"},{"location":"resources/autoscaling_policy/#required","text":"autoscaling_group_name (String) name (String)","title":"Required"},{"location":"resources/autoscaling_policy/#optional","text":"adjustment_type (String) cooldown (Number) estimated_instance_warmup (Number) metric_aggregation_type (String) min_adjustment_magnitude (Number) policy_type (String) predictive_scaling_configuration (Block List, Max: 1) (see below for nested schema ) scaling_adjustment (Number) step_adjustment (Block Set) (see below for nested schema ) target_tracking_configuration (Block List, Max: 1) (see below for nested schema )","title":"Optional"},{"location":"resources/autoscaling_policy/#read-only","text":"arn (String) id (String) The ID of this resource.","title":"Read-Only"},{"location":"resources/autoscaling_policy/#nested-schema-for-predictive_scaling_configuration","text":"Required: metric_specification (Block List, Min: 1, Max: 1) (see below for nested schema ) Optional: max_capacity_breach_behavior (String) max_capacity_buffer (String) mode (String) scheduling_buffer_time (String)","title":"Nested Schema for predictive_scaling_configuration"},{"location":"resources/autoscaling_policy/#nested-schema-for-predictive_scaling_configurationmetric_specification","text":"Required: target_value (Number) Optional: customized_capacity_metric_specification (Block List, Max: 1) (see below for nested schema ) customized_load_metric_specification (Block List, Max: 1) (see below for nested schema ) customized_scaling_metric_specification (Block List, Max: 1) (see below for nested schema ) predefined_load_metric_specification (Block List, Max: 1) (see below for nested schema ) predefined_metric_pair_specification (Block List, Max: 1) (see below for nested schema ) predefined_scaling_metric_specification (Block List, Max: 1) (see below for nested schema )","title":"Nested Schema for predictive_scaling_configuration.metric_specification"},{"location":"resources/autoscaling_policy/#nested-schema-for-predictive_scaling_configurationmetric_specificationcustomized_capacity_metric_specification","text":"Required: metric_data_queries (Block List, Min: 1, Max: 10) (see below for nested schema )","title":"Nested Schema for predictive_scaling_configuration.metric_specification.customized_capacity_metric_specification"},{"location":"resources/autoscaling_policy/#nested-schema-for-predictive_scaling_configurationmetric_specificationcustomized_capacity_metric_specificationmetric_data_queries","text":"Required: id (String) Optional: expression (String) label (String) metric_stat (Block List, Max: 1) (see below for nested schema ) return_data (Boolean)","title":"Nested Schema for predictive_scaling_configuration.metric_specification.customized_capacity_metric_specification.metric_data_queries"},{"location":"resources/autoscaling_policy/#nested-schema-for-predictive_scaling_configurationmetric_specificationcustomized_capacity_metric_specificationmetric_data_queriesmetric_stat","text":"Required: metric (Block List, Min: 1, Max: 1) (see below for nested schema ) stat (String) Optional: unit (String)","title":"Nested Schema for predictive_scaling_configuration.metric_specification.customized_capacity_metric_specification.metric_data_queries.metric_stat"},{"location":"resources/autoscaling_policy/#nested-schema-for-predictive_scaling_configurationmetric_specificationcustomized_capacity_metric_specificationmetric_data_queriesmetric_statmetric","text":"Required: metric_name (String) namespace (String) Optional: dimensions (Block Set) (see below for nested schema )","title":"Nested Schema for predictive_scaling_configuration.metric_specification.customized_capacity_metric_specification.metric_data_queries.metric_stat.metric"},{"location":"resources/autoscaling_policy/#nested-schema-for-predictive_scaling_configurationmetric_specificationcustomized_capacity_metric_specificationmetric_data_queriesmetric_statmetricdimensions","text":"Required: name (String) value (String)","title":"Nested Schema for predictive_scaling_configuration.metric_specification.customized_capacity_metric_specification.metric_data_queries.metric_stat.metric.dimensions"},{"location":"resources/autoscaling_policy/#nested-schema-for-predictive_scaling_configurationmetric_specificationcustomized_load_metric_specification","text":"Required: metric_data_queries (Block List, Min: 1, Max: 10) (see below for nested schema )","title":"Nested Schema for predictive_scaling_configuration.metric_specification.customized_load_metric_specification"},{"location":"resources/autoscaling_policy/#nested-schema-for-predictive_scaling_configurationmetric_specificationcustomized_load_metric_specificationmetric_data_queries","text":"Required: id (String) Optional: expression (String) label (String) metric_stat (Block List, Max: 1) (see below for nested schema ) return_data (Boolean)","title":"Nested Schema for predictive_scaling_configuration.metric_specification.customized_load_metric_specification.metric_data_queries"},{"location":"resources/autoscaling_policy/#nested-schema-for-predictive_scaling_configurationmetric_specificationcustomized_load_metric_specificationmetric_data_queriesmetric_stat","text":"Required: metric (Block List, Min: 1, Max: 1) (see below for nested schema ) stat (String) Optional: unit (String)","title":"Nested Schema for predictive_scaling_configuration.metric_specification.customized_load_metric_specification.metric_data_queries.metric_stat"},{"location":"resources/autoscaling_policy/#nested-schema-for-predictive_scaling_configurationmetric_specificationcustomized_load_metric_specificationmetric_data_queriesmetric_statmetric","text":"Required: metric_name (String) namespace (String) Optional: dimensions (Block Set) (see below for nested schema )","title":"Nested Schema for predictive_scaling_configuration.metric_specification.customized_load_metric_specification.metric_data_queries.metric_stat.metric"},{"location":"resources/autoscaling_policy/#nested-schema-for-predictive_scaling_configurationmetric_specificationcustomized_load_metric_specificationmetric_data_queriesmetric_statmetricdimensions","text":"Required: name (String) value (String)","title":"Nested Schema for predictive_scaling_configuration.metric_specification.customized_load_metric_specification.metric_data_queries.metric_stat.metric.dimensions"},{"location":"resources/autoscaling_policy/#nested-schema-for-predictive_scaling_configurationmetric_specificationcustomized_scaling_metric_specification","text":"Required: metric_data_queries (Block List, Min: 1, Max: 10) (see below for nested schema )","title":"Nested Schema for predictive_scaling_configuration.metric_specification.customized_scaling_metric_specification"},{"location":"resources/autoscaling_policy/#nested-schema-for-predictive_scaling_configurationmetric_specificationcustomized_scaling_metric_specificationmetric_data_queries","text":"Required: id (String) Optional: expression (String) label (String) metric_stat (Block List, Max: 1) (see below for nested schema ) return_data (Boolean)","title":"Nested Schema for predictive_scaling_configuration.metric_specification.customized_scaling_metric_specification.metric_data_queries"},{"location":"resources/autoscaling_policy/#nested-schema-for-predictive_scaling_configurationmetric_specificationcustomized_scaling_metric_specificationmetric_data_queriesmetric_stat","text":"Required: metric (Block List, Min: 1, Max: 1) (see below for nested schema ) stat (String) Optional: unit (String)","title":"Nested Schema for predictive_scaling_configuration.metric_specification.customized_scaling_metric_specification.metric_data_queries.metric_stat"},{"location":"resources/autoscaling_policy/#nested-schema-for-predictive_scaling_configurationmetric_specificationcustomized_scaling_metric_specificationmetric_data_queriesmetric_statmetric","text":"Required: metric_name (String) namespace (String) Optional: dimensions (Block Set) (see below for nested schema )","title":"Nested Schema for predictive_scaling_configuration.metric_specification.customized_scaling_metric_specification.metric_data_queries.metric_stat.metric"},{"location":"resources/autoscaling_policy/#nested-schema-for-predictive_scaling_configurationmetric_specificationcustomized_scaling_metric_specificationmetric_data_queriesmetric_statmetricdimensions","text":"Required: name (String) value (String)","title":"Nested Schema for predictive_scaling_configuration.metric_specification.customized_scaling_metric_specification.metric_data_queries.metric_stat.metric.dimensions"},{"location":"resources/autoscaling_policy/#nested-schema-for-predictive_scaling_configurationmetric_specificationpredefined_load_metric_specification","text":"Required: predefined_metric_type (String) resource_label (String)","title":"Nested Schema for predictive_scaling_configuration.metric_specification.predefined_load_metric_specification"},{"location":"resources/autoscaling_policy/#nested-schema-for-predictive_scaling_configurationmetric_specificationpredefined_metric_pair_specification","text":"Required: predefined_metric_type (String) resource_label (String)","title":"Nested Schema for predictive_scaling_configuration.metric_specification.predefined_metric_pair_specification"},{"location":"resources/autoscaling_policy/#nested-schema-for-predictive_scaling_configurationmetric_specificationpredefined_scaling_metric_specification","text":"Required: predefined_metric_type (String) resource_label (String)","title":"Nested Schema for predictive_scaling_configuration.metric_specification.predefined_scaling_metric_specification"},{"location":"resources/autoscaling_policy/#nested-schema-for-step_adjustment","text":"Required: scaling_adjustment (Number) Optional: metric_interval_lower_bound (String) metric_interval_upper_bound (String)","title":"Nested Schema for step_adjustment"},{"location":"resources/autoscaling_policy/#nested-schema-for-target_tracking_configuration","text":"Required: target_value (Number) Optional: customized_metric_specification (Block List, Max: 1) (see below for nested schema ) disable_scale_in (Boolean) predefined_metric_specification (Block List, Max: 1) (see below for nested schema )","title":"Nested Schema for target_tracking_configuration"},{"location":"resources/autoscaling_policy/#nested-schema-for-target_tracking_configurationcustomized_metric_specification","text":"Required: metric_name (String) namespace (String) statistic (String) Optional: metric_dimension (Block List) (see below for nested schema ) unit (String)","title":"Nested Schema for target_tracking_configuration.customized_metric_specification"},{"location":"resources/autoscaling_policy/#nested-schema-for-target_tracking_configurationcustomized_metric_specificationmetric_dimension","text":"Required: name (String) value (String)","title":"Nested Schema for target_tracking_configuration.customized_metric_specification.metric_dimension"},{"location":"resources/autoscaling_policy/#nested-schema-for-target_tracking_configurationpredefined_metric_specification","text":"Required: predefined_metric_type (String) Optional: resource_label (String)","title":"Nested Schema for target_tracking_configuration.predefined_metric_specification"},{"location":"resources/backup_plan/","text":"aws_backup_plan (Resource) # Schema # Required # name (String) rule (Block Set, Min: 1) (see below for nested schema ) Optional # advanced_backup_setting (Block Set) (see below for nested schema ) Read-Only # arn (String) id (String) The ID of this resource. version (String) Nested Schema for rule # Required: rule_name (String) target_vault_name (String) Optional: completion_window (Number) copy_action (Block Set) (see below for nested schema ) enable_continuous_backup (Boolean) lifecycle (Block List, Max: 1) (see below for nested schema ) recovery_point_tags (Map of String) schedule (String) start_window (Number) Nested Schema for rule.copy_action # Required: destination_vault_arn (String) Optional: lifecycle (Block List, Max: 1) (see below for nested schema ) Nested Schema for rule.copy_action.lifecycle # Optional: cold_storage_after (Number) delete_after (Number) Nested Schema for rule.lifecycle # Optional: cold_storage_after (Number) delete_after (Number) Nested Schema for advanced_backup_setting # Required: backup_options (Map of String) resource_type (String)","title":"aws_backup_plan (Resource)"},{"location":"resources/backup_plan/#aws_backup_plan-resource","text":"","title":"aws_backup_plan (Resource)"},{"location":"resources/backup_plan/#schema","text":"","title":"Schema"},{"location":"resources/backup_plan/#required","text":"name (String) rule (Block Set, Min: 1) (see below for nested schema )","title":"Required"},{"location":"resources/backup_plan/#optional","text":"advanced_backup_setting (Block Set) (see below for nested schema )","title":"Optional"},{"location":"resources/backup_plan/#read-only","text":"arn (String) id (String) The ID of this resource. version (String)","title":"Read-Only"},{"location":"resources/backup_plan/#nested-schema-for-rule","text":"Required: rule_name (String) target_vault_name (String) Optional: completion_window (Number) copy_action (Block Set) (see below for nested schema ) enable_continuous_backup (Boolean) lifecycle (Block List, Max: 1) (see below for nested schema ) recovery_point_tags (Map of String) schedule (String) start_window (Number)","title":"Nested Schema for rule"},{"location":"resources/backup_plan/#nested-schema-for-rulecopy_action","text":"Required: destination_vault_arn (String) Optional: lifecycle (Block List, Max: 1) (see below for nested schema )","title":"Nested Schema for rule.copy_action"},{"location":"resources/backup_plan/#nested-schema-for-rulecopy_actionlifecycle","text":"Optional: cold_storage_after (Number) delete_after (Number)","title":"Nested Schema for rule.copy_action.lifecycle"},{"location":"resources/backup_plan/#nested-schema-for-rulelifecycle","text":"Optional: cold_storage_after (Number) delete_after (Number)","title":"Nested Schema for rule.lifecycle"},{"location":"resources/backup_plan/#nested-schema-for-advanced_backup_setting","text":"Required: backup_options (Map of String) resource_type (String)","title":"Nested Schema for advanced_backup_setting"},{"location":"resources/backup_selection/","text":"aws_backup_selection (Resource) # Schema # Required # name (String) plan_id (String) resources (Set of String) Optional # condition (Block Set) (see below for nested schema ) not_resources (Set of String) selection_tag (Block Set) (see below for nested schema ) Read-Only # iam_role_arn (String) id (String) The ID of this resource. Nested Schema for condition # Optional: string_equals (Block Set) (see below for nested schema ) string_like (Block Set) (see below for nested schema ) string_not_equals (Block Set) (see below for nested schema ) string_not_like (Block Set) (see below for nested schema ) Nested Schema for condition.string_equals # Required: key (String) value (String) Nested Schema for condition.string_like # Required: key (String) value (String) Nested Schema for condition.string_not_equals # Required: key (String) value (String) Nested Schema for condition.string_not_like # Required: key (String) value (String) Nested Schema for selection_tag # Required: key (String) type (String) value (String)","title":"aws_backup_selection (Resource)"},{"location":"resources/backup_selection/#aws_backup_selection-resource","text":"","title":"aws_backup_selection (Resource)"},{"location":"resources/backup_selection/#schema","text":"","title":"Schema"},{"location":"resources/backup_selection/#required","text":"name (String) plan_id (String) resources (Set of String)","title":"Required"},{"location":"resources/backup_selection/#optional","text":"condition (Block Set) (see below for nested schema ) not_resources (Set of String) selection_tag (Block Set) (see below for nested schema )","title":"Optional"},{"location":"resources/backup_selection/#read-only","text":"iam_role_arn (String) id (String) The ID of this resource.","title":"Read-Only"},{"location":"resources/backup_selection/#nested-schema-for-condition","text":"Optional: string_equals (Block Set) (see below for nested schema ) string_like (Block Set) (see below for nested schema ) string_not_equals (Block Set) (see below for nested schema ) string_not_like (Block Set) (see below for nested schema )","title":"Nested Schema for condition"},{"location":"resources/backup_selection/#nested-schema-for-conditionstring_equals","text":"Required: key (String) value (String)","title":"Nested Schema for condition.string_equals"},{"location":"resources/backup_selection/#nested-schema-for-conditionstring_like","text":"Required: key (String) value (String)","title":"Nested Schema for condition.string_like"},{"location":"resources/backup_selection/#nested-schema-for-conditionstring_not_equals","text":"Required: key (String) value (String)","title":"Nested Schema for condition.string_not_equals"},{"location":"resources/backup_selection/#nested-schema-for-conditionstring_not_like","text":"Required: key (String) value (String)","title":"Nested Schema for condition.string_not_like"},{"location":"resources/backup_selection/#nested-schema-for-selection_tag","text":"Required: key (String) type (String) value (String)","title":"Nested Schema for selection_tag"},{"location":"resources/backup_vault_default/","text":"aws_backup_vault_default (Resource) # Schema # Read-Only # arn (String) id (String) The ID of this resource. name (String) recovery_points (Number)","title":"aws_backup_vault_default (Resource)"},{"location":"resources/backup_vault_default/#aws_backup_vault_default-resource","text":"","title":"aws_backup_vault_default (Resource)"},{"location":"resources/backup_vault_default/#schema","text":"","title":"Schema"},{"location":"resources/backup_vault_default/#read-only","text":"arn (String) id (String) The ID of this resource. name (String) recovery_points (Number)","title":"Read-Only"},{"location":"resources/customer_gateway/","text":"aws_customer_gateway (Resource) # Schema # Required # bgp_asn (String) ip_address (String) type (String) Optional # certificate_arn (String) device_name (String) tags (Map of String) tags_all (Map of String) Read-Only # arn (String) id (String) The ID of this resource.","title":"aws_customer_gateway (Resource)"},{"location":"resources/customer_gateway/#aws_customer_gateway-resource","text":"","title":"aws_customer_gateway (Resource)"},{"location":"resources/customer_gateway/#schema","text":"","title":"Schema"},{"location":"resources/customer_gateway/#required","text":"bgp_asn (String) ip_address (String) type (String)","title":"Required"},{"location":"resources/customer_gateway/#optional","text":"certificate_arn (String) device_name (String) tags (Map of String) tags_all (Map of String)","title":"Optional"},{"location":"resources/customer_gateway/#read-only","text":"arn (String) id (String) The ID of this resource.","title":"Read-Only"},{"location":"resources/default_network_acl/","text":"aws_default_network_acl (Resource) # Schema # Required # default_network_acl_id (String) Optional # egress (Block Set) (see below for nested schema ) ingress (Block Set) (see below for nested schema ) subnet_ids (Set of String) tags (Map of String) tags_all (Map of String) Read-Only # arn (String) id (String) The ID of this resource. owner_id (String) vpc_id (String) Nested Schema for egress # Required: action (String) from_port (Number) protocol (String) rule_no (Number) to_port (Number) Optional: cidr_block (String) icmp_code (Number) icmp_type (Number) ipv6_cidr_block (String) Nested Schema for ingress # Required: action (String) from_port (Number) protocol (String) rule_no (Number) to_port (Number) Optional: cidr_block (String) icmp_code (Number) icmp_type (Number) ipv6_cidr_block (String)","title":"aws_default_network_acl (Resource)"},{"location":"resources/default_network_acl/#aws_default_network_acl-resource","text":"","title":"aws_default_network_acl (Resource)"},{"location":"resources/default_network_acl/#schema","text":"","title":"Schema"},{"location":"resources/default_network_acl/#required","text":"default_network_acl_id (String)","title":"Required"},{"location":"resources/default_network_acl/#optional","text":"egress (Block Set) (see below for nested schema ) ingress (Block Set) (see below for nested schema ) subnet_ids (Set of String) tags (Map of String) tags_all (Map of String)","title":"Optional"},{"location":"resources/default_network_acl/#read-only","text":"arn (String) id (String) The ID of this resource. owner_id (String) vpc_id (String)","title":"Read-Only"},{"location":"resources/default_network_acl/#nested-schema-for-egress","text":"Required: action (String) from_port (Number) protocol (String) rule_no (Number) to_port (Number) Optional: cidr_block (String) icmp_code (Number) icmp_type (Number) ipv6_cidr_block (String)","title":"Nested Schema for egress"},{"location":"resources/default_network_acl/#nested-schema-for-ingress","text":"Required: action (String) from_port (Number) protocol (String) rule_no (Number) to_port (Number) Optional: cidr_block (String) icmp_code (Number) icmp_type (Number) ipv6_cidr_block (String)","title":"Nested Schema for ingress"},{"location":"resources/default_route_table/","text":"aws_default_route_table (Resource) # Schema # Required # default_route_table_id (String) Optional # propagating_vgws (Set of String) route (Set of Object) (see below for nested schema ) tags (Map of String) tags_all (Map of String) timeouts (Block, Optional) (see below for nested schema ) Read-Only # arn (String) id (String) The ID of this resource. owner_id (String) vpc_id (String) Nested Schema for route # Optional: cidr_block (String) core_network_arn (String) destination_prefix_list_id (String) egress_only_gateway_id (String) gateway_id (String) instance_id (String) ipv6_cidr_block (String) nat_gateway_id (String) network_interface_id (String) transit_gateway_id (String) vpc_endpoint_id (String) vpc_peering_connection_id (String) Nested Schema for timeouts # Optional: create (String) update (String)","title":"aws_default_route_table (Resource)"},{"location":"resources/default_route_table/#aws_default_route_table-resource","text":"","title":"aws_default_route_table (Resource)"},{"location":"resources/default_route_table/#schema","text":"","title":"Schema"},{"location":"resources/default_route_table/#required","text":"default_route_table_id (String)","title":"Required"},{"location":"resources/default_route_table/#optional","text":"propagating_vgws (Set of String) route (Set of Object) (see below for nested schema ) tags (Map of String) tags_all (Map of String) timeouts (Block, Optional) (see below for nested schema )","title":"Optional"},{"location":"resources/default_route_table/#read-only","text":"arn (String) id (String) The ID of this resource. owner_id (String) vpc_id (String)","title":"Read-Only"},{"location":"resources/default_route_table/#nested-schema-for-route","text":"Optional: cidr_block (String) core_network_arn (String) destination_prefix_list_id (String) egress_only_gateway_id (String) gateway_id (String) instance_id (String) ipv6_cidr_block (String) nat_gateway_id (String) network_interface_id (String) transit_gateway_id (String) vpc_endpoint_id (String) vpc_peering_connection_id (String)","title":"Nested Schema for route"},{"location":"resources/default_route_table/#nested-schema-for-timeouts","text":"Optional: create (String) update (String)","title":"Nested Schema for timeouts"},{"location":"resources/default_security_group/","text":"aws_default_security_group (Resource) # Schema # Optional # egress (Set of Object) (see below for nested schema ) ingress (Set of Object) (see below for nested schema ) revoke_rules_on_delete (Boolean) tags (Map of String) tags_all (Map of String) vpc_id (String) Read-Only # arn (String) description (String) id (String) The ID of this resource. name (String) owner_id (String) Nested Schema for egress # Optional: cidr_blocks (List of String) description (String) from_port (Number) ipv6_cidr_blocks (List of String) prefix_list_ids (List of String) protocol (String) security_groups (Set of String) self (Boolean) to_port (Number) Nested Schema for ingress # Optional: cidr_blocks (List of String) description (String) from_port (Number) ipv6_cidr_blocks (List of String) prefix_list_ids (List of String) protocol (String) security_groups (Set of String) self (Boolean) to_port (Number)","title":"aws_default_security_group (Resource)"},{"location":"resources/default_security_group/#aws_default_security_group-resource","text":"","title":"aws_default_security_group (Resource)"},{"location":"resources/default_security_group/#schema","text":"","title":"Schema"},{"location":"resources/default_security_group/#optional","text":"egress (Set of Object) (see below for nested schema ) ingress (Set of Object) (see below for nested schema ) revoke_rules_on_delete (Boolean) tags (Map of String) tags_all (Map of String) vpc_id (String)","title":"Optional"},{"location":"resources/default_security_group/#read-only","text":"arn (String) description (String) id (String) The ID of this resource. name (String) owner_id (String)","title":"Read-Only"},{"location":"resources/default_security_group/#nested-schema-for-egress","text":"Optional: cidr_blocks (List of String) description (String) from_port (Number) ipv6_cidr_blocks (List of String) prefix_list_ids (List of String) protocol (String) security_groups (Set of String) self (Boolean) to_port (Number)","title":"Nested Schema for egress"},{"location":"resources/default_security_group/#nested-schema-for-ingress","text":"Optional: cidr_blocks (List of String) description (String) from_port (Number) ipv6_cidr_blocks (List of String) prefix_list_ids (List of String) protocol (String) security_groups (Set of String) self (Boolean) to_port (Number)","title":"Nested Schema for ingress"},{"location":"resources/default_vpc/","text":"aws_default_vpc (Resource) # Schema # Optional # assign_generated_ipv6_cidr_block (Boolean) enable_classiclink (Boolean) enable_classiclink_dns_support (Boolean) enable_dns_hostnames (Boolean) enable_dns_support (Boolean) force_destroy (Boolean) ipv6_cidr_block (String) ipv6_cidr_block_network_border_group (String) ipv6_ipam_pool_id (String) ipv6_netmask_length (Number) tags (Map of String) tags_all (Map of String) Read-Only # arn (String) cidr_block (String) default_network_acl_id (String) default_route_table_id (String) default_security_group_id (String) dhcp_options_id (String) existing_default_vpc (Boolean) id (String) The ID of this resource. instance_tenancy (String) ipv6_association_id (String) main_route_table_id (String) owner_id (String)","title":"aws_default_vpc (Resource)"},{"location":"resources/default_vpc/#aws_default_vpc-resource","text":"","title":"aws_default_vpc (Resource)"},{"location":"resources/default_vpc/#schema","text":"","title":"Schema"},{"location":"resources/default_vpc/#optional","text":"assign_generated_ipv6_cidr_block (Boolean) enable_classiclink (Boolean) enable_classiclink_dns_support (Boolean) enable_dns_hostnames (Boolean) enable_dns_support (Boolean) force_destroy (Boolean) ipv6_cidr_block (String) ipv6_cidr_block_network_border_group (String) ipv6_ipam_pool_id (String) ipv6_netmask_length (Number) tags (Map of String) tags_all (Map of String)","title":"Optional"},{"location":"resources/default_vpc/#read-only","text":"arn (String) cidr_block (String) default_network_acl_id (String) default_route_table_id (String) default_security_group_id (String) dhcp_options_id (String) existing_default_vpc (Boolean) id (String) The ID of this resource. instance_tenancy (String) ipv6_association_id (String) main_route_table_id (String) owner_id (String)","title":"Read-Only"},{"location":"resources/default_vpc_dhcp_options/","text":"aws_default_vpc_dhcp_options (Resource) # Schema # Optional # netbios_name_servers (List of String) netbios_node_type (String) owner_id (String) tags (Map of String) tags_all (Map of String) Read-Only # arn (String) domain_name (String) domain_name_servers (String) id (String) The ID of this resource. ntp_servers (String)","title":"aws_default_vpc_dhcp_options (Resource)"},{"location":"resources/default_vpc_dhcp_options/#aws_default_vpc_dhcp_options-resource","text":"","title":"aws_default_vpc_dhcp_options (Resource)"},{"location":"resources/default_vpc_dhcp_options/#schema","text":"","title":"Schema"},{"location":"resources/default_vpc_dhcp_options/#optional","text":"netbios_name_servers (List of String) netbios_node_type (String) owner_id (String) tags (Map of String) tags_all (Map of String)","title":"Optional"},{"location":"resources/default_vpc_dhcp_options/#read-only","text":"arn (String) domain_name (String) domain_name_servers (String) id (String) The ID of this resource. ntp_servers (String)","title":"Read-Only"},{"location":"resources/ebs_snapshot/","text":"aws_ebs_snapshot (Resource) # Schema # Required # volume_id (String) Optional # description (String) outpost_arn (String) permanent_restore (Boolean) storage_tier (String) tags (Map of String) tags_all (Map of String) temporary_restore_days (Number) timeouts (Block, Optional) (see below for nested schema ) Read-Only # arn (String) data_encryption_key_id (String) encrypted (Boolean) id (String) The ID of this resource. kms_key_id (String) owner_alias (String) owner_id (String) volume_size (Number) Nested Schema for timeouts # Optional: create (String) delete (String)","title":"aws_ebs_snapshot (Resource)"},{"location":"resources/ebs_snapshot/#aws_ebs_snapshot-resource","text":"","title":"aws_ebs_snapshot (Resource)"},{"location":"resources/ebs_snapshot/#schema","text":"","title":"Schema"},{"location":"resources/ebs_snapshot/#required","text":"volume_id (String)","title":"Required"},{"location":"resources/ebs_snapshot/#optional","text":"description (String) outpost_arn (String) permanent_restore (Boolean) storage_tier (String) tags (Map of String) tags_all (Map of String) temporary_restore_days (Number) timeouts (Block, Optional) (see below for nested schema )","title":"Optional"},{"location":"resources/ebs_snapshot/#read-only","text":"arn (String) data_encryption_key_id (String) encrypted (Boolean) id (String) The ID of this resource. kms_key_id (String) owner_alias (String) owner_id (String) volume_size (Number)","title":"Read-Only"},{"location":"resources/ebs_snapshot/#nested-schema-for-timeouts","text":"Optional: create (String) delete (String)","title":"Nested Schema for timeouts"},{"location":"resources/ebs_snapshot_import/","text":"aws_ebs_snapshot_import (Resource) # Schema # Required # disk_container (Block List, Min: 1, Max: 1) (see below for nested schema ) Optional # client_data (Block List, Max: 1) (see below for nested schema ) description (String) encrypted (Boolean) kms_key_id (String) permanent_restore (Boolean) role_name (String) storage_tier (String) tags (Map of String) tags_all (Map of String) temporary_restore_days (Number) timeouts (Block, Optional) (see below for nested schema ) Read-Only # arn (String) data_encryption_key_id (String) id (String) The ID of this resource. outpost_arn (String) owner_alias (String) owner_id (String) volume_id (String) volume_size (Number) Nested Schema for disk_container # Required: format (String) Optional: description (String) url (String) user_bucket (Block List, Max: 1) (see below for nested schema ) Nested Schema for disk_container.user_bucket # Required: s3_bucket (String) s3_key (String) Nested Schema for client_data # Optional: comment (String) upload_end (String) upload_size (Number) upload_start (String) Nested Schema for timeouts # Optional: create (String) delete (String)","title":"aws_ebs_snapshot_import (Resource)"},{"location":"resources/ebs_snapshot_import/#aws_ebs_snapshot_import-resource","text":"","title":"aws_ebs_snapshot_import (Resource)"},{"location":"resources/ebs_snapshot_import/#schema","text":"","title":"Schema"},{"location":"resources/ebs_snapshot_import/#required","text":"disk_container (Block List, Min: 1, Max: 1) (see below for nested schema )","title":"Required"},{"location":"resources/ebs_snapshot_import/#optional","text":"client_data (Block List, Max: 1) (see below for nested schema ) description (String) encrypted (Boolean) kms_key_id (String) permanent_restore (Boolean) role_name (String) storage_tier (String) tags (Map of String) tags_all (Map of String) temporary_restore_days (Number) timeouts (Block, Optional) (see below for nested schema )","title":"Optional"},{"location":"resources/ebs_snapshot_import/#read-only","text":"arn (String) data_encryption_key_id (String) id (String) The ID of this resource. outpost_arn (String) owner_alias (String) owner_id (String) volume_id (String) volume_size (Number)","title":"Read-Only"},{"location":"resources/ebs_snapshot_import/#nested-schema-for-disk_container","text":"Required: format (String) Optional: description (String) url (String) user_bucket (Block List, Max: 1) (see below for nested schema )","title":"Nested Schema for disk_container"},{"location":"resources/ebs_snapshot_import/#nested-schema-for-disk_containeruser_bucket","text":"Required: s3_bucket (String) s3_key (String)","title":"Nested Schema for disk_container.user_bucket"},{"location":"resources/ebs_snapshot_import/#nested-schema-for-client_data","text":"Optional: comment (String) upload_end (String) upload_size (Number) upload_start (String)","title":"Nested Schema for client_data"},{"location":"resources/ebs_snapshot_import/#nested-schema-for-timeouts","text":"Optional: create (String) delete (String)","title":"Nested Schema for timeouts"},{"location":"resources/ebs_volume/","text":"aws_ebs_volume (Resource) # Schema # Required # availability_zone (String) Optional # encrypted (Boolean) iops (Number) kms_key_id (String) multi_attach_enabled (Boolean) outpost_arn (String) size (Number) snapshot_id (String) tags (Map of String) tags_all (Map of String) throughput (Number) timeouts (Block, Optional) (see below for nested schema ) type (String) Read-Only # arn (String) id (String) The ID of this resource. Nested Schema for timeouts # Optional: create (String) delete (String) update (String)","title":"aws_ebs_volume (Resource)"},{"location":"resources/ebs_volume/#aws_ebs_volume-resource","text":"","title":"aws_ebs_volume (Resource)"},{"location":"resources/ebs_volume/#schema","text":"","title":"Schema"},{"location":"resources/ebs_volume/#required","text":"availability_zone (String)","title":"Required"},{"location":"resources/ebs_volume/#optional","text":"encrypted (Boolean) iops (Number) kms_key_id (String) multi_attach_enabled (Boolean) outpost_arn (String) size (Number) snapshot_id (String) tags (Map of String) tags_all (Map of String) throughput (Number) timeouts (Block, Optional) (see below for nested schema ) type (String)","title":"Optional"},{"location":"resources/ebs_volume/#read-only","text":"arn (String) id (String) The ID of this resource.","title":"Read-Only"},{"location":"resources/ebs_volume/#nested-schema-for-timeouts","text":"Optional: create (String) delete (String) update (String)","title":"Nested Schema for timeouts"},{"location":"resources/ec2_tag/","text":"aws_ec2_tag (Resource) # Schema # Required # key (String) resource_id (String) value (String) Read-Only # id (String) The ID of this resource.","title":"aws_ec2_tag (Resource)"},{"location":"resources/ec2_tag/#aws_ec2_tag-resource","text":"","title":"aws_ec2_tag (Resource)"},{"location":"resources/ec2_tag/#schema","text":"","title":"Schema"},{"location":"resources/ec2_tag/#required","text":"key (String) resource_id (String) value (String)","title":"Required"},{"location":"resources/ec2_tag/#read-only","text":"id (String) The ID of this resource.","title":"Read-Only"},{"location":"resources/ec2_transit_gateway/","text":"aws_ec2_transit_gateway (Resource) # Schema # Optional # amazon_side_asn (Number) auto_accept_shared_attachments (String) default_route_table_association (String) default_route_table_propagation (String) description (String) dns_support (String) multicast_support (String) shared_owners (Set of String) tags (Map of String) tags_all (Map of String) timeouts (Block, Optional) (see below for nested schema ) transit_gateway_cidr_blocks (Set of String) vpn_ecmp_support (String) Read-Only # arn (String) association_default_route_table_id (String) id (String) The ID of this resource. owner_id (String) propagation_default_route_table_id (String) Nested Schema for timeouts # Optional: create (String) delete (String) update (String)","title":"aws_ec2_transit_gateway (Resource)"},{"location":"resources/ec2_transit_gateway/#aws_ec2_transit_gateway-resource","text":"","title":"aws_ec2_transit_gateway (Resource)"},{"location":"resources/ec2_transit_gateway/#schema","text":"","title":"Schema"},{"location":"resources/ec2_transit_gateway/#optional","text":"amazon_side_asn (Number) auto_accept_shared_attachments (String) default_route_table_association (String) default_route_table_propagation (String) description (String) dns_support (String) multicast_support (String) shared_owners (Set of String) tags (Map of String) tags_all (Map of String) timeouts (Block, Optional) (see below for nested schema ) transit_gateway_cidr_blocks (Set of String) vpn_ecmp_support (String)","title":"Optional"},{"location":"resources/ec2_transit_gateway/#read-only","text":"arn (String) association_default_route_table_id (String) id (String) The ID of this resource. owner_id (String) propagation_default_route_table_id (String)","title":"Read-Only"},{"location":"resources/ec2_transit_gateway/#nested-schema-for-timeouts","text":"Optional: create (String) delete (String) update (String)","title":"Nested Schema for timeouts"},{"location":"resources/ec2_transit_gateway_route/","text":"aws_ec2_transit_gateway_route (Resource) # Schema # Required # destination_cidr_block (String) transit_gateway_route_table_id (String) Optional # blackhole (Boolean) transit_gateway_attachment_id (String) Read-Only # id (String) The ID of this resource.","title":"aws_ec2_transit_gateway_route (Resource)"},{"location":"resources/ec2_transit_gateway_route/#aws_ec2_transit_gateway_route-resource","text":"","title":"aws_ec2_transit_gateway_route (Resource)"},{"location":"resources/ec2_transit_gateway_route/#schema","text":"","title":"Schema"},{"location":"resources/ec2_transit_gateway_route/#required","text":"destination_cidr_block (String) transit_gateway_route_table_id (String)","title":"Required"},{"location":"resources/ec2_transit_gateway_route/#optional","text":"blackhole (Boolean) transit_gateway_attachment_id (String)","title":"Optional"},{"location":"resources/ec2_transit_gateway_route/#read-only","text":"id (String) The ID of this resource.","title":"Read-Only"},{"location":"resources/ec2_transit_gateway_route_table/","text":"aws_ec2_transit_gateway_route_table (Resource) # Schema # Required # transit_gateway_id (String) Optional # tags (Map of String) tags_all (Map of String) Read-Only # arn (String) default_association_route_table (Boolean) default_propagation_route_table (Boolean) id (String) The ID of this resource.","title":"aws_ec2_transit_gateway_route_table (Resource)"},{"location":"resources/ec2_transit_gateway_route_table/#aws_ec2_transit_gateway_route_table-resource","text":"","title":"aws_ec2_transit_gateway_route_table (Resource)"},{"location":"resources/ec2_transit_gateway_route_table/#schema","text":"","title":"Schema"},{"location":"resources/ec2_transit_gateway_route_table/#required","text":"transit_gateway_id (String)","title":"Required"},{"location":"resources/ec2_transit_gateway_route_table/#optional","text":"tags (Map of String) tags_all (Map of String)","title":"Optional"},{"location":"resources/ec2_transit_gateway_route_table/#read-only","text":"arn (String) default_association_route_table (Boolean) default_propagation_route_table (Boolean) id (String) The ID of this resource.","title":"Read-Only"},{"location":"resources/ec2_transit_gateway_route_table_association/","text":"aws_ec2_transit_gateway_route_table_association (Resource) # Schema # Required # transit_gateway_attachment_id (String) transit_gateway_route_table_id (String) Read-Only # id (String) The ID of this resource. resource_id (String) resource_type (String)","title":"aws_ec2_transit_gateway_route_table_association (Resource)"},{"location":"resources/ec2_transit_gateway_route_table_association/#aws_ec2_transit_gateway_route_table_association-resource","text":"","title":"aws_ec2_transit_gateway_route_table_association (Resource)"},{"location":"resources/ec2_transit_gateway_route_table_association/#schema","text":"","title":"Schema"},{"location":"resources/ec2_transit_gateway_route_table_association/#required","text":"transit_gateway_attachment_id (String) transit_gateway_route_table_id (String)","title":"Required"},{"location":"resources/ec2_transit_gateway_route_table_association/#read-only","text":"id (String) The ID of this resource. resource_id (String) resource_type (String)","title":"Read-Only"},{"location":"resources/ec2_transit_gateway_route_table_propagation/","text":"aws_ec2_transit_gateway_route_table_propagation (Resource) # Schema # Required # transit_gateway_attachment_id (String) transit_gateway_route_table_id (String) Read-Only # id (String) The ID of this resource. resource_id (String) resource_type (String)","title":"aws_ec2_transit_gateway_route_table_propagation (Resource)"},{"location":"resources/ec2_transit_gateway_route_table_propagation/#aws_ec2_transit_gateway_route_table_propagation-resource","text":"","title":"aws_ec2_transit_gateway_route_table_propagation (Resource)"},{"location":"resources/ec2_transit_gateway_route_table_propagation/#schema","text":"","title":"Schema"},{"location":"resources/ec2_transit_gateway_route_table_propagation/#required","text":"transit_gateway_attachment_id (String) transit_gateway_route_table_id (String)","title":"Required"},{"location":"resources/ec2_transit_gateway_route_table_propagation/#read-only","text":"id (String) The ID of this resource. resource_id (String) resource_type (String)","title":"Read-Only"},{"location":"resources/ec2_transit_gateway_vpc_attachment/","text":"aws_ec2_transit_gateway_vpc_attachment (Resource) # Schema # Required # subnet_ids (Set of String) transit_gateway_id (String) vpc_id (String) Optional # appliance_mode_support (String) dns_support (String) ipv6_support (String) tags (Map of String) tags_all (Map of String) transit_gateway_default_route_table_association (Boolean) transit_gateway_default_route_table_propagation (Boolean) Read-Only # id (String) The ID of this resource. vpc_owner_id (String)","title":"aws_ec2_transit_gateway_vpc_attachment (Resource)"},{"location":"resources/ec2_transit_gateway_vpc_attachment/#aws_ec2_transit_gateway_vpc_attachment-resource","text":"","title":"aws_ec2_transit_gateway_vpc_attachment (Resource)"},{"location":"resources/ec2_transit_gateway_vpc_attachment/#schema","text":"","title":"Schema"},{"location":"resources/ec2_transit_gateway_vpc_attachment/#required","text":"subnet_ids (Set of String) transit_gateway_id (String) vpc_id (String)","title":"Required"},{"location":"resources/ec2_transit_gateway_vpc_attachment/#optional","text":"appliance_mode_support (String) dns_support (String) ipv6_support (String) tags (Map of String) tags_all (Map of String) transit_gateway_default_route_table_association (Boolean) transit_gateway_default_route_table_propagation (Boolean)","title":"Optional"},{"location":"resources/ec2_transit_gateway_vpc_attachment/#read-only","text":"id (String) The ID of this resource. vpc_owner_id (String)","title":"Read-Only"},{"location":"resources/eip/","text":"aws_eip (Resource) # Schema # Optional # address (String) associate_with_private_ip (String) customer_owned_ipv4_pool (String) instance (String) network_border_group (String) network_interface (String) public_ipv4_pool (String) tags (Map of String) tags_all (Map of String) timeouts (Block, Optional) (see below for nested schema ) vpc (Boolean) Read-Only # allocation_id (String) association_id (String) carrier_ip (String) customer_owned_ip (String) domain (String) id (String) The ID of this resource. private_dns (String) private_ip (String) public_dns (String) public_ip (String) Nested Schema for timeouts # Optional: delete (String) read (String) update (String)","title":"aws_eip (Resource)"},{"location":"resources/eip/#aws_eip-resource","text":"","title":"aws_eip (Resource)"},{"location":"resources/eip/#schema","text":"","title":"Schema"},{"location":"resources/eip/#optional","text":"address (String) associate_with_private_ip (String) customer_owned_ipv4_pool (String) instance (String) network_border_group (String) network_interface (String) public_ipv4_pool (String) tags (Map of String) tags_all (Map of String) timeouts (Block, Optional) (see below for nested schema ) vpc (Boolean)","title":"Optional"},{"location":"resources/eip/#read-only","text":"allocation_id (String) association_id (String) carrier_ip (String) customer_owned_ip (String) domain (String) id (String) The ID of this resource. private_dns (String) private_ip (String) public_dns (String) public_ip (String)","title":"Read-Only"},{"location":"resources/eip/#nested-schema-for-timeouts","text":"Optional: delete (String) read (String) update (String)","title":"Nested Schema for timeouts"},{"location":"resources/eip_association/","text":"aws_eip_association (Resource) # Schema # Optional # allocation_id (String) allow_reassociation (Boolean) instance_id (String) network_interface_id (String) private_ip_address (String) public_ip (String) Read-Only # id (String) The ID of this resource.","title":"aws_eip_association (Resource)"},{"location":"resources/eip_association/#aws_eip_association-resource","text":"","title":"aws_eip_association (Resource)"},{"location":"resources/eip_association/#schema","text":"","title":"Schema"},{"location":"resources/eip_association/#optional","text":"allocation_id (String) allow_reassociation (Boolean) instance_id (String) network_interface_id (String) private_ip_address (String) public_ip (String)","title":"Optional"},{"location":"resources/eip_association/#read-only","text":"id (String) The ID of this resource.","title":"Read-Only"},{"location":"resources/eks_cluster/","text":"aws_eks_cluster (Resource) # Schema # Required # name (String) version (String) vpc_config (Block List, Min: 1, Max: 1) (see below for nested schema ) Optional # enabled_cluster_log_types (Set of String) encryption_config (Block List, Max: 1) (see below for nested schema ) kubernetes_network_config (Block List, Max: 1) (see below for nested schema ) role_arn (String) tags (Map of String) tags_all (Map of String) timeouts (Block, Optional) (see below for nested schema ) Read-Only # arn (String) certificate_authority (List of Object) (see below for nested schema ) created_at (String) endpoint (String) id (String) The ID of this resource. identity (List of Object) (see below for nested schema ) platform_version (String) status (String) Nested Schema for vpc_config # Required: subnet_ids (Set of String) Optional: endpoint_private_access (Boolean) endpoint_public_access (Boolean) public_access_cidrs (Set of String) security_group_ids (Set of String) Read-Only: cluster_security_group_id (String) vpc_id (String) Nested Schema for encryption_config # Required: provider (Block List, Min: 1, Max: 1) (see below for nested schema ) resources (Set of String) Nested Schema for encryption_config.provider # Required: key_arn (String) Nested Schema for kubernetes_network_config # Optional: ip_family (String) service_ipv4_cidr (String) Nested Schema for timeouts # Optional: create (String) delete (String) update (String) Nested Schema for certificate_authority # Read-Only: data (String) Nested Schema for identity # Read-Only: oidc (List of Object) (see below for nested schema ) Nested Schema for identity.oidc # Read-Only: issuer (String)","title":"aws_eks_cluster (Resource)"},{"location":"resources/eks_cluster/#aws_eks_cluster-resource","text":"","title":"aws_eks_cluster (Resource)"},{"location":"resources/eks_cluster/#schema","text":"","title":"Schema"},{"location":"resources/eks_cluster/#required","text":"name (String) version (String) vpc_config (Block List, Min: 1, Max: 1) (see below for nested schema )","title":"Required"},{"location":"resources/eks_cluster/#optional","text":"enabled_cluster_log_types (Set of String) encryption_config (Block List, Max: 1) (see below for nested schema ) kubernetes_network_config (Block List, Max: 1) (see below for nested schema ) role_arn (String) tags (Map of String) tags_all (Map of String) timeouts (Block, Optional) (see below for nested schema )","title":"Optional"},{"location":"resources/eks_cluster/#read-only","text":"arn (String) certificate_authority (List of Object) (see below for nested schema ) created_at (String) endpoint (String) id (String) The ID of this resource. identity (List of Object) (see below for nested schema ) platform_version (String) status (String)","title":"Read-Only"},{"location":"resources/eks_cluster/#nested-schema-for-vpc_config","text":"Required: subnet_ids (Set of String) Optional: endpoint_private_access (Boolean) endpoint_public_access (Boolean) public_access_cidrs (Set of String) security_group_ids (Set of String) Read-Only: cluster_security_group_id (String) vpc_id (String)","title":"Nested Schema for vpc_config"},{"location":"resources/eks_cluster/#nested-schema-for-encryption_config","text":"Required: provider (Block List, Min: 1, Max: 1) (see below for nested schema ) resources (Set of String)","title":"Nested Schema for encryption_config"},{"location":"resources/eks_cluster/#nested-schema-for-encryption_configprovider","text":"Required: key_arn (String)","title":"Nested Schema for encryption_config.provider"},{"location":"resources/eks_cluster/#nested-schema-for-kubernetes_network_config","text":"Optional: ip_family (String) service_ipv4_cidr (String)","title":"Nested Schema for kubernetes_network_config"},{"location":"resources/eks_cluster/#nested-schema-for-timeouts","text":"Optional: create (String) delete (String) update (String)","title":"Nested Schema for timeouts"},{"location":"resources/eks_cluster/#nested-schema-for-certificate_authority","text":"Read-Only: data (String)","title":"Nested Schema for certificate_authority"},{"location":"resources/eks_cluster/#nested-schema-for-identity","text":"Read-Only: oidc (List of Object) (see below for nested schema )","title":"Nested Schema for identity"},{"location":"resources/eks_cluster/#nested-schema-for-identityoidc","text":"Read-Only: issuer (String)","title":"Nested Schema for identity.oidc"},{"location":"resources/eks_node_group/","text":"aws_eks_node_group (Resource) # Schema # Required # cluster_name (String) scaling_config (Block List, Min: 1, Max: 1) (see below for nested schema ) subnet_ids (Set of String) Optional # ami_type (String) capacity_type (String) disk_size (Number) force_update_version (Boolean) instance_types (List of String) labels (Map of String) launch_template (Block List, Max: 1) (see below for nested schema ) node_group_name (String) node_group_name_prefix (String) node_role_arn (String) release_version (String) remote_access (Block List, Max: 1) (see below for nested schema ) tags (Map of String) tags_all (Map of String) taint (Block Set, Max: 50) (see below for nested schema ) timeouts (Block, Optional) (see below for nested schema ) update_config (Block List, Max: 1) (see below for nested schema ) version (String) Read-Only # arn (String) id (String) The ID of this resource. resources (List of Object) (see below for nested schema ) status (String) Nested Schema for scaling_config # Required: desired_size (Number) max_size (Number) min_size (Number) Nested Schema for launch_template # Required: version (String) Optional: id (String) name (String) Nested Schema for remote_access # Optional: ec2_ssh_key (String) source_security_group_ids (Set of String) Nested Schema for taint # Required: effect (String) key (String) Optional: value (String) Nested Schema for timeouts # Optional: create (String) delete (String) update (String) Nested Schema for update_config # Optional: max_unavailable (Number) max_unavailable_percentage (Number) Nested Schema for resources # Read-Only: autoscaling_groups (List of Object) (see below for nested schema ) remote_access_security_group_id (String) Nested Schema for resources.autoscaling_groups # Read-Only: name (String)","title":"aws_eks_node_group (Resource)"},{"location":"resources/eks_node_group/#aws_eks_node_group-resource","text":"","title":"aws_eks_node_group (Resource)"},{"location":"resources/eks_node_group/#schema","text":"","title":"Schema"},{"location":"resources/eks_node_group/#required","text":"cluster_name (String) scaling_config (Block List, Min: 1, Max: 1) (see below for nested schema ) subnet_ids (Set of String)","title":"Required"},{"location":"resources/eks_node_group/#optional","text":"ami_type (String) capacity_type (String) disk_size (Number) force_update_version (Boolean) instance_types (List of String) labels (Map of String) launch_template (Block List, Max: 1) (see below for nested schema ) node_group_name (String) node_group_name_prefix (String) node_role_arn (String) release_version (String) remote_access (Block List, Max: 1) (see below for nested schema ) tags (Map of String) tags_all (Map of String) taint (Block Set, Max: 50) (see below for nested schema ) timeouts (Block, Optional) (see below for nested schema ) update_config (Block List, Max: 1) (see below for nested schema ) version (String)","title":"Optional"},{"location":"resources/eks_node_group/#read-only","text":"arn (String) id (String) The ID of this resource. resources (List of Object) (see below for nested schema ) status (String)","title":"Read-Only"},{"location":"resources/eks_node_group/#nested-schema-for-scaling_config","text":"Required: desired_size (Number) max_size (Number) min_size (Number)","title":"Nested Schema for scaling_config"},{"location":"resources/eks_node_group/#nested-schema-for-launch_template","text":"Required: version (String) Optional: id (String) name (String)","title":"Nested Schema for launch_template"},{"location":"resources/eks_node_group/#nested-schema-for-remote_access","text":"Optional: ec2_ssh_key (String) source_security_group_ids (Set of String)","title":"Nested Schema for remote_access"},{"location":"resources/eks_node_group/#nested-schema-for-taint","text":"Required: effect (String) key (String) Optional: value (String)","title":"Nested Schema for taint"},{"location":"resources/eks_node_group/#nested-schema-for-timeouts","text":"Optional: create (String) delete (String) update (String)","title":"Nested Schema for timeouts"},{"location":"resources/eks_node_group/#nested-schema-for-update_config","text":"Optional: max_unavailable (Number) max_unavailable_percentage (Number)","title":"Nested Schema for update_config"},{"location":"resources/eks_node_group/#nested-schema-for-resources","text":"Read-Only: autoscaling_groups (List of Object) (see below for nested schema ) remote_access_security_group_id (String)","title":"Nested Schema for resources"},{"location":"resources/eks_node_group/#nested-schema-for-resourcesautoscaling_groups","text":"Read-Only: name (String)","title":"Nested Schema for resources.autoscaling_groups"},{"location":"resources/iam_group/","text":"aws_iam_group (Resource) # Schema # Required # name (String) type (String) Optional # path (String) Read-Only # arn (String) create_date (String) group_id (String) id (String) The ID of this resource. owner (String)","title":"aws_iam_group (Resource)"},{"location":"resources/iam_group/#aws_iam_group-resource","text":"","title":"aws_iam_group (Resource)"},{"location":"resources/iam_group/#schema","text":"","title":"Schema"},{"location":"resources/iam_group/#required","text":"name (String) type (String)","title":"Required"},{"location":"resources/iam_group/#optional","text":"path (String)","title":"Optional"},{"location":"resources/iam_group/#read-only","text":"arn (String) create_date (String) group_id (String) id (String) The ID of this resource. owner (String)","title":"Read-Only"},{"location":"resources/iam_group_membership/","text":"aws_iam_group_membership (Resource) # Schema # Required # group_arn (String) name (String) users (Set of String) Optional # project (String) Read-Only # id (String) The ID of this resource.","title":"aws_iam_group_membership (Resource)"},{"location":"resources/iam_group_membership/#aws_iam_group_membership-resource","text":"","title":"aws_iam_group_membership (Resource)"},{"location":"resources/iam_group_membership/#schema","text":"","title":"Schema"},{"location":"resources/iam_group_membership/#required","text":"group_arn (String) name (String) users (Set of String)","title":"Required"},{"location":"resources/iam_group_membership/#optional","text":"project (String)","title":"Optional"},{"location":"resources/iam_group_membership/#read-only","text":"id (String) The ID of this resource.","title":"Read-Only"},{"location":"resources/iam_group_policy_attachment/","text":"aws_iam_group_policy_attachment (Resource) # Schema # Required # group_arn (String) policy_arn (String) Read-Only # id (String) The ID of this resource.","title":"aws_iam_group_policy_attachment (Resource)"},{"location":"resources/iam_group_policy_attachment/#aws_iam_group_policy_attachment-resource","text":"","title":"aws_iam_group_policy_attachment (Resource)"},{"location":"resources/iam_group_policy_attachment/#schema","text":"","title":"Schema"},{"location":"resources/iam_group_policy_attachment/#required","text":"group_arn (String) policy_arn (String)","title":"Required"},{"location":"resources/iam_group_policy_attachment/#read-only","text":"id (String) The ID of this resource.","title":"Read-Only"},{"location":"resources/iam_policy/","text":"aws_iam_policy (Resource) # Schema # Required # policy (String) type (String) Optional # description (String) name (String) name_prefix (String) path (String) Read-Only # arn (String) create_date (String) id (String) The ID of this resource. owner (String) policy_id (String) update_date (String)","title":"aws_iam_policy (Resource)"},{"location":"resources/iam_policy/#aws_iam_policy-resource","text":"","title":"aws_iam_policy (Resource)"},{"location":"resources/iam_policy/#schema","text":"","title":"Schema"},{"location":"resources/iam_policy/#required","text":"policy (String) type (String)","title":"Required"},{"location":"resources/iam_policy/#optional","text":"description (String) name (String) name_prefix (String) path (String)","title":"Optional"},{"location":"resources/iam_policy/#read-only","text":"arn (String) create_date (String) id (String) The ID of this resource. owner (String) policy_id (String) update_date (String)","title":"Read-Only"},{"location":"resources/iam_project/","text":"aws_iam_project (Resource) # Schema # Required # name (String) Optional # display_name (String) Read-Only # arn (String) create_date (String) id (String) The ID of this resource. project_id (String) s3_email (String) state (String)","title":"aws_iam_project (Resource)"},{"location":"resources/iam_project/#aws_iam_project-resource","text":"","title":"aws_iam_project (Resource)"},{"location":"resources/iam_project/#schema","text":"","title":"Schema"},{"location":"resources/iam_project/#required","text":"name (String)","title":"Required"},{"location":"resources/iam_project/#optional","text":"display_name (String)","title":"Optional"},{"location":"resources/iam_project/#read-only","text":"arn (String) create_date (String) id (String) The ID of this resource. project_id (String) s3_email (String) state (String)","title":"Read-Only"},{"location":"resources/iam_user/","text":"aws_iam_user (Resource) # Schema # Required # name (String) Optional # display_name (String) email (String) force_destroy (Boolean) Delete user even if it has non-Terraform-managed IAM access keys, login profile or MFA devices otp_required (Boolean) password (String, Sensitive) path (String) permissions_boundary (String) phone (String) Read-Only # arn (String) enabled (Boolean) id (String) The ID of this resource. last_login_date (String) login (String) secret_key (String, Sensitive) update_date (String) user_id (String)","title":"aws_iam_user (Resource)"},{"location":"resources/iam_user/#aws_iam_user-resource","text":"","title":"aws_iam_user (Resource)"},{"location":"resources/iam_user/#schema","text":"","title":"Schema"},{"location":"resources/iam_user/#required","text":"name (String)","title":"Required"},{"location":"resources/iam_user/#optional","text":"display_name (String) email (String) force_destroy (Boolean) Delete user even if it has non-Terraform-managed IAM access keys, login profile or MFA devices otp_required (Boolean) password (String, Sensitive) path (String) permissions_boundary (String) phone (String)","title":"Optional"},{"location":"resources/iam_user/#read-only","text":"arn (String) enabled (Boolean) id (String) The ID of this resource. last_login_date (String) login (String) secret_key (String, Sensitive) update_date (String) user_id (String)","title":"Read-Only"},{"location":"resources/iam_user_group_membership/","text":"aws_iam_user_group_membership (Resource) # Schema # Required # group_arns (Set of String) user (String) Optional # project (String) Read-Only # id (String) The ID of this resource.","title":"aws_iam_user_group_membership (Resource)"},{"location":"resources/iam_user_group_membership/#aws_iam_user_group_membership-resource","text":"","title":"aws_iam_user_group_membership (Resource)"},{"location":"resources/iam_user_group_membership/#schema","text":"","title":"Schema"},{"location":"resources/iam_user_group_membership/#required","text":"group_arns (Set of String) user (String)","title":"Required"},{"location":"resources/iam_user_group_membership/#optional","text":"project (String)","title":"Optional"},{"location":"resources/iam_user_group_membership/#read-only","text":"id (String) The ID of this resource.","title":"Read-Only"},{"location":"resources/iam_user_policy_attachment/","text":"aws_iam_user_policy_attachment (Resource) # Schema # Required # policy_arn (String) user (String) Optional # project (String) Read-Only # id (String) The ID of this resource.","title":"aws_iam_user_policy_attachment (Resource)"},{"location":"resources/iam_user_policy_attachment/#aws_iam_user_policy_attachment-resource","text":"","title":"aws_iam_user_policy_attachment (Resource)"},{"location":"resources/iam_user_policy_attachment/#schema","text":"","title":"Schema"},{"location":"resources/iam_user_policy_attachment/#required","text":"policy_arn (String) user (String)","title":"Required"},{"location":"resources/iam_user_policy_attachment/#optional","text":"project (String)","title":"Optional"},{"location":"resources/iam_user_policy_attachment/#read-only","text":"id (String) The ID of this resource.","title":"Read-Only"},{"location":"resources/instance/","text":"aws_instance (Resource) # Schema # Optional # affinity (String) ami (String) associate_public_ip_address (Boolean) availability_zone (String) capacity_reservation_specification (Block List, Max: 1) (see below for nested schema ) cpu_core_count (Number) cpu_threads_per_core (Number) credit_specification (Block List, Max: 1) (see below for nested schema ) disable_api_termination (Boolean) ebs_block_device (Block Set) (see below for nested schema ) ebs_optimized (Boolean) enclave_options (Block List, Max: 1) (see below for nested schema ) ephemeral_block_device (Block Set) (see below for nested schema ) get_password_data (Boolean) hibernation (Boolean) host_id (String) iam_instance_profile (String) instance_initiated_shutdown_behavior (String) instance_type (String) ipv6_address_count (Number) ipv6_addresses (List of String) key_name (String) launch_template (Block List, Max: 1) (see below for nested schema ) maintenance_options (Block List, Max: 1) (see below for nested schema ) metadata_options (Block List, Max: 1) (see below for nested schema ) monitoring (Boolean) network_interface (Block Set) (see below for nested schema ) placement_group (String) placement_partition_number (Number) private_ip (String) root_block_device (Block List, Max: 1) (see below for nested schema ) secondary_private_ips (Set of String) security_groups (Set of String) source_dest_check (Boolean) subnet_id (String) tags (Map of String) tags_all (Map of String) tenancy (String) timeouts (Block, Optional) (see below for nested schema ) user_data (String) user_data_base64 (String) user_data_replace_on_change (Boolean) volume_tags (Map of String) vpc_security_group_ids (Set of String) Read-Only # arn (String) id (String) The ID of this resource. instance_state (String) outpost_arn (String) password_data (String) primary_network_interface_id (String) private_dns (String) public_dns (String) public_ip (String) Nested Schema for capacity_reservation_specification # Optional: capacity_reservation_preference (String) capacity_reservation_target (Block List, Max: 1) (see below for nested schema ) Nested Schema for capacity_reservation_specification.capacity_reservation_target # Optional: capacity_reservation_id (String) capacity_reservation_resource_group_arn (String) Nested Schema for credit_specification # Optional: cpu_credits (String) Nested Schema for ebs_block_device # Required: device_name (String) Optional: delete_on_termination (Boolean) encrypted (Boolean) iops (Number) kms_key_id (String) snapshot_id (String) tags (Map of String) throughput (Number) volume_size (Number) volume_type (String) Read-Only: volume_id (String) Nested Schema for enclave_options # Optional: enabled (Boolean) Nested Schema for ephemeral_block_device # Required: device_name (String) Optional: no_device (Boolean) virtual_name (String) Nested Schema for launch_template # Optional: id (String) name (String) version (String) Nested Schema for maintenance_options # Optional: auto_recovery (String) Nested Schema for metadata_options # Optional: http_endpoint (String) http_put_response_hop_limit (Number) http_tokens (String) instance_metadata_tags (String) Nested Schema for network_interface # Required: device_index (Number) network_interface_id (String) Optional: delete_on_termination (Boolean) network_card_index (Number) Nested Schema for root_block_device # Optional: delete_on_termination (Boolean) encrypted (Boolean) iops (Number) kms_key_id (String) tags (Map of String) throughput (Number) volume_size (Number) volume_type (String) Read-Only: device_name (String) volume_id (String) Nested Schema for timeouts # Optional: create (String) delete (String) update (String)","title":"aws_instance (Resource)"},{"location":"resources/instance/#aws_instance-resource","text":"","title":"aws_instance (Resource)"},{"location":"resources/instance/#schema","text":"","title":"Schema"},{"location":"resources/instance/#optional","text":"affinity (String) ami (String) associate_public_ip_address (Boolean) availability_zone (String) capacity_reservation_specification (Block List, Max: 1) (see below for nested schema ) cpu_core_count (Number) cpu_threads_per_core (Number) credit_specification (Block List, Max: 1) (see below for nested schema ) disable_api_termination (Boolean) ebs_block_device (Block Set) (see below for nested schema ) ebs_optimized (Boolean) enclave_options (Block List, Max: 1) (see below for nested schema ) ephemeral_block_device (Block Set) (see below for nested schema ) get_password_data (Boolean) hibernation (Boolean) host_id (String) iam_instance_profile (String) instance_initiated_shutdown_behavior (String) instance_type (String) ipv6_address_count (Number) ipv6_addresses (List of String) key_name (String) launch_template (Block List, Max: 1) (see below for nested schema ) maintenance_options (Block List, Max: 1) (see below for nested schema ) metadata_options (Block List, Max: 1) (see below for nested schema ) monitoring (Boolean) network_interface (Block Set) (see below for nested schema ) placement_group (String) placement_partition_number (Number) private_ip (String) root_block_device (Block List, Max: 1) (see below for nested schema ) secondary_private_ips (Set of String) security_groups (Set of String) source_dest_check (Boolean) subnet_id (String) tags (Map of String) tags_all (Map of String) tenancy (String) timeouts (Block, Optional) (see below for nested schema ) user_data (String) user_data_base64 (String) user_data_replace_on_change (Boolean) volume_tags (Map of String) vpc_security_group_ids (Set of String)","title":"Optional"},{"location":"resources/instance/#read-only","text":"arn (String) id (String) The ID of this resource. instance_state (String) outpost_arn (String) password_data (String) primary_network_interface_id (String) private_dns (String) public_dns (String) public_ip (String)","title":"Read-Only"},{"location":"resources/instance/#nested-schema-for-capacity_reservation_specification","text":"Optional: capacity_reservation_preference (String) capacity_reservation_target (Block List, Max: 1) (see below for nested schema )","title":"Nested Schema for capacity_reservation_specification"},{"location":"resources/instance/#nested-schema-for-capacity_reservation_specificationcapacity_reservation_target","text":"Optional: capacity_reservation_id (String) capacity_reservation_resource_group_arn (String)","title":"Nested Schema for capacity_reservation_specification.capacity_reservation_target"},{"location":"resources/instance/#nested-schema-for-credit_specification","text":"Optional: cpu_credits (String)","title":"Nested Schema for credit_specification"},{"location":"resources/instance/#nested-schema-for-ebs_block_device","text":"Required: device_name (String) Optional: delete_on_termination (Boolean) encrypted (Boolean) iops (Number) kms_key_id (String) snapshot_id (String) tags (Map of String) throughput (Number) volume_size (Number) volume_type (String) Read-Only: volume_id (String)","title":"Nested Schema for ebs_block_device"},{"location":"resources/instance/#nested-schema-for-enclave_options","text":"Optional: enabled (Boolean)","title":"Nested Schema for enclave_options"},{"location":"resources/instance/#nested-schema-for-ephemeral_block_device","text":"Required: device_name (String) Optional: no_device (Boolean) virtual_name (String)","title":"Nested Schema for ephemeral_block_device"},{"location":"resources/instance/#nested-schema-for-launch_template","text":"Optional: id (String) name (String) version (String)","title":"Nested Schema for launch_template"},{"location":"resources/instance/#nested-schema-for-maintenance_options","text":"Optional: auto_recovery (String)","title":"Nested Schema for maintenance_options"},{"location":"resources/instance/#nested-schema-for-metadata_options","text":"Optional: http_endpoint (String) http_put_response_hop_limit (Number) http_tokens (String) instance_metadata_tags (String)","title":"Nested Schema for metadata_options"},{"location":"resources/instance/#nested-schema-for-network_interface","text":"Required: device_index (Number) network_interface_id (String) Optional: delete_on_termination (Boolean) network_card_index (Number)","title":"Nested Schema for network_interface"},{"location":"resources/instance/#nested-schema-for-root_block_device","text":"Optional: delete_on_termination (Boolean) encrypted (Boolean) iops (Number) kms_key_id (String) tags (Map of String) throughput (Number) volume_size (Number) volume_type (String) Read-Only: device_name (String) volume_id (String)","title":"Nested Schema for root_block_device"},{"location":"resources/instance/#nested-schema-for-timeouts","text":"Optional: create (String) delete (String) update (String)","title":"Nested Schema for timeouts"},{"location":"resources/key_pair/","text":"aws_key_pair (Resource) # Schema # Required # public_key (String) Optional # key_name (String) key_name_prefix (String) tags (Map of String) tags_all (Map of String) Read-Only # arn (String) fingerprint (String) id (String) The ID of this resource. key_pair_id (String)","title":"aws_key_pair (Resource)"},{"location":"resources/key_pair/#aws_key_pair-resource","text":"","title":"aws_key_pair (Resource)"},{"location":"resources/key_pair/#schema","text":"","title":"Schema"},{"location":"resources/key_pair/#required","text":"public_key (String)","title":"Required"},{"location":"resources/key_pair/#optional","text":"key_name (String) key_name_prefix (String) tags (Map of String) tags_all (Map of String)","title":"Optional"},{"location":"resources/key_pair/#read-only","text":"arn (String) fingerprint (String) id (String) The ID of this resource. key_pair_id (String)","title":"Read-Only"},{"location":"resources/launch_template/","text":"aws_launch_template (Resource) # Schema # Optional # block_device_mappings (Block List) (see below for nested schema ) capacity_reservation_specification (Block List, Max: 1) (see below for nested schema ) cpu_options (Block List, Max: 1) (see below for nested schema ) credit_specification (Block List, Max: 1) (see below for nested schema ) default_version (Number) description (String) disable_api_termination (Boolean) ebs_optimized (String) elastic_gpu_specifications (Block List) (see below for nested schema ) elastic_inference_accelerator (Block List, Max: 1) (see below for nested schema ) enclave_options (Block List, Max: 1) (see below for nested schema ) hibernation_options (Block List, Max: 1) (see below for nested schema ) iam_instance_profile (Block List, Max: 1) (see below for nested schema ) image_id (String) instance_initiated_shutdown_behavior (String) instance_market_options (Block List, Max: 1) (see below for nested schema ) instance_requirements (Block List, Max: 1) (see below for nested schema ) instance_type (String) kernel_id (String) key_name (String) license_specification (Block Set) (see below for nested schema ) maintenance_options (Block List, Max: 1) (see below for nested schema ) metadata_options (Block List, Max: 1) (see below for nested schema ) monitoring (Block List, Max: 1) (see below for nested schema ) name (String) name_prefix (String) network_interfaces (Block List) (see below for nested schema ) placement (Block List, Max: 1) (see below for nested schema ) private_dns_name_options (Block List, Max: 1) (see below for nested schema ) ram_disk_id (String) security_group_names (Set of String) tag_specifications (Block List) (see below for nested schema ) tags (Map of String) tags_all (Map of String) update_default_version (Boolean) user_data (String) vpc_security_group_ids (Set of String) Read-Only # arn (String) id (String) The ID of this resource. latest_version (Number) Nested Schema for block_device_mappings # Optional: device_name (String) ebs (Block List, Max: 1) (see below for nested schema ) no_device (String) virtual_name (String) Nested Schema for block_device_mappings.ebs # Optional: delete_on_termination (String) encrypted (String) iops (Number) kms_key_id (String) snapshot_id (String) throughput (Number) volume_size (Number) volume_type (String) Nested Schema for capacity_reservation_specification # Optional: capacity_reservation_preference (String) capacity_reservation_target (Block List, Max: 1) (see below for nested schema ) Nested Schema for capacity_reservation_specification.capacity_reservation_target # Optional: capacity_reservation_id (String) capacity_reservation_resource_group_arn (String) Nested Schema for cpu_options # Optional: core_count (Number) threads_per_core (Number) Nested Schema for credit_specification # Optional: cpu_credits (String) Nested Schema for elastic_gpu_specifications # Required: type (String) Nested Schema for elastic_inference_accelerator # Required: type (String) Nested Schema for enclave_options # Optional: enabled (Boolean) Nested Schema for hibernation_options # Required: configured (Boolean) Nested Schema for iam_instance_profile # Optional: arn (String) name (String) Nested Schema for instance_market_options # Optional: market_type (String) spot_options (Block List, Max: 1) (see below for nested schema ) Nested Schema for instance_market_options.spot_options # Optional: block_duration_minutes (Number) instance_interruption_behavior (String) max_price (String) spot_instance_type (String) valid_until (String) Nested Schema for instance_requirements # Required: memory_mib (Block List, Min: 1, Max: 1) (see below for nested schema ) vcpu_count (Block List, Min: 1, Max: 1) (see below for nested schema ) Optional: accelerator_count (Block List, Max: 1) (see below for nested schema ) accelerator_manufacturers (Set of String) accelerator_names (Set of String) accelerator_total_memory_mib (Block List, Max: 1) (see below for nested schema ) accelerator_types (Set of String) bare_metal (String) baseline_ebs_bandwidth_mbps (Block List, Max: 1) (see below for nested schema ) burstable_performance (String) cpu_manufacturers (Set of String) excluded_instance_types (Set of String) instance_generations (Set of String) local_storage (String) local_storage_types (Set of String) memory_gib_per_vcpu (Block List, Max: 1) (see below for nested schema ) network_interface_count (Block List, Max: 1) (see below for nested schema ) on_demand_max_price_percentage_over_lowest_price (Number) require_hibernate_support (Boolean) spot_max_price_percentage_over_lowest_price (Number) total_local_storage_gb (Block List, Max: 1) (see below for nested schema ) Nested Schema for instance_requirements.memory_mib # Required: min (Number) Optional: max (Number) Nested Schema for instance_requirements.vcpu_count # Required: min (Number) Optional: max (Number) Nested Schema for instance_requirements.accelerator_count # Optional: max (Number) min (Number) Nested Schema for instance_requirements.accelerator_total_memory_mib # Optional: max (Number) min (Number) Nested Schema for instance_requirements.baseline_ebs_bandwidth_mbps # Optional: max (Number) min (Number) Nested Schema for instance_requirements.memory_gib_per_vcpu # Optional: max (Number) min (Number) Nested Schema for instance_requirements.network_interface_count # Optional: max (Number) min (Number) Nested Schema for instance_requirements.total_local_storage_gb # Optional: max (Number) min (Number) Nested Schema for license_specification # Required: license_configuration_arn (String) Nested Schema for maintenance_options # Optional: auto_recovery (String) Nested Schema for metadata_options # Optional: http_endpoint (String) http_protocol_ipv6 (String) http_put_response_hop_limit (Number) http_tokens (String) instance_metadata_tags (String) Nested Schema for monitoring # Optional: enabled (Boolean) Nested Schema for network_interfaces # Optional: associate_carrier_ip_address (String) associate_public_ip_address (String) delete_on_termination (String) description (String) device_index (Number) interface_type (String) ipv4_address_count (Number) ipv4_addresses (Set of String) ipv4_prefix_count (Number) ipv4_prefixes (Set of String) ipv6_address_count (Number) ipv6_addresses (Set of String) ipv6_prefix_count (Number) ipv6_prefixes (Set of String) network_card_index (Number) network_interface_id (String) private_ip_address (String) security_groups (Set of String) subnet_id (String) Nested Schema for placement # Optional: affinity (String) availability_zone (String) group_name (String) host_id (String) host_resource_group_arn (String) partition_number (Number) spread_domain (String) tenancy (String) Nested Schema for private_dns_name_options # Optional: enable_resource_name_dns_a_record (Boolean) enable_resource_name_dns_aaaa_record (Boolean) hostname_type (String) Nested Schema for tag_specifications # Optional: resource_type (String) tags (Map of String)","title":"aws_launch_template (Resource)"},{"location":"resources/launch_template/#aws_launch_template-resource","text":"","title":"aws_launch_template (Resource)"},{"location":"resources/launch_template/#schema","text":"","title":"Schema"},{"location":"resources/launch_template/#optional","text":"block_device_mappings (Block List) (see below for nested schema ) capacity_reservation_specification (Block List, Max: 1) (see below for nested schema ) cpu_options (Block List, Max: 1) (see below for nested schema ) credit_specification (Block List, Max: 1) (see below for nested schema ) default_version (Number) description (String) disable_api_termination (Boolean) ebs_optimized (String) elastic_gpu_specifications (Block List) (see below for nested schema ) elastic_inference_accelerator (Block List, Max: 1) (see below for nested schema ) enclave_options (Block List, Max: 1) (see below for nested schema ) hibernation_options (Block List, Max: 1) (see below for nested schema ) iam_instance_profile (Block List, Max: 1) (see below for nested schema ) image_id (String) instance_initiated_shutdown_behavior (String) instance_market_options (Block List, Max: 1) (see below for nested schema ) instance_requirements (Block List, Max: 1) (see below for nested schema ) instance_type (String) kernel_id (String) key_name (String) license_specification (Block Set) (see below for nested schema ) maintenance_options (Block List, Max: 1) (see below for nested schema ) metadata_options (Block List, Max: 1) (see below for nested schema ) monitoring (Block List, Max: 1) (see below for nested schema ) name (String) name_prefix (String) network_interfaces (Block List) (see below for nested schema ) placement (Block List, Max: 1) (see below for nested schema ) private_dns_name_options (Block List, Max: 1) (see below for nested schema ) ram_disk_id (String) security_group_names (Set of String) tag_specifications (Block List) (see below for nested schema ) tags (Map of String) tags_all (Map of String) update_default_version (Boolean) user_data (String) vpc_security_group_ids (Set of String)","title":"Optional"},{"location":"resources/launch_template/#read-only","text":"arn (String) id (String) The ID of this resource. latest_version (Number)","title":"Read-Only"},{"location":"resources/launch_template/#nested-schema-for-block_device_mappings","text":"Optional: device_name (String) ebs (Block List, Max: 1) (see below for nested schema ) no_device (String) virtual_name (String)","title":"Nested Schema for block_device_mappings"},{"location":"resources/launch_template/#nested-schema-for-block_device_mappingsebs","text":"Optional: delete_on_termination (String) encrypted (String) iops (Number) kms_key_id (String) snapshot_id (String) throughput (Number) volume_size (Number) volume_type (String)","title":"Nested Schema for block_device_mappings.ebs"},{"location":"resources/launch_template/#nested-schema-for-capacity_reservation_specification","text":"Optional: capacity_reservation_preference (String) capacity_reservation_target (Block List, Max: 1) (see below for nested schema )","title":"Nested Schema for capacity_reservation_specification"},{"location":"resources/launch_template/#nested-schema-for-capacity_reservation_specificationcapacity_reservation_target","text":"Optional: capacity_reservation_id (String) capacity_reservation_resource_group_arn (String)","title":"Nested Schema for capacity_reservation_specification.capacity_reservation_target"},{"location":"resources/launch_template/#nested-schema-for-cpu_options","text":"Optional: core_count (Number) threads_per_core (Number)","title":"Nested Schema for cpu_options"},{"location":"resources/launch_template/#nested-schema-for-credit_specification","text":"Optional: cpu_credits (String)","title":"Nested Schema for credit_specification"},{"location":"resources/launch_template/#nested-schema-for-elastic_gpu_specifications","text":"Required: type (String)","title":"Nested Schema for elastic_gpu_specifications"},{"location":"resources/launch_template/#nested-schema-for-elastic_inference_accelerator","text":"Required: type (String)","title":"Nested Schema for elastic_inference_accelerator"},{"location":"resources/launch_template/#nested-schema-for-enclave_options","text":"Optional: enabled (Boolean)","title":"Nested Schema for enclave_options"},{"location":"resources/launch_template/#nested-schema-for-hibernation_options","text":"Required: configured (Boolean)","title":"Nested Schema for hibernation_options"},{"location":"resources/launch_template/#nested-schema-for-iam_instance_profile","text":"Optional: arn (String) name (String)","title":"Nested Schema for iam_instance_profile"},{"location":"resources/launch_template/#nested-schema-for-instance_market_options","text":"Optional: market_type (String) spot_options (Block List, Max: 1) (see below for nested schema )","title":"Nested Schema for instance_market_options"},{"location":"resources/launch_template/#nested-schema-for-instance_market_optionsspot_options","text":"Optional: block_duration_minutes (Number) instance_interruption_behavior (String) max_price (String) spot_instance_type (String) valid_until (String)","title":"Nested Schema for instance_market_options.spot_options"},{"location":"resources/launch_template/#nested-schema-for-instance_requirements","text":"Required: memory_mib (Block List, Min: 1, Max: 1) (see below for nested schema ) vcpu_count (Block List, Min: 1, Max: 1) (see below for nested schema ) Optional: accelerator_count (Block List, Max: 1) (see below for nested schema ) accelerator_manufacturers (Set of String) accelerator_names (Set of String) accelerator_total_memory_mib (Block List, Max: 1) (see below for nested schema ) accelerator_types (Set of String) bare_metal (String) baseline_ebs_bandwidth_mbps (Block List, Max: 1) (see below for nested schema ) burstable_performance (String) cpu_manufacturers (Set of String) excluded_instance_types (Set of String) instance_generations (Set of String) local_storage (String) local_storage_types (Set of String) memory_gib_per_vcpu (Block List, Max: 1) (see below for nested schema ) network_interface_count (Block List, Max: 1) (see below for nested schema ) on_demand_max_price_percentage_over_lowest_price (Number) require_hibernate_support (Boolean) spot_max_price_percentage_over_lowest_price (Number) total_local_storage_gb (Block List, Max: 1) (see below for nested schema )","title":"Nested Schema for instance_requirements"},{"location":"resources/launch_template/#nested-schema-for-instance_requirementsmemory_mib","text":"Required: min (Number) Optional: max (Number)","title":"Nested Schema for instance_requirements.memory_mib"},{"location":"resources/launch_template/#nested-schema-for-instance_requirementsvcpu_count","text":"Required: min (Number) Optional: max (Number)","title":"Nested Schema for instance_requirements.vcpu_count"},{"location":"resources/launch_template/#nested-schema-for-instance_requirementsaccelerator_count","text":"Optional: max (Number) min (Number)","title":"Nested Schema for instance_requirements.accelerator_count"},{"location":"resources/launch_template/#nested-schema-for-instance_requirementsaccelerator_total_memory_mib","text":"Optional: max (Number) min (Number)","title":"Nested Schema for instance_requirements.accelerator_total_memory_mib"},{"location":"resources/launch_template/#nested-schema-for-instance_requirementsbaseline_ebs_bandwidth_mbps","text":"Optional: max (Number) min (Number)","title":"Nested Schema for instance_requirements.baseline_ebs_bandwidth_mbps"},{"location":"resources/launch_template/#nested-schema-for-instance_requirementsmemory_gib_per_vcpu","text":"Optional: max (Number) min (Number)","title":"Nested Schema for instance_requirements.memory_gib_per_vcpu"},{"location":"resources/launch_template/#nested-schema-for-instance_requirementsnetwork_interface_count","text":"Optional: max (Number) min (Number)","title":"Nested Schema for instance_requirements.network_interface_count"},{"location":"resources/launch_template/#nested-schema-for-instance_requirementstotal_local_storage_gb","text":"Optional: max (Number) min (Number)","title":"Nested Schema for instance_requirements.total_local_storage_gb"},{"location":"resources/launch_template/#nested-schema-for-license_specification","text":"Required: license_configuration_arn (String)","title":"Nested Schema for license_specification"},{"location":"resources/launch_template/#nested-schema-for-maintenance_options","text":"Optional: auto_recovery (String)","title":"Nested Schema for maintenance_options"},{"location":"resources/launch_template/#nested-schema-for-metadata_options","text":"Optional: http_endpoint (String) http_protocol_ipv6 (String) http_put_response_hop_limit (Number) http_tokens (String) instance_metadata_tags (String)","title":"Nested Schema for metadata_options"},{"location":"resources/launch_template/#nested-schema-for-monitoring","text":"Optional: enabled (Boolean)","title":"Nested Schema for monitoring"},{"location":"resources/launch_template/#nested-schema-for-network_interfaces","text":"Optional: associate_carrier_ip_address (String) associate_public_ip_address (String) delete_on_termination (String) description (String) device_index (Number) interface_type (String) ipv4_address_count (Number) ipv4_addresses (Set of String) ipv4_prefix_count (Number) ipv4_prefixes (Set of String) ipv6_address_count (Number) ipv6_addresses (Set of String) ipv6_prefix_count (Number) ipv6_prefixes (Set of String) network_card_index (Number) network_interface_id (String) private_ip_address (String) security_groups (Set of String) subnet_id (String)","title":"Nested Schema for network_interfaces"},{"location":"resources/launch_template/#nested-schema-for-placement","text":"Optional: affinity (String) availability_zone (String) group_name (String) host_id (String) host_resource_group_arn (String) partition_number (Number) spread_domain (String) tenancy (String)","title":"Nested Schema for placement"},{"location":"resources/launch_template/#nested-schema-for-private_dns_name_options","text":"Optional: enable_resource_name_dns_a_record (Boolean) enable_resource_name_dns_aaaa_record (Boolean) hostname_type (String)","title":"Nested Schema for private_dns_name_options"},{"location":"resources/launch_template/#nested-schema-for-tag_specifications","text":"Optional: resource_type (String) tags (Map of String)","title":"Nested Schema for tag_specifications"},{"location":"resources/lb/","text":"aws_lb (Resource) # Schema # Optional # access_logs (Block List, Max: 1) (see below for nested schema ) customer_owned_ipv4_pool (String) desync_mitigation_mode (String) drop_invalid_header_fields (Boolean) enable_cross_zone_load_balancing (Boolean) enable_deletion_protection (Boolean) enable_http2 (Boolean) enable_waf_fail_open (Boolean) idle_timeout (Number) internal (Boolean) ip_address_type (String) load_balancer_type (String) name (String) name_prefix (String) security_groups (Set of String) subnet_mapping (Block Set) (see below for nested schema ) subnets (Set of String) tags (Map of String) tags_all (Map of String) timeouts (Block, Optional) (see below for nested schema ) Read-Only # arn (String) arn_suffix (String) dns_name (String) id (String) The ID of this resource. vpc_id (String) zone_id (String) Nested Schema for access_logs # Required: bucket (String) Optional: enabled (Boolean) prefix (String) Nested Schema for subnet_mapping # Required: subnet_id (String) Optional: allocation_id (String) ipv6_address (String) private_ipv4_address (String) Read-Only: outpost_id (String) Nested Schema for timeouts # Optional: create (String) delete (String) update (String)","title":"aws_lb (Resource)"},{"location":"resources/lb/#aws_lb-resource","text":"","title":"aws_lb (Resource)"},{"location":"resources/lb/#schema","text":"","title":"Schema"},{"location":"resources/lb/#optional","text":"access_logs (Block List, Max: 1) (see below for nested schema ) customer_owned_ipv4_pool (String) desync_mitigation_mode (String) drop_invalid_header_fields (Boolean) enable_cross_zone_load_balancing (Boolean) enable_deletion_protection (Boolean) enable_http2 (Boolean) enable_waf_fail_open (Boolean) idle_timeout (Number) internal (Boolean) ip_address_type (String) load_balancer_type (String) name (String) name_prefix (String) security_groups (Set of String) subnet_mapping (Block Set) (see below for nested schema ) subnets (Set of String) tags (Map of String) tags_all (Map of String) timeouts (Block, Optional) (see below for nested schema )","title":"Optional"},{"location":"resources/lb/#read-only","text":"arn (String) arn_suffix (String) dns_name (String) id (String) The ID of this resource. vpc_id (String) zone_id (String)","title":"Read-Only"},{"location":"resources/lb/#nested-schema-for-access_logs","text":"Required: bucket (String) Optional: enabled (Boolean) prefix (String)","title":"Nested Schema for access_logs"},{"location":"resources/lb/#nested-schema-for-subnet_mapping","text":"Required: subnet_id (String) Optional: allocation_id (String) ipv6_address (String) private_ipv4_address (String) Read-Only: outpost_id (String)","title":"Nested Schema for subnet_mapping"},{"location":"resources/lb/#nested-schema-for-timeouts","text":"Optional: create (String) delete (String) update (String)","title":"Nested Schema for timeouts"},{"location":"resources/lb_listener/","text":"aws_lb_listener (Resource) # Schema # Required # default_action (Block List, Min: 1) (see below for nested schema ) load_balancer_arn (String) Optional # alpn_policy (String) certificate_arn (String) port (Number) protocol (String) ssl_policy (String) tags (Map of String) tags_all (Map of String) timeouts (Block, Optional) (see below for nested schema ) Read-Only # arn (String) id (String) The ID of this resource. Nested Schema for default_action # Required: type (String) Optional: authenticate_cognito (Block List, Max: 1) (see below for nested schema ) authenticate_oidc (Block List, Max: 1) (see below for nested schema ) fixed_response (Block List, Max: 1) (see below for nested schema ) forward (Block List, Max: 1) (see below for nested schema ) order (Number) redirect (Block List, Max: 1) (see below for nested schema ) target_group_arn (String) Nested Schema for default_action.authenticate_cognito # Required: user_pool_arn (String) user_pool_client_id (String) user_pool_domain (String) Optional: authentication_request_extra_params (Map of String) on_unauthenticated_request (String) scope (String) session_cookie_name (String) session_timeout (Number) Nested Schema for default_action.authenticate_oidc # Required: authorization_endpoint (String) client_id (String) client_secret (String, Sensitive) issuer (String) token_endpoint (String) user_info_endpoint (String) Optional: authentication_request_extra_params (Map of String) on_unauthenticated_request (String) scope (String) session_cookie_name (String) session_timeout (Number) Nested Schema for default_action.fixed_response # Required: content_type (String) Optional: message_body (String) status_code (String) Nested Schema for default_action.forward # Required: target_group (Block Set, Min: 1, Max: 5) (see below for nested schema ) Optional: stickiness (Block List, Max: 1) (see below for nested schema ) Nested Schema for default_action.forward.target_group # Required: arn (String) Optional: weight (Number) Nested Schema for default_action.forward.stickiness # Required: duration (Number) Optional: enabled (Boolean) Nested Schema for default_action.redirect # Required: status_code (String) Optional: host (String) path (String) port (String) protocol (String) query (String) Nested Schema for timeouts # Optional: read (String)","title":"aws_lb_listener (Resource)"},{"location":"resources/lb_listener/#aws_lb_listener-resource","text":"","title":"aws_lb_listener (Resource)"},{"location":"resources/lb_listener/#schema","text":"","title":"Schema"},{"location":"resources/lb_listener/#required","text":"default_action (Block List, Min: 1) (see below for nested schema ) load_balancer_arn (String)","title":"Required"},{"location":"resources/lb_listener/#optional","text":"alpn_policy (String) certificate_arn (String) port (Number) protocol (String) ssl_policy (String) tags (Map of String) tags_all (Map of String) timeouts (Block, Optional) (see below for nested schema )","title":"Optional"},{"location":"resources/lb_listener/#read-only","text":"arn (String) id (String) The ID of this resource.","title":"Read-Only"},{"location":"resources/lb_listener/#nested-schema-for-default_action","text":"Required: type (String) Optional: authenticate_cognito (Block List, Max: 1) (see below for nested schema ) authenticate_oidc (Block List, Max: 1) (see below for nested schema ) fixed_response (Block List, Max: 1) (see below for nested schema ) forward (Block List, Max: 1) (see below for nested schema ) order (Number) redirect (Block List, Max: 1) (see below for nested schema ) target_group_arn (String)","title":"Nested Schema for default_action"},{"location":"resources/lb_listener/#nested-schema-for-default_actionauthenticate_cognito","text":"Required: user_pool_arn (String) user_pool_client_id (String) user_pool_domain (String) Optional: authentication_request_extra_params (Map of String) on_unauthenticated_request (String) scope (String) session_cookie_name (String) session_timeout (Number)","title":"Nested Schema for default_action.authenticate_cognito"},{"location":"resources/lb_listener/#nested-schema-for-default_actionauthenticate_oidc","text":"Required: authorization_endpoint (String) client_id (String) client_secret (String, Sensitive) issuer (String) token_endpoint (String) user_info_endpoint (String) Optional: authentication_request_extra_params (Map of String) on_unauthenticated_request (String) scope (String) session_cookie_name (String) session_timeout (Number)","title":"Nested Schema for default_action.authenticate_oidc"},{"location":"resources/lb_listener/#nested-schema-for-default_actionfixed_response","text":"Required: content_type (String) Optional: message_body (String) status_code (String)","title":"Nested Schema for default_action.fixed_response"},{"location":"resources/lb_listener/#nested-schema-for-default_actionforward","text":"Required: target_group (Block Set, Min: 1, Max: 5) (see below for nested schema ) Optional: stickiness (Block List, Max: 1) (see below for nested schema )","title":"Nested Schema for default_action.forward"},{"location":"resources/lb_listener/#nested-schema-for-default_actionforwardtarget_group","text":"Required: arn (String) Optional: weight (Number)","title":"Nested Schema for default_action.forward.target_group"},{"location":"resources/lb_listener/#nested-schema-for-default_actionforwardstickiness","text":"Required: duration (Number) Optional: enabled (Boolean)","title":"Nested Schema for default_action.forward.stickiness"},{"location":"resources/lb_listener/#nested-schema-for-default_actionredirect","text":"Required: status_code (String) Optional: host (String) path (String) port (String) protocol (String) query (String)","title":"Nested Schema for default_action.redirect"},{"location":"resources/lb_listener/#nested-schema-for-timeouts","text":"Optional: read (String)","title":"Nested Schema for timeouts"},{"location":"resources/lb_target_group/","text":"aws_lb_target_group (Resource) # Schema # Optional # connection_termination (Boolean) deregistration_delay (String) health_check (Block List, Max: 1) (see below for nested schema ) lambda_multi_value_headers_enabled (Boolean) load_balancing_algorithm_type (String) name (String) name_prefix (String) port (Number) preserve_client_ip (String) protocol (String) protocol_version (String) proxy_protocol_v2 (Boolean) slow_start (Number) stickiness (Block List, Max: 1) (see below for nested schema ) tags (Map of String) tags_all (Map of String) target_type (String) vpc_id (String) Read-Only # arn (String) arn_suffix (String) id (String) The ID of this resource. Nested Schema for health_check # Optional: enabled (Boolean) healthy_threshold (Number) interval (Number) matcher (String) path (String) port (String) protocol (String) timeout (Number) unhealthy_threshold (Number) Nested Schema for stickiness # Required: type (String) Optional: cookie_duration (Number) cookie_name (String) enabled (Boolean)","title":"aws_lb_target_group (Resource)"},{"location":"resources/lb_target_group/#aws_lb_target_group-resource","text":"","title":"aws_lb_target_group (Resource)"},{"location":"resources/lb_target_group/#schema","text":"","title":"Schema"},{"location":"resources/lb_target_group/#optional","text":"connection_termination (Boolean) deregistration_delay (String) health_check (Block List, Max: 1) (see below for nested schema ) lambda_multi_value_headers_enabled (Boolean) load_balancing_algorithm_type (String) name (String) name_prefix (String) port (Number) preserve_client_ip (String) protocol (String) protocol_version (String) proxy_protocol_v2 (Boolean) slow_start (Number) stickiness (Block List, Max: 1) (see below for nested schema ) tags (Map of String) tags_all (Map of String) target_type (String) vpc_id (String)","title":"Optional"},{"location":"resources/lb_target_group/#read-only","text":"arn (String) arn_suffix (String) id (String) The ID of this resource.","title":"Read-Only"},{"location":"resources/lb_target_group/#nested-schema-for-health_check","text":"Optional: enabled (Boolean) healthy_threshold (Number) interval (Number) matcher (String) path (String) port (String) protocol (String) timeout (Number) unhealthy_threshold (Number)","title":"Nested Schema for health_check"},{"location":"resources/lb_target_group/#nested-schema-for-stickiness","text":"Required: type (String) Optional: cookie_duration (Number) cookie_name (String) enabled (Boolean)","title":"Nested Schema for stickiness"},{"location":"resources/lb_target_group_attachment/","text":"aws_lb_target_group_attachment (Resource) # Schema # Required # target_group_arn (String) target_id (String) Optional # availability_zone (String) port (Number) Read-Only # id (String) The ID of this resource.","title":"aws_lb_target_group_attachment (Resource)"},{"location":"resources/lb_target_group_attachment/#aws_lb_target_group_attachment-resource","text":"","title":"aws_lb_target_group_attachment (Resource)"},{"location":"resources/lb_target_group_attachment/#schema","text":"","title":"Schema"},{"location":"resources/lb_target_group_attachment/#required","text":"target_group_arn (String) target_id (String)","title":"Required"},{"location":"resources/lb_target_group_attachment/#optional","text":"availability_zone (String) port (Number)","title":"Optional"},{"location":"resources/lb_target_group_attachment/#read-only","text":"id (String) The ID of this resource.","title":"Read-Only"},{"location":"resources/main_route_table_association/","text":"aws_main_route_table_association (Resource) # Schema # Required # route_table_id (String) vpc_id (String) Read-Only # id (String) The ID of this resource. original_route_table_id (String)","title":"aws_main_route_table_association (Resource)"},{"location":"resources/main_route_table_association/#aws_main_route_table_association-resource","text":"","title":"aws_main_route_table_association (Resource)"},{"location":"resources/main_route_table_association/#schema","text":"","title":"Schema"},{"location":"resources/main_route_table_association/#required","text":"route_table_id (String) vpc_id (String)","title":"Required"},{"location":"resources/main_route_table_association/#read-only","text":"id (String) The ID of this resource. original_route_table_id (String)","title":"Read-Only"},{"location":"resources/network_acl/","text":"aws_network_acl (Resource) # Schema # Required # vpc_id (String) Optional # egress (Set of Object) (see below for nested schema ) ingress (Set of Object) (see below for nested schema ) subnet_ids (Set of String) tags (Map of String) tags_all (Map of String) Read-Only # arn (String) id (String) The ID of this resource. owner_id (String) Nested Schema for egress # Optional: action (String) cidr_block (String) from_port (Number) icmp_code (Number) icmp_type (Number) ipv6_cidr_block (String) protocol (String) rule_no (Number) to_port (Number) Nested Schema for ingress # Optional: action (String) cidr_block (String) from_port (Number) icmp_code (Number) icmp_type (Number) ipv6_cidr_block (String) protocol (String) rule_no (Number) to_port (Number)","title":"aws_network_acl (Resource)"},{"location":"resources/network_acl/#aws_network_acl-resource","text":"","title":"aws_network_acl (Resource)"},{"location":"resources/network_acl/#schema","text":"","title":"Schema"},{"location":"resources/network_acl/#required","text":"vpc_id (String)","title":"Required"},{"location":"resources/network_acl/#optional","text":"egress (Set of Object) (see below for nested schema ) ingress (Set of Object) (see below for nested schema ) subnet_ids (Set of String) tags (Map of String) tags_all (Map of String)","title":"Optional"},{"location":"resources/network_acl/#read-only","text":"arn (String) id (String) The ID of this resource. owner_id (String)","title":"Read-Only"},{"location":"resources/network_acl/#nested-schema-for-egress","text":"Optional: action (String) cidr_block (String) from_port (Number) icmp_code (Number) icmp_type (Number) ipv6_cidr_block (String) protocol (String) rule_no (Number) to_port (Number)","title":"Nested Schema for egress"},{"location":"resources/network_acl/#nested-schema-for-ingress","text":"Optional: action (String) cidr_block (String) from_port (Number) icmp_code (Number) icmp_type (Number) ipv6_cidr_block (String) protocol (String) rule_no (Number) to_port (Number)","title":"Nested Schema for ingress"},{"location":"resources/network_acl_association/","text":"aws_network_acl_association (Resource) # Schema # Required # network_acl_id (String) subnet_id (String) Read-Only # id (String) The ID of this resource.","title":"aws_network_acl_association (Resource)"},{"location":"resources/network_acl_association/#aws_network_acl_association-resource","text":"","title":"aws_network_acl_association (Resource)"},{"location":"resources/network_acl_association/#schema","text":"","title":"Schema"},{"location":"resources/network_acl_association/#required","text":"network_acl_id (String) subnet_id (String)","title":"Required"},{"location":"resources/network_acl_association/#read-only","text":"id (String) The ID of this resource.","title":"Read-Only"},{"location":"resources/network_acl_rule/","text":"aws_network_acl_rule (Resource) # Schema # Required # network_acl_id (String) protocol (String) rule_action (String) rule_number (Number) Optional # cidr_block (String) egress (Boolean) from_port (Number) icmp_code (Number) icmp_type (Number) ipv6_cidr_block (String) to_port (Number) Read-Only # id (String) The ID of this resource.","title":"aws_network_acl_rule (Resource)"},{"location":"resources/network_acl_rule/#aws_network_acl_rule-resource","text":"","title":"aws_network_acl_rule (Resource)"},{"location":"resources/network_acl_rule/#schema","text":"","title":"Schema"},{"location":"resources/network_acl_rule/#required","text":"network_acl_id (String) protocol (String) rule_action (String) rule_number (Number)","title":"Required"},{"location":"resources/network_acl_rule/#optional","text":"cidr_block (String) egress (Boolean) from_port (Number) icmp_code (Number) icmp_type (Number) ipv6_cidr_block (String) to_port (Number)","title":"Optional"},{"location":"resources/network_acl_rule/#read-only","text":"id (String) The ID of this resource.","title":"Read-Only"},{"location":"resources/network_interface/","text":"aws_network_interface (Resource) # Schema # Required # subnet_id (String) Optional # attachment (Block Set) (see below for nested schema ) description (String) interface_type (String) ipv4_prefix_count (Number) ipv4_prefixes (Set of String) ipv6_address_count (Number) ipv6_address_list (List of String) ipv6_address_list_enabled (Boolean) ipv6_addresses (Set of String) ipv6_prefix_count (Number) ipv6_prefixes (Set of String) private_ip (String) private_ip_list (List of String) private_ip_list_enabled (Boolean) private_ips (Set of String) private_ips_count (Number) security_groups (Set of String) source_dest_check (Boolean) tags (Map of String) tags_all (Map of String) Read-Only # arn (String) id (String) The ID of this resource. mac_address (String) outpost_arn (String) owner_id (String) private_dns_name (String) Nested Schema for attachment # Required: device_index (Number) instance (String) Read-Only: attachment_id (String)","title":"aws_network_interface (Resource)"},{"location":"resources/network_interface/#aws_network_interface-resource","text":"","title":"aws_network_interface (Resource)"},{"location":"resources/network_interface/#schema","text":"","title":"Schema"},{"location":"resources/network_interface/#required","text":"subnet_id (String)","title":"Required"},{"location":"resources/network_interface/#optional","text":"attachment (Block Set) (see below for nested schema ) description (String) interface_type (String) ipv4_prefix_count (Number) ipv4_prefixes (Set of String) ipv6_address_count (Number) ipv6_address_list (List of String) ipv6_address_list_enabled (Boolean) ipv6_addresses (Set of String) ipv6_prefix_count (Number) ipv6_prefixes (Set of String) private_ip (String) private_ip_list (List of String) private_ip_list_enabled (Boolean) private_ips (Set of String) private_ips_count (Number) security_groups (Set of String) source_dest_check (Boolean) tags (Map of String) tags_all (Map of String)","title":"Optional"},{"location":"resources/network_interface/#read-only","text":"arn (String) id (String) The ID of this resource. mac_address (String) outpost_arn (String) owner_id (String) private_dns_name (String)","title":"Read-Only"},{"location":"resources/network_interface/#nested-schema-for-attachment","text":"Required: device_index (Number) instance (String) Read-Only: attachment_id (String)","title":"Nested Schema for attachment"},{"location":"resources/network_interface_attachment/","text":"aws_network_interface_attachment (Resource) # Schema # Required # device_index (Number) instance_id (String) network_interface_id (String) Read-Only # attachment_id (String) id (String) The ID of this resource. status (String)","title":"aws_network_interface_attachment (Resource)"},{"location":"resources/network_interface_attachment/#aws_network_interface_attachment-resource","text":"","title":"aws_network_interface_attachment (Resource)"},{"location":"resources/network_interface_attachment/#schema","text":"","title":"Schema"},{"location":"resources/network_interface_attachment/#required","text":"device_index (Number) instance_id (String) network_interface_id (String)","title":"Required"},{"location":"resources/network_interface_attachment/#read-only","text":"attachment_id (String) id (String) The ID of this resource. status (String)","title":"Read-Only"},{"location":"resources/network_interface_sg_attachment/","text":"aws_network_interface_sg_attachment (Resource) # Schema # Required # network_interface_id (String) security_group_id (String) Read-Only # id (String) The ID of this resource.","title":"aws_network_interface_sg_attachment (Resource)"},{"location":"resources/network_interface_sg_attachment/#aws_network_interface_sg_attachment-resource","text":"","title":"aws_network_interface_sg_attachment (Resource)"},{"location":"resources/network_interface_sg_attachment/#schema","text":"","title":"Schema"},{"location":"resources/network_interface_sg_attachment/#required","text":"network_interface_id (String) security_group_id (String)","title":"Required"},{"location":"resources/network_interface_sg_attachment/#read-only","text":"id (String) The ID of this resource.","title":"Read-Only"},{"location":"resources/paas_backup/","text":"aws_paas_backup (Resource) # Schema # Required # backup_id (String) Optional # enable_deletion_protection (String) Read-Only # databases (List of Object) (see below for nested schema ) id (String) The ID of this resource. protected (Boolean) service_class (String) service_deleted (Boolean) service_id (String) service_name (String) service_type (String) status (String) time (String) Nested Schema for databases # Read-Only: backup_enabled (Boolean) id (String) location (String) logfile (String) name (String) size (Number) status (String)","title":"aws_paas_backup (Resource)"},{"location":"resources/paas_backup/#aws_paas_backup-resource","text":"","title":"aws_paas_backup (Resource)"},{"location":"resources/paas_backup/#schema","text":"","title":"Schema"},{"location":"resources/paas_backup/#required","text":"backup_id (String)","title":"Required"},{"location":"resources/paas_backup/#optional","text":"enable_deletion_protection (String)","title":"Optional"},{"location":"resources/paas_backup/#read-only","text":"databases (List of Object) (see below for nested schema ) id (String) The ID of this resource. protected (Boolean) service_class (String) service_deleted (Boolean) service_id (String) service_name (String) service_type (String) status (String) time (String)","title":"Read-Only"},{"location":"resources/paas_backup/#nested-schema-for-databases","text":"Read-Only: backup_enabled (Boolean) id (String) location (String) logfile (String) name (String) size (Number) status (String)","title":"Nested Schema for databases"},{"location":"resources/paas_service/","text":"aws_paas_service (Resource) # Schema # Required # instance_type (String) name (String) root_volume (Block List, Min: 1, Max: 1) (see below for nested schema ) security_group_ids (Set of String) ssh_key_name (String) Optional # arbitrator_required (Boolean) backup_settings (Block List, Max: 1) (see below for nested schema ) data_volume (Block List, Max: 1) (see below for nested schema ) delete_interfaces_on_destroy (Boolean) elasticsearch (Block List, Max: 1) (see below for nested schema ) high_availability (Boolean) memcached (Block List, Max: 1) (see below for nested schema ) mongodb (Block List, Max: 1) (see below for nested schema ) mysql (Block List, Max: 1) (see below for nested schema ) network_interface_ids (Set of String) pgsql (Block List, Max: 1) (see below for nested schema ) rabbitmq (Block List, Max: 1) (see below for nested schema ) redis (Block List, Max: 1) (see below for nested schema ) subnet_ids (Set of String) timeouts (Block, Optional) (see below for nested schema ) user_data (String) user_data_content_type (String) Read-Only # auto_created_security_group_ids (Set of String) endpoints (Set of String) error_code (String) error_description (String) id (String) The ID of this resource. instances (Set of Object) (see below for nested schema ) service_class (String) service_type (String) status (String) supported_features (Set of String) total_cpu_count (Number) total_memory (Number) vpc_id (String) Nested Schema for root_volume # Optional: iops (Number) size (Number) type (String) Nested Schema for backup_settings # Optional: bucket_name (String) enabled (Boolean) expiration_days (Number) notification_email (String) start_time (String) user_login (String) Read-Only: user_id (String) Nested Schema for data_volume # Optional: iops (Number) size (Number) type (String) Nested Schema for elasticsearch # Required: version (String) Optional: class (String) kibana (Boolean) logging (Block List, Max: 1) (see below for nested schema ) monitoring (Block List, Max: 1) (see below for nested schema ) options (Map of String) password (String, Sensitive) Nested Schema for elasticsearch.logging # Required: log_to (String) Optional: logging_tags (Set of String) Nested Schema for elasticsearch.monitoring # Required: monitor_by (String) Optional: monitoring_labels (Map of String) Nested Schema for memcached # Optional: class (String) logging (Block List, Max: 1) (see below for nested schema ) monitoring (Block List, Max: 1) (see below for nested schema ) Nested Schema for memcached.logging # Required: log_to (String) Optional: logging_tags (Set of String) Nested Schema for memcached.monitoring # Required: monitor_by (String) Optional: monitoring_labels (Map of String) Nested Schema for mongodb # Required: version (String) Optional: class (String) database (Block List, Max: 1000) (see below for nested schema ) journal_commit_interval (Number) logging (Block List, Max: 1) (see below for nested schema ) maxconns (Number) monitoring (Block List, Max: 1) (see below for nested schema ) options (Map of String) profile (String) quiet (Boolean) slowms (Number) storage_engine_cache_size (Number) user (Block List, Max: 1000) (see below for nested schema ) verbositylevel (String) Nested Schema for mongodb.database # Required: name (String) Optional: user (Block List, Max: 1000) (see below for nested schema ) Read-Only: id (String) Nested Schema for mongodb.database.user # Required: name (String) Optional: roles (Set of String) Read-Only: id (String) Nested Schema for mongodb.logging # Required: log_to (String) Optional: logging_tags (Set of String) Nested Schema for mongodb.monitoring # Required: monitor_by (String) Optional: monitoring_labels (Map of String) Nested Schema for mongodb.user # Required: name (String) password (String, Sensitive) Read-Only: id (String) Nested Schema for mysql # Required: vendor (String) version (String) Optional: class (String) connect_timeout (Number) database (Block List, Max: 1000) (see below for nested schema ) galera_options (Map of String) gcache_size (Number) gcs_fc_factor (Number) gcs_fc_limit (Number) gcs_fc_master_slave (String) gcs_fc_single_primary (String) innodb_buffer_pool_instances (Number) innodb_buffer_pool_size (String) innodb_change_buffering (String) innodb_flush_log_at_trx_commit (Number) innodb_io_capacity (String) innodb_io_capacity_max (String) innodb_log_file_size (String) innodb_log_files_in_group (Number) innodb_purge_threads (Number) innodb_strict_mode (String) innodb_sync_array_size (Number) innodb_thread_concurrency (Number) logging (Block List, Max: 1) (see below for nested schema ) max_allowed_packet (Number) max_connect_errors (String) max_connections (Number) max_heap_table_size (String) monitoring (Block List, Max: 1) (see below for nested schema ) options (Map of String) pxc_strict_mode (String) table_open_cache (Number) thread_cache_size (Number) tmp_table_size (String) transaction_isolation (String) user (Block List, Max: 1000) (see below for nested schema ) wait_timeout (Number) Nested Schema for mysql.database # Required: name (String) Optional: backup_db_name (String) backup_enabled (Boolean) backup_id (String) charset (String) collate (String) user (Block List, Max: 1000) (see below for nested schema ) Read-Only: id (String) Nested Schema for mysql.database.user # Required: name (String) Optional: options (Set of String) privileges (Set of String) Read-Only: id (String) Nested Schema for mysql.logging # Required: log_to (String) Optional: logging_tags (Set of String) Nested Schema for mysql.monitoring # Required: monitor_by (String) Optional: monitoring_labels (Map of String) Nested Schema for mysql.user # Required: name (String) password (String, Sensitive) Optional: host (String) Read-Only: id (String) Nested Schema for pgsql # Required: version (String) Optional: autovacuum (String) autovacuum_analyze_scale_factor (Number) autovacuum_max_workers (Number) autovacuum_vacuum_cost_delay (Number) autovacuum_vacuum_cost_limit (Number) autovacuum_vacuum_scale_factor (Number) class (String) database (Block List, Max: 1000) (see below for nested schema ) effective_cache_size (Number) effective_io_concurrency (Number) logging (Block List, Max: 1) (see below for nested schema ) maintenance_work_mem (String) max_connections (Number) max_parallel_maintenance_workers (Number) max_parallel_workers (Number) max_parallel_workers_per_gather (Number) max_wal_size (String) max_worker_processes (Number) min_wal_size (String) monitoring (Block List, Max: 1) (see below for nested schema ) options (Map of String) replication_mode (String) shared_buffers (Number) user (Block List, Max: 1000) (see below for nested schema ) wal_buffers (Number) wal_keep_segments (Number) work_mem (String) Nested Schema for pgsql.database # Required: name (String) owner (String) Optional: backup_db_name (String) backup_enabled (Boolean) backup_id (String) encoding (String) extensions (Set of String) locale (String) user (Block List, Max: 1000) (see below for nested schema ) Read-Only: id (String) Nested Schema for pgsql.database.user # Required: name (String) Read-Only: id (String) Nested Schema for pgsql.logging # Required: log_to (String) Optional: logging_tags (Set of String) Nested Schema for pgsql.monitoring # Required: monitor_by (String) Optional: monitoring_labels (Map of String) Nested Schema for pgsql.user # Required: name (String) password (String, Sensitive) Read-Only: id (String) Nested Schema for rabbitmq # Required: password (String, Sensitive) version (String) Optional: class (String) logging (Block List, Max: 1) (see below for nested schema ) monitoring (Block List, Max: 1) (see below for nested schema ) options (Map of String) Nested Schema for rabbitmq.logging # Required: log_to (String) Optional: logging_tags (Set of String) Nested Schema for rabbitmq.monitoring # Required: monitor_by (String) Optional: monitoring_labels (Map of String) Nested Schema for redis # Required: version (String) Optional: class (String) cluster_type (String) databases (Number) logging (Block List, Max: 1) (see below for nested schema ) maxmemory_policy (String) monitoring (Block List, Max: 1) (see below for nested schema ) options (Map of String) password (String, Sensitive) persistence_aof (Boolean) persistence_rdb (Boolean) tcp_backlog (Number) tcp_keepalive (Number) timeout (Number) Nested Schema for redis.logging # Required: log_to (String) Optional: logging_tags (Set of String) Nested Schema for redis.monitoring # Required: monitor_by (String) Optional: monitoring_labels (Map of String) Nested Schema for timeouts # Optional: create (String) delete (String) update (String) Nested Schema for instances # Read-Only: endpoint (String) index (Number) instance_id (String) interface_id (String) name (String) private_ip (String) role (String) status (String)","title":"aws_paas_service (Resource)"},{"location":"resources/paas_service/#aws_paas_service-resource","text":"","title":"aws_paas_service (Resource)"},{"location":"resources/paas_service/#schema","text":"","title":"Schema"},{"location":"resources/paas_service/#required","text":"instance_type (String) name (String) root_volume (Block List, Min: 1, Max: 1) (see below for nested schema ) security_group_ids (Set of String) ssh_key_name (String)","title":"Required"},{"location":"resources/paas_service/#optional","text":"arbitrator_required (Boolean) backup_settings (Block List, Max: 1) (see below for nested schema ) data_volume (Block List, Max: 1) (see below for nested schema ) delete_interfaces_on_destroy (Boolean) elasticsearch (Block List, Max: 1) (see below for nested schema ) high_availability (Boolean) memcached (Block List, Max: 1) (see below for nested schema ) mongodb (Block List, Max: 1) (see below for nested schema ) mysql (Block List, Max: 1) (see below for nested schema ) network_interface_ids (Set of String) pgsql (Block List, Max: 1) (see below for nested schema ) rabbitmq (Block List, Max: 1) (see below for nested schema ) redis (Block List, Max: 1) (see below for nested schema ) subnet_ids (Set of String) timeouts (Block, Optional) (see below for nested schema ) user_data (String) user_data_content_type (String)","title":"Optional"},{"location":"resources/paas_service/#read-only","text":"auto_created_security_group_ids (Set of String) endpoints (Set of String) error_code (String) error_description (String) id (String) The ID of this resource. instances (Set of Object) (see below for nested schema ) service_class (String) service_type (String) status (String) supported_features (Set of String) total_cpu_count (Number) total_memory (Number) vpc_id (String)","title":"Read-Only"},{"location":"resources/paas_service/#nested-schema-for-root_volume","text":"Optional: iops (Number) size (Number) type (String)","title":"Nested Schema for root_volume"},{"location":"resources/paas_service/#nested-schema-for-backup_settings","text":"Optional: bucket_name (String) enabled (Boolean) expiration_days (Number) notification_email (String) start_time (String) user_login (String) Read-Only: user_id (String)","title":"Nested Schema for backup_settings"},{"location":"resources/paas_service/#nested-schema-for-data_volume","text":"Optional: iops (Number) size (Number) type (String)","title":"Nested Schema for data_volume"},{"location":"resources/paas_service/#nested-schema-for-elasticsearch","text":"Required: version (String) Optional: class (String) kibana (Boolean) logging (Block List, Max: 1) (see below for nested schema ) monitoring (Block List, Max: 1) (see below for nested schema ) options (Map of String) password (String, Sensitive)","title":"Nested Schema for elasticsearch"},{"location":"resources/paas_service/#nested-schema-for-elasticsearchlogging","text":"Required: log_to (String) Optional: logging_tags (Set of String)","title":"Nested Schema for elasticsearch.logging"},{"location":"resources/paas_service/#nested-schema-for-elasticsearchmonitoring","text":"Required: monitor_by (String) Optional: monitoring_labels (Map of String)","title":"Nested Schema for elasticsearch.monitoring"},{"location":"resources/paas_service/#nested-schema-for-memcached","text":"Optional: class (String) logging (Block List, Max: 1) (see below for nested schema ) monitoring (Block List, Max: 1) (see below for nested schema )","title":"Nested Schema for memcached"},{"location":"resources/paas_service/#nested-schema-for-memcachedlogging","text":"Required: log_to (String) Optional: logging_tags (Set of String)","title":"Nested Schema for memcached.logging"},{"location":"resources/paas_service/#nested-schema-for-memcachedmonitoring","text":"Required: monitor_by (String) Optional: monitoring_labels (Map of String)","title":"Nested Schema for memcached.monitoring"},{"location":"resources/paas_service/#nested-schema-for-mongodb","text":"Required: version (String) Optional: class (String) database (Block List, Max: 1000) (see below for nested schema ) journal_commit_interval (Number) logging (Block List, Max: 1) (see below for nested schema ) maxconns (Number) monitoring (Block List, Max: 1) (see below for nested schema ) options (Map of String) profile (String) quiet (Boolean) slowms (Number) storage_engine_cache_size (Number) user (Block List, Max: 1000) (see below for nested schema ) verbositylevel (String)","title":"Nested Schema for mongodb"},{"location":"resources/paas_service/#nested-schema-for-mongodbdatabase","text":"Required: name (String) Optional: user (Block List, Max: 1000) (see below for nested schema ) Read-Only: id (String)","title":"Nested Schema for mongodb.database"},{"location":"resources/paas_service/#nested-schema-for-mongodbdatabaseuser","text":"Required: name (String) Optional: roles (Set of String) Read-Only: id (String)","title":"Nested Schema for mongodb.database.user"},{"location":"resources/paas_service/#nested-schema-for-mongodblogging","text":"Required: log_to (String) Optional: logging_tags (Set of String)","title":"Nested Schema for mongodb.logging"},{"location":"resources/paas_service/#nested-schema-for-mongodbmonitoring","text":"Required: monitor_by (String) Optional: monitoring_labels (Map of String)","title":"Nested Schema for mongodb.monitoring"},{"location":"resources/paas_service/#nested-schema-for-mongodbuser","text":"Required: name (String) password (String, Sensitive) Read-Only: id (String)","title":"Nested Schema for mongodb.user"},{"location":"resources/paas_service/#nested-schema-for-mysql","text":"Required: vendor (String) version (String) Optional: class (String) connect_timeout (Number) database (Block List, Max: 1000) (see below for nested schema ) galera_options (Map of String) gcache_size (Number) gcs_fc_factor (Number) gcs_fc_limit (Number) gcs_fc_master_slave (String) gcs_fc_single_primary (String) innodb_buffer_pool_instances (Number) innodb_buffer_pool_size (String) innodb_change_buffering (String) innodb_flush_log_at_trx_commit (Number) innodb_io_capacity (String) innodb_io_capacity_max (String) innodb_log_file_size (String) innodb_log_files_in_group (Number) innodb_purge_threads (Number) innodb_strict_mode (String) innodb_sync_array_size (Number) innodb_thread_concurrency (Number) logging (Block List, Max: 1) (see below for nested schema ) max_allowed_packet (Number) max_connect_errors (String) max_connections (Number) max_heap_table_size (String) monitoring (Block List, Max: 1) (see below for nested schema ) options (Map of String) pxc_strict_mode (String) table_open_cache (Number) thread_cache_size (Number) tmp_table_size (String) transaction_isolation (String) user (Block List, Max: 1000) (see below for nested schema ) wait_timeout (Number)","title":"Nested Schema for mysql"},{"location":"resources/paas_service/#nested-schema-for-mysqldatabase","text":"Required: name (String) Optional: backup_db_name (String) backup_enabled (Boolean) backup_id (String) charset (String) collate (String) user (Block List, Max: 1000) (see below for nested schema ) Read-Only: id (String)","title":"Nested Schema for mysql.database"},{"location":"resources/paas_service/#nested-schema-for-mysqldatabaseuser","text":"Required: name (String) Optional: options (Set of String) privileges (Set of String) Read-Only: id (String)","title":"Nested Schema for mysql.database.user"},{"location":"resources/paas_service/#nested-schema-for-mysqllogging","text":"Required: log_to (String) Optional: logging_tags (Set of String)","title":"Nested Schema for mysql.logging"},{"location":"resources/paas_service/#nested-schema-for-mysqlmonitoring","text":"Required: monitor_by (String) Optional: monitoring_labels (Map of String)","title":"Nested Schema for mysql.monitoring"},{"location":"resources/paas_service/#nested-schema-for-mysqluser","text":"Required: name (String) password (String, Sensitive) Optional: host (String) Read-Only: id (String)","title":"Nested Schema for mysql.user"},{"location":"resources/paas_service/#nested-schema-for-pgsql","text":"Required: version (String) Optional: autovacuum (String) autovacuum_analyze_scale_factor (Number) autovacuum_max_workers (Number) autovacuum_vacuum_cost_delay (Number) autovacuum_vacuum_cost_limit (Number) autovacuum_vacuum_scale_factor (Number) class (String) database (Block List, Max: 1000) (see below for nested schema ) effective_cache_size (Number) effective_io_concurrency (Number) logging (Block List, Max: 1) (see below for nested schema ) maintenance_work_mem (String) max_connections (Number) max_parallel_maintenance_workers (Number) max_parallel_workers (Number) max_parallel_workers_per_gather (Number) max_wal_size (String) max_worker_processes (Number) min_wal_size (String) monitoring (Block List, Max: 1) (see below for nested schema ) options (Map of String) replication_mode (String) shared_buffers (Number) user (Block List, Max: 1000) (see below for nested schema ) wal_buffers (Number) wal_keep_segments (Number) work_mem (String)","title":"Nested Schema for pgsql"},{"location":"resources/paas_service/#nested-schema-for-pgsqldatabase","text":"Required: name (String) owner (String) Optional: backup_db_name (String) backup_enabled (Boolean) backup_id (String) encoding (String) extensions (Set of String) locale (String) user (Block List, Max: 1000) (see below for nested schema ) Read-Only: id (String)","title":"Nested Schema for pgsql.database"},{"location":"resources/paas_service/#nested-schema-for-pgsqldatabaseuser","text":"Required: name (String) Read-Only: id (String)","title":"Nested Schema for pgsql.database.user"},{"location":"resources/paas_service/#nested-schema-for-pgsqllogging","text":"Required: log_to (String) Optional: logging_tags (Set of String)","title":"Nested Schema for pgsql.logging"},{"location":"resources/paas_service/#nested-schema-for-pgsqlmonitoring","text":"Required: monitor_by (String) Optional: monitoring_labels (Map of String)","title":"Nested Schema for pgsql.monitoring"},{"location":"resources/paas_service/#nested-schema-for-pgsqluser","text":"Required: name (String) password (String, Sensitive) Read-Only: id (String)","title":"Nested Schema for pgsql.user"},{"location":"resources/paas_service/#nested-schema-for-rabbitmq","text":"Required: password (String, Sensitive) version (String) Optional: class (String) logging (Block List, Max: 1) (see below for nested schema ) monitoring (Block List, Max: 1) (see below for nested schema ) options (Map of String)","title":"Nested Schema for rabbitmq"},{"location":"resources/paas_service/#nested-schema-for-rabbitmqlogging","text":"Required: log_to (String) Optional: logging_tags (Set of String)","title":"Nested Schema for rabbitmq.logging"},{"location":"resources/paas_service/#nested-schema-for-rabbitmqmonitoring","text":"Required: monitor_by (String) Optional: monitoring_labels (Map of String)","title":"Nested Schema for rabbitmq.monitoring"},{"location":"resources/paas_service/#nested-schema-for-redis","text":"Required: version (String) Optional: class (String) cluster_type (String) databases (Number) logging (Block List, Max: 1) (see below for nested schema ) maxmemory_policy (String) monitoring (Block List, Max: 1) (see below for nested schema ) options (Map of String) password (String, Sensitive) persistence_aof (Boolean) persistence_rdb (Boolean) tcp_backlog (Number) tcp_keepalive (Number) timeout (Number)","title":"Nested Schema for redis"},{"location":"resources/paas_service/#nested-schema-for-redislogging","text":"Required: log_to (String) Optional: logging_tags (Set of String)","title":"Nested Schema for redis.logging"},{"location":"resources/paas_service/#nested-schema-for-redismonitoring","text":"Required: monitor_by (String) Optional: monitoring_labels (Map of String)","title":"Nested Schema for redis.monitoring"},{"location":"resources/paas_service/#nested-schema-for-timeouts","text":"Optional: create (String) delete (String) update (String)","title":"Nested Schema for timeouts"},{"location":"resources/paas_service/#nested-schema-for-instances","text":"Read-Only: endpoint (String) index (Number) instance_id (String) interface_id (String) name (String) private_ip (String) role (String) status (String)","title":"Nested Schema for instances"},{"location":"resources/placement_group/","text":"aws_placement_group (Resource) # Schema # Required # name (String) strategy (String) Optional # partition_count (Number) tags (Map of String) tags_all (Map of String) Read-Only # arn (String) id (String) The ID of this resource. placement_group_id (String)","title":"aws_placement_group (Resource)"},{"location":"resources/placement_group/#aws_placement_group-resource","text":"","title":"aws_placement_group (Resource)"},{"location":"resources/placement_group/#schema","text":"","title":"Schema"},{"location":"resources/placement_group/#required","text":"name (String) strategy (String)","title":"Required"},{"location":"resources/placement_group/#optional","text":"partition_count (Number) tags (Map of String) tags_all (Map of String)","title":"Optional"},{"location":"resources/placement_group/#read-only","text":"arn (String) id (String) The ID of this resource. placement_group_id (String)","title":"Read-Only"},{"location":"resources/route/","text":"aws_route (Resource) # Schema # Required # route_table_id (String) Optional # carrier_gateway_id (String) core_network_arn (String) destination_cidr_block (String) destination_ipv6_cidr_block (String) destination_prefix_list_id (String) egress_only_gateway_id (String) gateway_id (String) instance_id (String, Deprecated) local_gateway_id (String) nat_gateway_id (String) network_interface_id (String) timeouts (Block, Optional) (see below for nested schema ) transit_gateway_id (String) vpc_endpoint_id (String) vpc_peering_connection_id (String) Read-Only # id (String) The ID of this resource. instance_owner_id (String) origin (String) state (String) Nested Schema for timeouts # Optional: create (String) delete (String) update (String)","title":"aws_route (Resource)"},{"location":"resources/route/#aws_route-resource","text":"","title":"aws_route (Resource)"},{"location":"resources/route/#schema","text":"","title":"Schema"},{"location":"resources/route/#required","text":"route_table_id (String)","title":"Required"},{"location":"resources/route/#optional","text":"carrier_gateway_id (String) core_network_arn (String) destination_cidr_block (String) destination_ipv6_cidr_block (String) destination_prefix_list_id (String) egress_only_gateway_id (String) gateway_id (String) instance_id (String, Deprecated) local_gateway_id (String) nat_gateway_id (String) network_interface_id (String) timeouts (Block, Optional) (see below for nested schema ) transit_gateway_id (String) vpc_endpoint_id (String) vpc_peering_connection_id (String)","title":"Optional"},{"location":"resources/route/#read-only","text":"id (String) The ID of this resource. instance_owner_id (String) origin (String) state (String)","title":"Read-Only"},{"location":"resources/route/#nested-schema-for-timeouts","text":"Optional: create (String) delete (String) update (String)","title":"Nested Schema for timeouts"},{"location":"resources/route53_record/","text":"aws_route53_record (Resource) # Schema # Required # name (String) type (String) zone_id (String) Optional # alias (Block Set) (see below for nested schema ) allow_overwrite (Boolean) failover_routing_policy (Block List) (see below for nested schema ) geolocation_routing_policy (Block List) (see below for nested schema ) health_check_id (String) latency_routing_policy (Block List) (see below for nested schema ) multivalue_answer_routing_policy (Boolean) records (Set of String) set_identifier (String) ttl (Number) weighted_routing_policy (Block List) (see below for nested schema ) Read-Only # fqdn (String) id (String) The ID of this resource. Nested Schema for alias # Required: evaluate_target_health (Boolean) name (String) zone_id (String) Nested Schema for failover_routing_policy # Required: type (String) Nested Schema for geolocation_routing_policy # Optional: continent (String) country (String) subdivision (String) Nested Schema for latency_routing_policy # Required: region (String) Nested Schema for weighted_routing_policy # Required: weight (Number)","title":"aws_route53_record (Resource)"},{"location":"resources/route53_record/#aws_route53_record-resource","text":"","title":"aws_route53_record (Resource)"},{"location":"resources/route53_record/#schema","text":"","title":"Schema"},{"location":"resources/route53_record/#required","text":"name (String) type (String) zone_id (String)","title":"Required"},{"location":"resources/route53_record/#optional","text":"alias (Block Set) (see below for nested schema ) allow_overwrite (Boolean) failover_routing_policy (Block List) (see below for nested schema ) geolocation_routing_policy (Block List) (see below for nested schema ) health_check_id (String) latency_routing_policy (Block List) (see below for nested schema ) multivalue_answer_routing_policy (Boolean) records (Set of String) set_identifier (String) ttl (Number) weighted_routing_policy (Block List) (see below for nested schema )","title":"Optional"},{"location":"resources/route53_record/#read-only","text":"fqdn (String) id (String) The ID of this resource.","title":"Read-Only"},{"location":"resources/route53_record/#nested-schema-for-alias","text":"Required: evaluate_target_health (Boolean) name (String) zone_id (String)","title":"Nested Schema for alias"},{"location":"resources/route53_record/#nested-schema-for-failover_routing_policy","text":"Required: type (String)","title":"Nested Schema for failover_routing_policy"},{"location":"resources/route53_record/#nested-schema-for-geolocation_routing_policy","text":"Optional: continent (String) country (String) subdivision (String)","title":"Nested Schema for geolocation_routing_policy"},{"location":"resources/route53_record/#nested-schema-for-latency_routing_policy","text":"Required: region (String)","title":"Nested Schema for latency_routing_policy"},{"location":"resources/route53_record/#nested-schema-for-weighted_routing_policy","text":"Required: weight (Number)","title":"Nested Schema for weighted_routing_policy"},{"location":"resources/route53_zone/","text":"aws_route53_zone (Resource) # Schema # Required # name (String) Optional # comment (String) delegation_set_id (String) force_destroy (Boolean) tags (Map of String) tags_all (Map of String) vpc (Block Set) (see below for nested schema ) Read-Only # arn (String) id (String) The ID of this resource. name_servers (List of String) zone_id (String) Nested Schema for vpc # Required: vpc_id (String) Optional: vpc_region (String)","title":"aws_route53_zone (Resource)"},{"location":"resources/route53_zone/#aws_route53_zone-resource","text":"","title":"aws_route53_zone (Resource)"},{"location":"resources/route53_zone/#schema","text":"","title":"Schema"},{"location":"resources/route53_zone/#required","text":"name (String)","title":"Required"},{"location":"resources/route53_zone/#optional","text":"comment (String) delegation_set_id (String) force_destroy (Boolean) tags (Map of String) tags_all (Map of String) vpc (Block Set) (see below for nested schema )","title":"Optional"},{"location":"resources/route53_zone/#read-only","text":"arn (String) id (String) The ID of this resource. name_servers (List of String) zone_id (String)","title":"Read-Only"},{"location":"resources/route53_zone/#nested-schema-for-vpc","text":"Required: vpc_id (String) Optional: vpc_region (String)","title":"Nested Schema for vpc"},{"location":"resources/route_table/","text":"aws_route_table (Resource) # Schema # Required # vpc_id (String) Optional # propagating_vgws (Set of String) route (Set of Object) (see below for nested schema ) tags (Map of String) tags_all (Map of String) timeouts (Block, Optional) (see below for nested schema ) Read-Only # arn (String) id (String) The ID of this resource. owner_id (String) Nested Schema for route # Optional: carrier_gateway_id (String) cidr_block (String) core_network_arn (String) destination_prefix_list_id (String) egress_only_gateway_id (String) gateway_id (String) instance_id (String) ipv6_cidr_block (String) local_gateway_id (String) nat_gateway_id (String) network_interface_id (String) transit_gateway_id (String) vpc_endpoint_id (String) vpc_peering_connection_id (String) Nested Schema for timeouts # Optional: create (String) delete (String) update (String)","title":"aws_route_table (Resource)"},{"location":"resources/route_table/#aws_route_table-resource","text":"","title":"aws_route_table (Resource)"},{"location":"resources/route_table/#schema","text":"","title":"Schema"},{"location":"resources/route_table/#required","text":"vpc_id (String)","title":"Required"},{"location":"resources/route_table/#optional","text":"propagating_vgws (Set of String) route (Set of Object) (see below for nested schema ) tags (Map of String) tags_all (Map of String) timeouts (Block, Optional) (see below for nested schema )","title":"Optional"},{"location":"resources/route_table/#read-only","text":"arn (String) id (String) The ID of this resource. owner_id (String)","title":"Read-Only"},{"location":"resources/route_table/#nested-schema-for-route","text":"Optional: carrier_gateway_id (String) cidr_block (String) core_network_arn (String) destination_prefix_list_id (String) egress_only_gateway_id (String) gateway_id (String) instance_id (String) ipv6_cidr_block (String) local_gateway_id (String) nat_gateway_id (String) network_interface_id (String) transit_gateway_id (String) vpc_endpoint_id (String) vpc_peering_connection_id (String)","title":"Nested Schema for route"},{"location":"resources/route_table/#nested-schema-for-timeouts","text":"Optional: create (String) delete (String) update (String)","title":"Nested Schema for timeouts"},{"location":"resources/route_table_association/","text":"aws_route_table_association (Resource) # Schema # Required # route_table_id (String) Optional # gateway_id (String) subnet_id (String) Read-Only # id (String) The ID of this resource.","title":"aws_route_table_association (Resource)"},{"location":"resources/route_table_association/#aws_route_table_association-resource","text":"","title":"aws_route_table_association (Resource)"},{"location":"resources/route_table_association/#schema","text":"","title":"Schema"},{"location":"resources/route_table_association/#required","text":"route_table_id (String)","title":"Required"},{"location":"resources/route_table_association/#optional","text":"gateway_id (String) subnet_id (String)","title":"Optional"},{"location":"resources/route_table_association/#read-only","text":"id (String) The ID of this resource.","title":"Read-Only"},{"location":"resources/s3_bucket/","text":"aws_s3_bucket (Resource) # Schema # Optional # acceleration_status (String, Deprecated) acl (String, Deprecated) arn (String) bucket (String) bucket_prefix (String) cors_rule (Block List, Deprecated) (see below for nested schema ) force_destroy (Boolean) grant (Block Set, Deprecated) (see below for nested schema ) hosted_zone_id (String) lifecycle_rule (Block List, Deprecated) (see below for nested schema ) logging (Block List, Max: 1, Deprecated) (see below for nested schema ) object_lock_configuration (Block List, Max: 1, Deprecated) (see below for nested schema ) object_lock_enabled (Boolean) policy (String, Deprecated) replication_configuration (Block List, Max: 1, Deprecated) (see below for nested schema ) request_payer (String, Deprecated) server_side_encryption_configuration (Block List, Max: 1, Deprecated) (see below for nested schema ) tags (Map of String) tags_all (Map of String) versioning (Block List, Max: 1, Deprecated) (see below for nested schema ) website (Block List, Max: 1, Deprecated) (see below for nested schema ) Read-Only # bucket_domain_name (String) bucket_regional_domain_name (String) id (String) The ID of this resource. region (String) website_domain (String, Deprecated) website_endpoint (String, Deprecated) Nested Schema for cors_rule # Required: allowed_methods (List of String) allowed_origins (List of String) Optional: allowed_headers (List of String) expose_headers (List of String) max_age_seconds (Number) Nested Schema for grant # Required: permissions (Set of String) type (String) Optional: id (String) uri (String) Nested Schema for lifecycle_rule # Required: enabled (Boolean) Optional: abort_incomplete_multipart_upload_days (Number) expiration (Block List, Max: 1) (see below for nested schema ) id (String) noncurrent_version_expiration (Block List, Max: 1) (see below for nested schema ) noncurrent_version_transition (Block Set) (see below for nested schema ) prefix (String) tags (Map of String) transition (Block Set) (see below for nested schema ) Nested Schema for lifecycle_rule.expiration # Optional: date (String) days (Number) expired_object_delete_marker (Boolean) Nested Schema for lifecycle_rule.noncurrent_version_expiration # Optional: days (Number) Nested Schema for lifecycle_rule.noncurrent_version_transition # Required: storage_class (String) Optional: days (Number) Nested Schema for lifecycle_rule.transition # Required: storage_class (String) Optional: date (String) days (Number) Nested Schema for logging # Required: target_bucket (String) Optional: target_prefix (String) Nested Schema for object_lock_configuration # Optional: object_lock_enabled (String, Deprecated) rule (Block List, Max: 1, Deprecated) (see below for nested schema ) Nested Schema for object_lock_configuration.rule # Required: default_retention (Block List, Min: 1, Max: 1) (see below for nested schema ) Nested Schema for object_lock_configuration.rule.default_retention # Required: mode (String) Optional: days (Number) years (Number) Nested Schema for replication_configuration # Required: role (String) rules (Block Set, Min: 1) (see below for nested schema ) Nested Schema for replication_configuration.rules # Required: destination (Block List, Min: 1, Max: 1) (see below for nested schema ) status (String) Optional: delete_marker_replication_status (String) filter (Block List, Max: 1) (see below for nested schema ) id (String) prefix (String) priority (Number) source_selection_criteria (Block List, Max: 1) (see below for nested schema ) Nested Schema for replication_configuration.rules.destination # Required: bucket (String) Optional: access_control_translation (Block List, Max: 1) (see below for nested schema ) account_id (String) metrics (Block List, Max: 1) (see below for nested schema ) replica_kms_key_id (String) replication_time (Block List, Max: 1) (see below for nested schema ) storage_class (String) Nested Schema for replication_configuration.rules.destination.access_control_translation # Required: owner (String) Nested Schema for replication_configuration.rules.destination.metrics # Optional: minutes (Number) status (String) Nested Schema for replication_configuration.rules.destination.replication_time # Optional: minutes (Number) status (String) Nested Schema for replication_configuration.rules.filter # Optional: prefix (String) tags (Map of String) Nested Schema for replication_configuration.rules.source_selection_criteria # Optional: sse_kms_encrypted_objects (Block List, Max: 1) (see below for nested schema ) Nested Schema for replication_configuration.rules.source_selection_criteria.sse_kms_encrypted_objects # Required: enabled (Boolean) Nested Schema for server_side_encryption_configuration # Required: rule (Block List, Min: 1, Max: 1) (see below for nested schema ) Nested Schema for server_side_encryption_configuration.rule # Required: apply_server_side_encryption_by_default (Block List, Min: 1, Max: 1) (see below for nested schema ) Optional: bucket_key_enabled (Boolean) Nested Schema for server_side_encryption_configuration.rule.apply_server_side_encryption_by_default # Required: sse_algorithm (String) Optional: kms_master_key_id (String) Nested Schema for versioning # Optional: enabled (Boolean) mfa_delete (Boolean) Nested Schema for website # Optional: error_document (String) index_document (String) redirect_all_requests_to (String) routing_rules (String)","title":"aws_s3_bucket (Resource)"},{"location":"resources/s3_bucket/#aws_s3_bucket-resource","text":"","title":"aws_s3_bucket (Resource)"},{"location":"resources/s3_bucket/#schema","text":"","title":"Schema"},{"location":"resources/s3_bucket/#optional","text":"acceleration_status (String, Deprecated) acl (String, Deprecated) arn (String) bucket (String) bucket_prefix (String) cors_rule (Block List, Deprecated) (see below for nested schema ) force_destroy (Boolean) grant (Block Set, Deprecated) (see below for nested schema ) hosted_zone_id (String) lifecycle_rule (Block List, Deprecated) (see below for nested schema ) logging (Block List, Max: 1, Deprecated) (see below for nested schema ) object_lock_configuration (Block List, Max: 1, Deprecated) (see below for nested schema ) object_lock_enabled (Boolean) policy (String, Deprecated) replication_configuration (Block List, Max: 1, Deprecated) (see below for nested schema ) request_payer (String, Deprecated) server_side_encryption_configuration (Block List, Max: 1, Deprecated) (see below for nested schema ) tags (Map of String) tags_all (Map of String) versioning (Block List, Max: 1, Deprecated) (see below for nested schema ) website (Block List, Max: 1, Deprecated) (see below for nested schema )","title":"Optional"},{"location":"resources/s3_bucket/#read-only","text":"bucket_domain_name (String) bucket_regional_domain_name (String) id (String) The ID of this resource. region (String) website_domain (String, Deprecated) website_endpoint (String, Deprecated)","title":"Read-Only"},{"location":"resources/s3_bucket/#nested-schema-for-cors_rule","text":"Required: allowed_methods (List of String) allowed_origins (List of String) Optional: allowed_headers (List of String) expose_headers (List of String) max_age_seconds (Number)","title":"Nested Schema for cors_rule"},{"location":"resources/s3_bucket/#nested-schema-for-grant","text":"Required: permissions (Set of String) type (String) Optional: id (String) uri (String)","title":"Nested Schema for grant"},{"location":"resources/s3_bucket/#nested-schema-for-lifecycle_rule","text":"Required: enabled (Boolean) Optional: abort_incomplete_multipart_upload_days (Number) expiration (Block List, Max: 1) (see below for nested schema ) id (String) noncurrent_version_expiration (Block List, Max: 1) (see below for nested schema ) noncurrent_version_transition (Block Set) (see below for nested schema ) prefix (String) tags (Map of String) transition (Block Set) (see below for nested schema )","title":"Nested Schema for lifecycle_rule"},{"location":"resources/s3_bucket/#nested-schema-for-lifecycle_ruleexpiration","text":"Optional: date (String) days (Number) expired_object_delete_marker (Boolean)","title":"Nested Schema for lifecycle_rule.expiration"},{"location":"resources/s3_bucket/#nested-schema-for-lifecycle_rulenoncurrent_version_expiration","text":"Optional: days (Number)","title":"Nested Schema for lifecycle_rule.noncurrent_version_expiration"},{"location":"resources/s3_bucket/#nested-schema-for-lifecycle_rulenoncurrent_version_transition","text":"Required: storage_class (String) Optional: days (Number)","title":"Nested Schema for lifecycle_rule.noncurrent_version_transition"},{"location":"resources/s3_bucket/#nested-schema-for-lifecycle_ruletransition","text":"Required: storage_class (String) Optional: date (String) days (Number)","title":"Nested Schema for lifecycle_rule.transition"},{"location":"resources/s3_bucket/#nested-schema-for-logging","text":"Required: target_bucket (String) Optional: target_prefix (String)","title":"Nested Schema for logging"},{"location":"resources/s3_bucket/#nested-schema-for-object_lock_configuration","text":"Optional: object_lock_enabled (String, Deprecated) rule (Block List, Max: 1, Deprecated) (see below for nested schema )","title":"Nested Schema for object_lock_configuration"},{"location":"resources/s3_bucket/#nested-schema-for-object_lock_configurationrule","text":"Required: default_retention (Block List, Min: 1, Max: 1) (see below for nested schema )","title":"Nested Schema for object_lock_configuration.rule"},{"location":"resources/s3_bucket/#nested-schema-for-object_lock_configurationruledefault_retention","text":"Required: mode (String) Optional: days (Number) years (Number)","title":"Nested Schema for object_lock_configuration.rule.default_retention"},{"location":"resources/s3_bucket/#nested-schema-for-replication_configuration","text":"Required: role (String) rules (Block Set, Min: 1) (see below for nested schema )","title":"Nested Schema for replication_configuration"},{"location":"resources/s3_bucket/#nested-schema-for-replication_configurationrules","text":"Required: destination (Block List, Min: 1, Max: 1) (see below for nested schema ) status (String) Optional: delete_marker_replication_status (String) filter (Block List, Max: 1) (see below for nested schema ) id (String) prefix (String) priority (Number) source_selection_criteria (Block List, Max: 1) (see below for nested schema )","title":"Nested Schema for replication_configuration.rules"},{"location":"resources/s3_bucket/#nested-schema-for-replication_configurationrulesdestination","text":"Required: bucket (String) Optional: access_control_translation (Block List, Max: 1) (see below for nested schema ) account_id (String) metrics (Block List, Max: 1) (see below for nested schema ) replica_kms_key_id (String) replication_time (Block List, Max: 1) (see below for nested schema ) storage_class (String)","title":"Nested Schema for replication_configuration.rules.destination"},{"location":"resources/s3_bucket/#nested-schema-for-replication_configurationrulesdestinationaccess_control_translation","text":"Required: owner (String)","title":"Nested Schema for replication_configuration.rules.destination.access_control_translation"},{"location":"resources/s3_bucket/#nested-schema-for-replication_configurationrulesdestinationmetrics","text":"Optional: minutes (Number) status (String)","title":"Nested Schema for replication_configuration.rules.destination.metrics"},{"location":"resources/s3_bucket/#nested-schema-for-replication_configurationrulesdestinationreplication_time","text":"Optional: minutes (Number) status (String)","title":"Nested Schema for replication_configuration.rules.destination.replication_time"},{"location":"resources/s3_bucket/#nested-schema-for-replication_configurationrulesfilter","text":"Optional: prefix (String) tags (Map of String)","title":"Nested Schema for replication_configuration.rules.filter"},{"location":"resources/s3_bucket/#nested-schema-for-replication_configurationrulessource_selection_criteria","text":"Optional: sse_kms_encrypted_objects (Block List, Max: 1) (see below for nested schema )","title":"Nested Schema for replication_configuration.rules.source_selection_criteria"},{"location":"resources/s3_bucket/#nested-schema-for-replication_configurationrulessource_selection_criteriasse_kms_encrypted_objects","text":"Required: enabled (Boolean)","title":"Nested Schema for replication_configuration.rules.source_selection_criteria.sse_kms_encrypted_objects"},{"location":"resources/s3_bucket/#nested-schema-for-server_side_encryption_configuration","text":"Required: rule (Block List, Min: 1, Max: 1) (see below for nested schema )","title":"Nested Schema for server_side_encryption_configuration"},{"location":"resources/s3_bucket/#nested-schema-for-server_side_encryption_configurationrule","text":"Required: apply_server_side_encryption_by_default (Block List, Min: 1, Max: 1) (see below for nested schema ) Optional: bucket_key_enabled (Boolean)","title":"Nested Schema for server_side_encryption_configuration.rule"},{"location":"resources/s3_bucket/#nested-schema-for-server_side_encryption_configurationruleapply_server_side_encryption_by_default","text":"Required: sse_algorithm (String) Optional: kms_master_key_id (String)","title":"Nested Schema for server_side_encryption_configuration.rule.apply_server_side_encryption_by_default"},{"location":"resources/s3_bucket/#nested-schema-for-versioning","text":"Optional: enabled (Boolean) mfa_delete (Boolean)","title":"Nested Schema for versioning"},{"location":"resources/s3_bucket/#nested-schema-for-website","text":"Optional: error_document (String) index_document (String) redirect_all_requests_to (String) routing_rules (String)","title":"Nested Schema for website"},{"location":"resources/s3_bucket_acl/","text":"aws_s3_bucket_acl (Resource) # Schema # Required # bucket (String) Optional # access_control_policy (Block List, Max: 1) (see below for nested schema ) acl (String) expected_bucket_owner (String) Read-Only # id (String) The ID of this resource. Nested Schema for access_control_policy # Required: owner (Block List, Min: 1, Max: 1) (see below for nested schema ) Optional: grant (Block Set) (see below for nested schema ) Nested Schema for access_control_policy.owner # Required: id (String) Optional: display_name (String) Nested Schema for access_control_policy.grant # Required: permission (String) Optional: grantee (Block List, Max: 1) (see below for nested schema ) Nested Schema for access_control_policy.grant.grantee # Required: type (String) Optional: email_address (String) id (String) uri (String) Read-Only: display_name (String)","title":"aws_s3_bucket_acl (Resource)"},{"location":"resources/s3_bucket_acl/#aws_s3_bucket_acl-resource","text":"","title":"aws_s3_bucket_acl (Resource)"},{"location":"resources/s3_bucket_acl/#schema","text":"","title":"Schema"},{"location":"resources/s3_bucket_acl/#required","text":"bucket (String)","title":"Required"},{"location":"resources/s3_bucket_acl/#optional","text":"access_control_policy (Block List, Max: 1) (see below for nested schema ) acl (String) expected_bucket_owner (String)","title":"Optional"},{"location":"resources/s3_bucket_acl/#read-only","text":"id (String) The ID of this resource.","title":"Read-Only"},{"location":"resources/s3_bucket_acl/#nested-schema-for-access_control_policy","text":"Required: owner (Block List, Min: 1, Max: 1) (see below for nested schema ) Optional: grant (Block Set) (see below for nested schema )","title":"Nested Schema for access_control_policy"},{"location":"resources/s3_bucket_acl/#nested-schema-for-access_control_policyowner","text":"Required: id (String) Optional: display_name (String)","title":"Nested Schema for access_control_policy.owner"},{"location":"resources/s3_bucket_acl/#nested-schema-for-access_control_policygrant","text":"Required: permission (String) Optional: grantee (Block List, Max: 1) (see below for nested schema )","title":"Nested Schema for access_control_policy.grant"},{"location":"resources/s3_bucket_acl/#nested-schema-for-access_control_policygrantgrantee","text":"Required: type (String) Optional: email_address (String) id (String) uri (String) Read-Only: display_name (String)","title":"Nested Schema for access_control_policy.grant.grantee"},{"location":"resources/s3_bucket_cors_configuration/","text":"aws_s3_bucket_cors_configuration (Resource) # Schema # Required # bucket (String) cors_rule (Block Set, Min: 1, Max: 100) (see below for nested schema ) Optional # expected_bucket_owner (String) Read-Only # id (String) The ID of this resource. Nested Schema for cors_rule # Required: allowed_methods (Set of String) allowed_origins (Set of String) Optional: allowed_headers (Set of String) expose_headers (Set of String) id (String) max_age_seconds (Number)","title":"aws_s3_bucket_cors_configuration (Resource)"},{"location":"resources/s3_bucket_cors_configuration/#aws_s3_bucket_cors_configuration-resource","text":"","title":"aws_s3_bucket_cors_configuration (Resource)"},{"location":"resources/s3_bucket_cors_configuration/#schema","text":"","title":"Schema"},{"location":"resources/s3_bucket_cors_configuration/#required","text":"bucket (String) cors_rule (Block Set, Min: 1, Max: 100) (see below for nested schema )","title":"Required"},{"location":"resources/s3_bucket_cors_configuration/#optional","text":"expected_bucket_owner (String)","title":"Optional"},{"location":"resources/s3_bucket_cors_configuration/#read-only","text":"id (String) The ID of this resource.","title":"Read-Only"},{"location":"resources/s3_bucket_cors_configuration/#nested-schema-for-cors_rule","text":"Required: allowed_methods (Set of String) allowed_origins (Set of String) Optional: allowed_headers (Set of String) expose_headers (Set of String) id (String) max_age_seconds (Number)","title":"Nested Schema for cors_rule"},{"location":"resources/s3_bucket_lifecycle_configuration/","text":"aws_s3_bucket_lifecycle_configuration (Resource) # Schema # Required # bucket (String) rule (Block List, Min: 1) (see below for nested schema ) Optional # expected_bucket_owner (String) Read-Only # id (String) The ID of this resource. Nested Schema for rule # Required: id (String) status (String) Optional: abort_incomplete_multipart_upload (Block List, Max: 1) (see below for nested schema ) expiration (Block List, Max: 1) (see below for nested schema ) filter (Block List, Max: 1) (see below for nested schema ) noncurrent_version_expiration (Block List, Max: 1) (see below for nested schema ) noncurrent_version_transition (Block Set) (see below for nested schema ) prefix (String, Deprecated) transition (Block Set) (see below for nested schema ) Nested Schema for rule.abort_incomplete_multipart_upload # Optional: days_after_initiation (Number) Nested Schema for rule.expiration # Optional: date (String) days (Number) expired_object_delete_marker (Boolean) Nested Schema for rule.filter # Optional: and (Block List, Max: 1) (see below for nested schema ) object_size_greater_than (String) object_size_less_than (String) prefix (String) tag (Block List, Max: 1) (see below for nested schema ) Nested Schema for rule.filter.and # Optional: object_size_greater_than (Number) object_size_less_than (Number) prefix (String) tags (Map of String) Nested Schema for rule.filter.tag # Required: key (String) value (String) Nested Schema for rule.noncurrent_version_expiration # Optional: newer_noncurrent_versions (String) noncurrent_days (Number) Nested Schema for rule.noncurrent_version_transition # Required: storage_class (String) Optional: newer_noncurrent_versions (String) noncurrent_days (Number) Nested Schema for rule.transition # Required: storage_class (String) Optional: date (String) days (Number)","title":"aws_s3_bucket_lifecycle_configuration (Resource)"},{"location":"resources/s3_bucket_lifecycle_configuration/#aws_s3_bucket_lifecycle_configuration-resource","text":"","title":"aws_s3_bucket_lifecycle_configuration (Resource)"},{"location":"resources/s3_bucket_lifecycle_configuration/#schema","text":"","title":"Schema"},{"location":"resources/s3_bucket_lifecycle_configuration/#required","text":"bucket (String) rule (Block List, Min: 1) (see below for nested schema )","title":"Required"},{"location":"resources/s3_bucket_lifecycle_configuration/#optional","text":"expected_bucket_owner (String)","title":"Optional"},{"location":"resources/s3_bucket_lifecycle_configuration/#read-only","text":"id (String) The ID of this resource.","title":"Read-Only"},{"location":"resources/s3_bucket_lifecycle_configuration/#nested-schema-for-rule","text":"Required: id (String) status (String) Optional: abort_incomplete_multipart_upload (Block List, Max: 1) (see below for nested schema ) expiration (Block List, Max: 1) (see below for nested schema ) filter (Block List, Max: 1) (see below for nested schema ) noncurrent_version_expiration (Block List, Max: 1) (see below for nested schema ) noncurrent_version_transition (Block Set) (see below for nested schema ) prefix (String, Deprecated) transition (Block Set) (see below for nested schema )","title":"Nested Schema for rule"},{"location":"resources/s3_bucket_lifecycle_configuration/#nested-schema-for-ruleabort_incomplete_multipart_upload","text":"Optional: days_after_initiation (Number)","title":"Nested Schema for rule.abort_incomplete_multipart_upload"},{"location":"resources/s3_bucket_lifecycle_configuration/#nested-schema-for-ruleexpiration","text":"Optional: date (String) days (Number) expired_object_delete_marker (Boolean)","title":"Nested Schema for rule.expiration"},{"location":"resources/s3_bucket_lifecycle_configuration/#nested-schema-for-rulefilter","text":"Optional: and (Block List, Max: 1) (see below for nested schema ) object_size_greater_than (String) object_size_less_than (String) prefix (String) tag (Block List, Max: 1) (see below for nested schema )","title":"Nested Schema for rule.filter"},{"location":"resources/s3_bucket_lifecycle_configuration/#nested-schema-for-rulefilterand","text":"Optional: object_size_greater_than (Number) object_size_less_than (Number) prefix (String) tags (Map of String)","title":"Nested Schema for rule.filter.and"},{"location":"resources/s3_bucket_lifecycle_configuration/#nested-schema-for-rulefiltertag","text":"Required: key (String) value (String)","title":"Nested Schema for rule.filter.tag"},{"location":"resources/s3_bucket_lifecycle_configuration/#nested-schema-for-rulenoncurrent_version_expiration","text":"Optional: newer_noncurrent_versions (String) noncurrent_days (Number)","title":"Nested Schema for rule.noncurrent_version_expiration"},{"location":"resources/s3_bucket_lifecycle_configuration/#nested-schema-for-rulenoncurrent_version_transition","text":"Required: storage_class (String) Optional: newer_noncurrent_versions (String) noncurrent_days (Number)","title":"Nested Schema for rule.noncurrent_version_transition"},{"location":"resources/s3_bucket_lifecycle_configuration/#nested-schema-for-ruletransition","text":"Required: storage_class (String) Optional: date (String) days (Number)","title":"Nested Schema for rule.transition"},{"location":"resources/s3_bucket_object/","text":"aws_s3_bucket_object (Resource) # Schema # Required # bucket (String, Deprecated) key (String, Deprecated) Optional # acl (String) bucket_key_enabled (Boolean) cache_control (String) content (String) content_base64 (String) content_disposition (String) content_encoding (String) content_language (String) content_type (String) etag (String) force_destroy (Boolean) kms_key_id (String) metadata (Map of String) object_lock_legal_hold_status (String) object_lock_mode (String) object_lock_retain_until_date (String) server_side_encryption (String) source (String) source_hash (String) storage_class (String) tags (Map of String) tags_all (Map of String) website_redirect (String) Read-Only # id (String) The ID of this resource. version_id (String)","title":"aws_s3_bucket_object (Resource)"},{"location":"resources/s3_bucket_object/#aws_s3_bucket_object-resource","text":"","title":"aws_s3_bucket_object (Resource)"},{"location":"resources/s3_bucket_object/#schema","text":"","title":"Schema"},{"location":"resources/s3_bucket_object/#required","text":"bucket (String, Deprecated) key (String, Deprecated)","title":"Required"},{"location":"resources/s3_bucket_object/#optional","text":"acl (String) bucket_key_enabled (Boolean) cache_control (String) content (String) content_base64 (String) content_disposition (String) content_encoding (String) content_language (String) content_type (String) etag (String) force_destroy (Boolean) kms_key_id (String) metadata (Map of String) object_lock_legal_hold_status (String) object_lock_mode (String) object_lock_retain_until_date (String) server_side_encryption (String) source (String) source_hash (String) storage_class (String) tags (Map of String) tags_all (Map of String) website_redirect (String)","title":"Optional"},{"location":"resources/s3_bucket_object/#read-only","text":"id (String) The ID of this resource. version_id (String)","title":"Read-Only"},{"location":"resources/s3_bucket_policy/","text":"aws_s3_bucket_policy (Resource) # Schema # Required # bucket (String) policy (String) Read-Only # id (String) The ID of this resource.","title":"aws_s3_bucket_policy (Resource)"},{"location":"resources/s3_bucket_policy/#aws_s3_bucket_policy-resource","text":"","title":"aws_s3_bucket_policy (Resource)"},{"location":"resources/s3_bucket_policy/#schema","text":"","title":"Schema"},{"location":"resources/s3_bucket_policy/#required","text":"bucket (String) policy (String)","title":"Required"},{"location":"resources/s3_bucket_policy/#read-only","text":"id (String) The ID of this resource.","title":"Read-Only"},{"location":"resources/s3_bucket_request_payment_configuration/","text":"aws_s3_bucket_request_payment_configuration (Resource) # Schema # Required # bucket (String) payer (String) Optional # expected_bucket_owner (String) Read-Only # id (String) The ID of this resource.","title":"aws_s3_bucket_request_payment_configuration (Resource)"},{"location":"resources/s3_bucket_request_payment_configuration/#aws_s3_bucket_request_payment_configuration-resource","text":"","title":"aws_s3_bucket_request_payment_configuration (Resource)"},{"location":"resources/s3_bucket_request_payment_configuration/#schema","text":"","title":"Schema"},{"location":"resources/s3_bucket_request_payment_configuration/#required","text":"bucket (String) payer (String)","title":"Required"},{"location":"resources/s3_bucket_request_payment_configuration/#optional","text":"expected_bucket_owner (String)","title":"Optional"},{"location":"resources/s3_bucket_request_payment_configuration/#read-only","text":"id (String) The ID of this resource.","title":"Read-Only"},{"location":"resources/s3_bucket_server_side_encryption_configuration/","text":"aws_s3_bucket_server_side_encryption_configuration (Resource) # Schema # Required # bucket (String) rule (Block Set, Min: 1) (see below for nested schema ) Optional # expected_bucket_owner (String) Read-Only # id (String) The ID of this resource. Nested Schema for rule # Optional: apply_server_side_encryption_by_default (Block List, Max: 1) (see below for nested schema ) bucket_key_enabled (Boolean) Nested Schema for rule.apply_server_side_encryption_by_default # Required: sse_algorithm (String) Optional: kms_master_key_id (String)","title":"aws_s3_bucket_server_side_encryption_configuration (Resource)"},{"location":"resources/s3_bucket_server_side_encryption_configuration/#aws_s3_bucket_server_side_encryption_configuration-resource","text":"","title":"aws_s3_bucket_server_side_encryption_configuration (Resource)"},{"location":"resources/s3_bucket_server_side_encryption_configuration/#schema","text":"","title":"Schema"},{"location":"resources/s3_bucket_server_side_encryption_configuration/#required","text":"bucket (String) rule (Block Set, Min: 1) (see below for nested schema )","title":"Required"},{"location":"resources/s3_bucket_server_side_encryption_configuration/#optional","text":"expected_bucket_owner (String)","title":"Optional"},{"location":"resources/s3_bucket_server_side_encryption_configuration/#read-only","text":"id (String) The ID of this resource.","title":"Read-Only"},{"location":"resources/s3_bucket_server_side_encryption_configuration/#nested-schema-for-rule","text":"Optional: apply_server_side_encryption_by_default (Block List, Max: 1) (see below for nested schema ) bucket_key_enabled (Boolean)","title":"Nested Schema for rule"},{"location":"resources/s3_bucket_server_side_encryption_configuration/#nested-schema-for-ruleapply_server_side_encryption_by_default","text":"Required: sse_algorithm (String) Optional: kms_master_key_id (String)","title":"Nested Schema for rule.apply_server_side_encryption_by_default"},{"location":"resources/s3_bucket_versioning/","text":"aws_s3_bucket_versioning (Resource) # Schema # Required # bucket (String) versioning_configuration (Block List, Min: 1, Max: 1) (see below for nested schema ) Optional # expected_bucket_owner (String) mfa (String) Read-Only # id (String) The ID of this resource. Nested Schema for versioning_configuration # Required: status (String) Optional: mfa_delete (String)","title":"aws_s3_bucket_versioning (Resource)"},{"location":"resources/s3_bucket_versioning/#aws_s3_bucket_versioning-resource","text":"","title":"aws_s3_bucket_versioning (Resource)"},{"location":"resources/s3_bucket_versioning/#schema","text":"","title":"Schema"},{"location":"resources/s3_bucket_versioning/#required","text":"bucket (String) versioning_configuration (Block List, Min: 1, Max: 1) (see below for nested schema )","title":"Required"},{"location":"resources/s3_bucket_versioning/#optional","text":"expected_bucket_owner (String) mfa (String)","title":"Optional"},{"location":"resources/s3_bucket_versioning/#read-only","text":"id (String) The ID of this resource.","title":"Read-Only"},{"location":"resources/s3_bucket_versioning/#nested-schema-for-versioning_configuration","text":"Required: status (String) Optional: mfa_delete (String)","title":"Nested Schema for versioning_configuration"},{"location":"resources/s3_bucket_website_configuration/","text":"aws_s3_bucket_website_configuration (Resource) # Schema # Required # bucket (String) Optional # error_document (Block List, Max: 1) (see below for nested schema ) expected_bucket_owner (String) index_document (Block List, Max: 1) (see below for nested schema ) redirect_all_requests_to (Block List, Max: 1) (see below for nested schema ) routing_rule (Block List) (see below for nested schema ) Read-Only # id (String) The ID of this resource. website_domain (String) website_endpoint (String) Nested Schema for error_document # Required: key (String) Nested Schema for index_document # Required: suffix (String) Nested Schema for redirect_all_requests_to # Required: host_name (String) Optional: protocol (String) Nested Schema for routing_rule # Required: redirect (Block List, Min: 1, Max: 1) (see below for nested schema ) Optional: condition (Block List, Max: 1) (see below for nested schema ) Nested Schema for routing_rule.redirect # Optional: host_name (String) http_redirect_code (String) protocol (String) replace_key_prefix_with (String) replace_key_with (String) Nested Schema for routing_rule.condition # Optional: http_error_code_returned_equals (String) key_prefix_equals (String)","title":"aws_s3_bucket_website_configuration (Resource)"},{"location":"resources/s3_bucket_website_configuration/#aws_s3_bucket_website_configuration-resource","text":"","title":"aws_s3_bucket_website_configuration (Resource)"},{"location":"resources/s3_bucket_website_configuration/#schema","text":"","title":"Schema"},{"location":"resources/s3_bucket_website_configuration/#required","text":"bucket (String)","title":"Required"},{"location":"resources/s3_bucket_website_configuration/#optional","text":"error_document (Block List, Max: 1) (see below for nested schema ) expected_bucket_owner (String) index_document (Block List, Max: 1) (see below for nested schema ) redirect_all_requests_to (Block List, Max: 1) (see below for nested schema ) routing_rule (Block List) (see below for nested schema )","title":"Optional"},{"location":"resources/s3_bucket_website_configuration/#read-only","text":"id (String) The ID of this resource. website_domain (String) website_endpoint (String)","title":"Read-Only"},{"location":"resources/s3_bucket_website_configuration/#nested-schema-for-error_document","text":"Required: key (String)","title":"Nested Schema for error_document"},{"location":"resources/s3_bucket_website_configuration/#nested-schema-for-index_document","text":"Required: suffix (String)","title":"Nested Schema for index_document"},{"location":"resources/s3_bucket_website_configuration/#nested-schema-for-redirect_all_requests_to","text":"Required: host_name (String) Optional: protocol (String)","title":"Nested Schema for redirect_all_requests_to"},{"location":"resources/s3_bucket_website_configuration/#nested-schema-for-routing_rule","text":"Required: redirect (Block List, Min: 1, Max: 1) (see below for nested schema ) Optional: condition (Block List, Max: 1) (see below for nested schema )","title":"Nested Schema for routing_rule"},{"location":"resources/s3_bucket_website_configuration/#nested-schema-for-routing_ruleredirect","text":"Optional: host_name (String) http_redirect_code (String) protocol (String) replace_key_prefix_with (String) replace_key_with (String)","title":"Nested Schema for routing_rule.redirect"},{"location":"resources/s3_bucket_website_configuration/#nested-schema-for-routing_rulecondition","text":"Optional: http_error_code_returned_equals (String) key_prefix_equals (String)","title":"Nested Schema for routing_rule.condition"},{"location":"resources/s3_object/","text":"aws_s3_object (Resource) # Schema # Required # bucket (String) key (String) Optional # acl (String) bucket_key_enabled (Boolean) cache_control (String) content (String) content_base64 (String) content_disposition (String) content_encoding (String) content_language (String) content_type (String) etag (String) force_destroy (Boolean) kms_key_id (String) metadata (Map of String) object_lock_legal_hold_status (String) object_lock_mode (String) object_lock_retain_until_date (String) server_side_encryption (String) source (String) source_hash (String) storage_class (String) tags (Map of String) tags_all (Map of String) website_redirect (String) Read-Only # id (String) The ID of this resource. version_id (String)","title":"aws_s3_object (Resource)"},{"location":"resources/s3_object/#aws_s3_object-resource","text":"","title":"aws_s3_object (Resource)"},{"location":"resources/s3_object/#schema","text":"","title":"Schema"},{"location":"resources/s3_object/#required","text":"bucket (String) key (String)","title":"Required"},{"location":"resources/s3_object/#optional","text":"acl (String) bucket_key_enabled (Boolean) cache_control (String) content (String) content_base64 (String) content_disposition (String) content_encoding (String) content_language (String) content_type (String) etag (String) force_destroy (Boolean) kms_key_id (String) metadata (Map of String) object_lock_legal_hold_status (String) object_lock_mode (String) object_lock_retain_until_date (String) server_side_encryption (String) source (String) source_hash (String) storage_class (String) tags (Map of String) tags_all (Map of String) website_redirect (String)","title":"Optional"},{"location":"resources/s3_object/#read-only","text":"id (String) The ID of this resource. version_id (String)","title":"Read-Only"},{"location":"resources/s3_object_copy/","text":"aws_s3_object_copy (Resource) # Schema # Required # bucket (String) key (String) source (String) Optional # acl (String) bucket_key_enabled (Boolean) cache_control (String) content_disposition (String) content_encoding (String) content_language (String) content_type (String) copy_if_match (String) copy_if_modified_since (String) copy_if_none_match (String) copy_if_unmodified_since (String) customer_algorithm (String) customer_key (String, Sensitive) customer_key_md5 (String) expected_bucket_owner (String) expected_source_bucket_owner (String) expires (String) force_destroy (Boolean) grant (Block Set) (see below for nested schema ) kms_encryption_context (String, Sensitive) kms_key_id (String, Sensitive) metadata (Map of String) metadata_directive (String) object_lock_legal_hold_status (String) object_lock_mode (String) object_lock_retain_until_date (String) request_payer (String) server_side_encryption (String) source_customer_algorithm (String) source_customer_key (String, Sensitive) source_customer_key_md5 (String) storage_class (String) tagging_directive (String) tags (Map of String) tags_all (Map of String) website_redirect (String) Read-Only # etag (String) expiration (String) id (String) The ID of this resource. last_modified (String) request_charged (Boolean) source_version_id (String) version_id (String) Nested Schema for grant # Required: permissions (Set of String) type (String) Optional: email (String) id (String) uri (String)","title":"aws_s3_object_copy (Resource)"},{"location":"resources/s3_object_copy/#aws_s3_object_copy-resource","text":"","title":"aws_s3_object_copy (Resource)"},{"location":"resources/s3_object_copy/#schema","text":"","title":"Schema"},{"location":"resources/s3_object_copy/#required","text":"bucket (String) key (String) source (String)","title":"Required"},{"location":"resources/s3_object_copy/#optional","text":"acl (String) bucket_key_enabled (Boolean) cache_control (String) content_disposition (String) content_encoding (String) content_language (String) content_type (String) copy_if_match (String) copy_if_modified_since (String) copy_if_none_match (String) copy_if_unmodified_since (String) customer_algorithm (String) customer_key (String, Sensitive) customer_key_md5 (String) expected_bucket_owner (String) expected_source_bucket_owner (String) expires (String) force_destroy (Boolean) grant (Block Set) (see below for nested schema ) kms_encryption_context (String, Sensitive) kms_key_id (String, Sensitive) metadata (Map of String) metadata_directive (String) object_lock_legal_hold_status (String) object_lock_mode (String) object_lock_retain_until_date (String) request_payer (String) server_side_encryption (String) source_customer_algorithm (String) source_customer_key (String, Sensitive) source_customer_key_md5 (String) storage_class (String) tagging_directive (String) tags (Map of String) tags_all (Map of String) website_redirect (String)","title":"Optional"},{"location":"resources/s3_object_copy/#read-only","text":"etag (String) expiration (String) id (String) The ID of this resource. last_modified (String) request_charged (Boolean) source_version_id (String) version_id (String)","title":"Read-Only"},{"location":"resources/s3_object_copy/#nested-schema-for-grant","text":"Required: permissions (Set of String) type (String) Optional: email (String) id (String) uri (String)","title":"Nested Schema for grant"},{"location":"resources/security_group/","text":"aws_security_group (Resource) # Schema # Optional # description (String) egress (Set of Object) (see below for nested schema ) ingress (Set of Object) (see below for nested schema ) name (String) name_prefix (String) revoke_rules_on_delete (Boolean) tags (Map of String) tags_all (Map of String) timeouts (Block, Optional) (see below for nested schema ) vpc_id (String) Read-Only # arn (String) id (String) The ID of this resource. owner_id (String) Nested Schema for egress # Optional: cidr_blocks (List of String) description (String) from_port (Number) ipv6_cidr_blocks (List of String) prefix_list_ids (List of String) protocol (String) security_groups (Set of String) self (Boolean) to_port (Number) Nested Schema for ingress # Optional: cidr_blocks (List of String) description (String) from_port (Number) ipv6_cidr_blocks (List of String) prefix_list_ids (List of String) protocol (String) security_groups (Set of String) self (Boolean) to_port (Number) Nested Schema for timeouts # Optional: create (String) delete (String)","title":"aws_security_group (Resource)"},{"location":"resources/security_group/#aws_security_group-resource","text":"","title":"aws_security_group (Resource)"},{"location":"resources/security_group/#schema","text":"","title":"Schema"},{"location":"resources/security_group/#optional","text":"description (String) egress (Set of Object) (see below for nested schema ) ingress (Set of Object) (see below for nested schema ) name (String) name_prefix (String) revoke_rules_on_delete (Boolean) tags (Map of String) tags_all (Map of String) timeouts (Block, Optional) (see below for nested schema ) vpc_id (String)","title":"Optional"},{"location":"resources/security_group/#read-only","text":"arn (String) id (String) The ID of this resource. owner_id (String)","title":"Read-Only"},{"location":"resources/security_group/#nested-schema-for-egress","text":"Optional: cidr_blocks (List of String) description (String) from_port (Number) ipv6_cidr_blocks (List of String) prefix_list_ids (List of String) protocol (String) security_groups (Set of String) self (Boolean) to_port (Number)","title":"Nested Schema for egress"},{"location":"resources/security_group/#nested-schema-for-ingress","text":"Optional: cidr_blocks (List of String) description (String) from_port (Number) ipv6_cidr_blocks (List of String) prefix_list_ids (List of String) protocol (String) security_groups (Set of String) self (Boolean) to_port (Number)","title":"Nested Schema for ingress"},{"location":"resources/security_group/#nested-schema-for-timeouts","text":"Optional: create (String) delete (String)","title":"Nested Schema for timeouts"},{"location":"resources/security_group_rule/","text":"aws_security_group_rule (Resource) # Schema # Required # from_port (Number) protocol (String) security_group_id (String) to_port (Number) type (String) Type of rule, ingress (inbound) or egress (outbound). Optional # cidr_blocks (List of String) description (String) ipv6_cidr_blocks (List of String) prefix_list_ids (List of String) self (Boolean) source_security_group_id (String) Read-Only # id (String) The ID of this resource.","title":"aws_security_group_rule (Resource)"},{"location":"resources/security_group_rule/#aws_security_group_rule-resource","text":"","title":"aws_security_group_rule (Resource)"},{"location":"resources/security_group_rule/#schema","text":"","title":"Schema"},{"location":"resources/security_group_rule/#required","text":"from_port (Number) protocol (String) security_group_id (String) to_port (Number) type (String) Type of rule, ingress (inbound) or egress (outbound).","title":"Required"},{"location":"resources/security_group_rule/#optional","text":"cidr_blocks (List of String) description (String) ipv6_cidr_blocks (List of String) prefix_list_ids (List of String) self (Boolean) source_security_group_id (String)","title":"Optional"},{"location":"resources/security_group_rule/#read-only","text":"id (String) The ID of this resource.","title":"Read-Only"},{"location":"resources/snapshot_create_volume_permission/","text":"aws_snapshot_create_volume_permission (Resource) # Schema # Required # account_id (String) snapshot_id (String) Read-Only # id (String) The ID of this resource.","title":"aws_snapshot_create_volume_permission (Resource)"},{"location":"resources/snapshot_create_volume_permission/#aws_snapshot_create_volume_permission-resource","text":"","title":"aws_snapshot_create_volume_permission (Resource)"},{"location":"resources/snapshot_create_volume_permission/#schema","text":"","title":"Schema"},{"location":"resources/snapshot_create_volume_permission/#required","text":"account_id (String) snapshot_id (String)","title":"Required"},{"location":"resources/snapshot_create_volume_permission/#read-only","text":"id (String) The ID of this resource.","title":"Read-Only"},{"location":"resources/subnet/","text":"aws_subnet (Resource) # Schema # Required # vpc_id (String) Optional # assign_ipv6_address_on_creation (Boolean) availability_zone (String) availability_zone_id (String) cidr_block (String) customer_owned_ipv4_pool (String) enable_dns64 (Boolean) enable_resource_name_dns_a_record_on_launch (Boolean) enable_resource_name_dns_aaaa_record_on_launch (Boolean) ipv6_cidr_block (String) ipv6_native (Boolean) map_customer_owned_ip_on_launch (Boolean) map_public_ip_on_launch (Boolean) outpost_arn (String) private_dns_hostname_type_on_launch (String) tags (Map of String) tags_all (Map of String) timeouts (Block, Optional) (see below for nested schema ) Read-Only # arn (String) id (String) The ID of this resource. ipv6_cidr_block_association_id (String) owner_id (String) Nested Schema for timeouts # Optional: create (String) delete (String)","title":"aws_subnet (Resource)"},{"location":"resources/subnet/#aws_subnet-resource","text":"","title":"aws_subnet (Resource)"},{"location":"resources/subnet/#schema","text":"","title":"Schema"},{"location":"resources/subnet/#required","text":"vpc_id (String)","title":"Required"},{"location":"resources/subnet/#optional","text":"assign_ipv6_address_on_creation (Boolean) availability_zone (String) availability_zone_id (String) cidr_block (String) customer_owned_ipv4_pool (String) enable_dns64 (Boolean) enable_resource_name_dns_a_record_on_launch (Boolean) enable_resource_name_dns_aaaa_record_on_launch (Boolean) ipv6_cidr_block (String) ipv6_native (Boolean) map_customer_owned_ip_on_launch (Boolean) map_public_ip_on_launch (Boolean) outpost_arn (String) private_dns_hostname_type_on_launch (String) tags (Map of String) tags_all (Map of String) timeouts (Block, Optional) (see below for nested schema )","title":"Optional"},{"location":"resources/subnet/#read-only","text":"arn (String) id (String) The ID of this resource. ipv6_cidr_block_association_id (String) owner_id (String)","title":"Read-Only"},{"location":"resources/subnet/#nested-schema-for-timeouts","text":"Optional: create (String) delete (String)","title":"Nested Schema for timeouts"},{"location":"resources/volume_attachment/","text":"aws_volume_attachment (Resource) # Schema # Required # instance_id (String) volume_id (String) Optional # device_name (String, Deprecated) force_detach (Boolean) skip_destroy (Boolean) stop_instance_before_detaching (Boolean) timeouts (Block, Optional) (see below for nested schema ) Read-Only # generated_device_name (String) id (String) The ID of this resource. Nested Schema for timeouts # Optional: create (String) delete (String)","title":"aws_volume_attachment (Resource)"},{"location":"resources/volume_attachment/#aws_volume_attachment-resource","text":"","title":"aws_volume_attachment (Resource)"},{"location":"resources/volume_attachment/#schema","text":"","title":"Schema"},{"location":"resources/volume_attachment/#required","text":"instance_id (String) volume_id (String)","title":"Required"},{"location":"resources/volume_attachment/#optional","text":"device_name (String, Deprecated) force_detach (Boolean) skip_destroy (Boolean) stop_instance_before_detaching (Boolean) timeouts (Block, Optional) (see below for nested schema )","title":"Optional"},{"location":"resources/volume_attachment/#read-only","text":"generated_device_name (String) id (String) The ID of this resource.","title":"Read-Only"},{"location":"resources/volume_attachment/#nested-schema-for-timeouts","text":"Optional: create (String) delete (String)","title":"Nested Schema for timeouts"},{"location":"resources/vpc/","text":"aws_vpc (Resource) # Schema # Optional # assign_generated_ipv6_cidr_block (Boolean) cidr_block (String) enable_classiclink (Boolean) enable_classiclink_dns_support (Boolean) enable_dns_hostnames (Boolean) enable_dns_support (Boolean) instance_tenancy (String) ipv4_ipam_pool_id (String) ipv4_netmask_length (Number) ipv6_cidr_block (String) ipv6_cidr_block_network_border_group (String) ipv6_ipam_pool_id (String) ipv6_netmask_length (Number) tags (Map of String) tags_all (Map of String) Read-Only # arn (String) default_network_acl_id (String) default_route_table_id (String) default_security_group_id (String) dhcp_options_id (String) id (String) The ID of this resource. ipv6_association_id (String) main_route_table_id (String) owner_id (String)","title":"aws_vpc (Resource)"},{"location":"resources/vpc/#aws_vpc-resource","text":"","title":"aws_vpc (Resource)"},{"location":"resources/vpc/#schema","text":"","title":"Schema"},{"location":"resources/vpc/#optional","text":"assign_generated_ipv6_cidr_block (Boolean) cidr_block (String) enable_classiclink (Boolean) enable_classiclink_dns_support (Boolean) enable_dns_hostnames (Boolean) enable_dns_support (Boolean) instance_tenancy (String) ipv4_ipam_pool_id (String) ipv4_netmask_length (Number) ipv6_cidr_block (String) ipv6_cidr_block_network_border_group (String) ipv6_ipam_pool_id (String) ipv6_netmask_length (Number) tags (Map of String) tags_all (Map of String)","title":"Optional"},{"location":"resources/vpc/#read-only","text":"arn (String) default_network_acl_id (String) default_route_table_id (String) default_security_group_id (String) dhcp_options_id (String) id (String) The ID of this resource. ipv6_association_id (String) main_route_table_id (String) owner_id (String)","title":"Read-Only"},{"location":"resources/vpc_dhcp_options/","text":"aws_vpc_dhcp_options (Resource) # Schema # Optional # domain_name (String) domain_name_servers (List of String) netbios_name_servers (List of String) netbios_node_type (String) ntp_servers (List of String) tags (Map of String) tags_all (Map of String) Read-Only # arn (String) id (String) The ID of this resource. owner_id (String)","title":"aws_vpc_dhcp_options (Resource)"},{"location":"resources/vpc_dhcp_options/#aws_vpc_dhcp_options-resource","text":"","title":"aws_vpc_dhcp_options (Resource)"},{"location":"resources/vpc_dhcp_options/#schema","text":"","title":"Schema"},{"location":"resources/vpc_dhcp_options/#optional","text":"domain_name (String) domain_name_servers (List of String) netbios_name_servers (List of String) netbios_node_type (String) ntp_servers (List of String) tags (Map of String) tags_all (Map of String)","title":"Optional"},{"location":"resources/vpc_dhcp_options/#read-only","text":"arn (String) id (String) The ID of this resource. owner_id (String)","title":"Read-Only"},{"location":"resources/vpc_dhcp_options_association/","text":"aws_vpc_dhcp_options_association (Resource) # Schema # Required # dhcp_options_id (String) vpc_id (String) Read-Only # id (String) The ID of this resource.","title":"aws_vpc_dhcp_options_association (Resource)"},{"location":"resources/vpc_dhcp_options_association/#aws_vpc_dhcp_options_association-resource","text":"","title":"aws_vpc_dhcp_options_association (Resource)"},{"location":"resources/vpc_dhcp_options_association/#schema","text":"","title":"Schema"},{"location":"resources/vpc_dhcp_options_association/#required","text":"dhcp_options_id (String) vpc_id (String)","title":"Required"},{"location":"resources/vpc_dhcp_options_association/#read-only","text":"id (String) The ID of this resource.","title":"Read-Only"},{"location":"resources/vpn_connection/","text":"aws_vpn_connection (Resource) # Schema # Required # customer_gateway_id (String) type (String) Optional # enable_acceleration (Boolean) local_ipv4_network_cidr (String) local_ipv6_network_cidr (String) remote_ipv4_network_cidr (String) remote_ipv6_network_cidr (String) static_routes_only (Boolean) tags (Map of String) tags_all (Map of String) transit_gateway_id (String) tunnel1_dpd_timeout_action (String) tunnel1_dpd_timeout_seconds (Number) tunnel1_ike_versions (Set of String) tunnel1_inside_cidr (String) tunnel1_inside_ipv6_cidr (String) tunnel1_phase1_dh_group_numbers (Set of Number) tunnel1_phase1_encryption_algorithms (Set of String) tunnel1_phase1_integrity_algorithms (Set of String) tunnel1_phase1_lifetime_seconds (Number) tunnel1_phase2_dh_group_numbers (Set of Number) tunnel1_phase2_encryption_algorithms (Set of String) tunnel1_phase2_integrity_algorithms (Set of String) tunnel1_phase2_lifetime_seconds (Number) tunnel1_preshared_key (String, Sensitive) tunnel1_rekey_fuzz_percentage (Number) tunnel1_rekey_margin_time_seconds (Number) tunnel1_replay_window_size (Number) tunnel1_startup_action (String) tunnel2_dpd_timeout_action (String) tunnel2_dpd_timeout_seconds (Number) tunnel2_ike_versions (Set of String) tunnel2_inside_cidr (String) tunnel2_inside_ipv6_cidr (String) tunnel2_phase1_dh_group_numbers (Set of Number) tunnel2_phase1_encryption_algorithms (Set of String) tunnel2_phase1_integrity_algorithms (Set of String) tunnel2_phase1_lifetime_seconds (Number) tunnel2_phase2_dh_group_numbers (Set of Number) tunnel2_phase2_encryption_algorithms (Set of String) tunnel2_phase2_integrity_algorithms (Set of String) tunnel2_phase2_lifetime_seconds (Number) tunnel2_preshared_key (String, Sensitive) tunnel2_rekey_fuzz_percentage (Number) tunnel2_rekey_margin_time_seconds (Number) tunnel2_replay_window_size (Number) tunnel2_startup_action (String) tunnel_inside_ip_version (String) vpn_gateway_id (String) Read-Only # arn (String) core_network_arn (String) core_network_attachment_arn (String) customer_gateway_configuration (String, Sensitive) id (String) The ID of this resource. routes (Set of Object) (see below for nested schema ) transit_gateway_attachment_id (String) tunnel1_address (String) tunnel1_bgp_asn (String) tunnel1_bgp_holdtime (Number) tunnel1_cgw_inside_address (String) tunnel1_vgw_inside_address (String) tunnel2_address (String) tunnel2_bgp_asn (String) tunnel2_bgp_holdtime (Number) tunnel2_cgw_inside_address (String) tunnel2_vgw_inside_address (String) vgw_telemetry (Set of Object) (see below for nested schema ) Nested Schema for routes # Read-Only: destination_cidr_block (String) source (String) state (String) Nested Schema for vgw_telemetry # Read-Only: accepted_route_count (Number) certificate_arn (String) last_status_change (String) outside_ip_address (String) status (String) status_message (String)","title":"aws_vpn_connection (Resource)"},{"location":"resources/vpn_connection/#aws_vpn_connection-resource","text":"","title":"aws_vpn_connection (Resource)"},{"location":"resources/vpn_connection/#schema","text":"","title":"Schema"},{"location":"resources/vpn_connection/#required","text":"customer_gateway_id (String) type (String)","title":"Required"},{"location":"resources/vpn_connection/#optional","text":"enable_acceleration (Boolean) local_ipv4_network_cidr (String) local_ipv6_network_cidr (String) remote_ipv4_network_cidr (String) remote_ipv6_network_cidr (String) static_routes_only (Boolean) tags (Map of String) tags_all (Map of String) transit_gateway_id (String) tunnel1_dpd_timeout_action (String) tunnel1_dpd_timeout_seconds (Number) tunnel1_ike_versions (Set of String) tunnel1_inside_cidr (String) tunnel1_inside_ipv6_cidr (String) tunnel1_phase1_dh_group_numbers (Set of Number) tunnel1_phase1_encryption_algorithms (Set of String) tunnel1_phase1_integrity_algorithms (Set of String) tunnel1_phase1_lifetime_seconds (Number) tunnel1_phase2_dh_group_numbers (Set of Number) tunnel1_phase2_encryption_algorithms (Set of String) tunnel1_phase2_integrity_algorithms (Set of String) tunnel1_phase2_lifetime_seconds (Number) tunnel1_preshared_key (String, Sensitive) tunnel1_rekey_fuzz_percentage (Number) tunnel1_rekey_margin_time_seconds (Number) tunnel1_replay_window_size (Number) tunnel1_startup_action (String) tunnel2_dpd_timeout_action (String) tunnel2_dpd_timeout_seconds (Number) tunnel2_ike_versions (Set of String) tunnel2_inside_cidr (String) tunnel2_inside_ipv6_cidr (String) tunnel2_phase1_dh_group_numbers (Set of Number) tunnel2_phase1_encryption_algorithms (Set of String) tunnel2_phase1_integrity_algorithms (Set of String) tunnel2_phase1_lifetime_seconds (Number) tunnel2_phase2_dh_group_numbers (Set of Number) tunnel2_phase2_encryption_algorithms (Set of String) tunnel2_phase2_integrity_algorithms (Set of String) tunnel2_phase2_lifetime_seconds (Number) tunnel2_preshared_key (String, Sensitive) tunnel2_rekey_fuzz_percentage (Number) tunnel2_rekey_margin_time_seconds (Number) tunnel2_replay_window_size (Number) tunnel2_startup_action (String) tunnel_inside_ip_version (String) vpn_gateway_id (String)","title":"Optional"},{"location":"resources/vpn_connection/#read-only","text":"arn (String) core_network_arn (String) core_network_attachment_arn (String) customer_gateway_configuration (String, Sensitive) id (String) The ID of this resource. routes (Set of Object) (see below for nested schema ) transit_gateway_attachment_id (String) tunnel1_address (String) tunnel1_bgp_asn (String) tunnel1_bgp_holdtime (Number) tunnel1_cgw_inside_address (String) tunnel1_vgw_inside_address (String) tunnel2_address (String) tunnel2_bgp_asn (String) tunnel2_bgp_holdtime (Number) tunnel2_cgw_inside_address (String) tunnel2_vgw_inside_address (String) vgw_telemetry (Set of Object) (see below for nested schema )","title":"Read-Only"},{"location":"resources/vpn_connection/#nested-schema-for-routes","text":"Read-Only: destination_cidr_block (String) source (String) state (String)","title":"Nested Schema for routes"},{"location":"resources/vpn_connection/#nested-schema-for-vgw_telemetry","text":"Read-Only: accepted_route_count (Number) certificate_arn (String) last_status_change (String) outside_ip_address (String) status (String) status_message (String)","title":"Nested Schema for vgw_telemetry"},{"location":"resources/vpn_gateway_route_propagation/","text":"aws_vpn_gateway_route_propagation (Resource) # Schema # Required # route_table_id (String) vpn_gateway_id (String) Optional # timeouts (Block, Optional) (see below for nested schema ) Read-Only # id (String) The ID of this resource. Nested Schema for timeouts # Optional: create (String) delete (String)","title":"aws_vpn_gateway_route_propagation (Resource)"},{"location":"resources/vpn_gateway_route_propagation/#aws_vpn_gateway_route_propagation-resource","text":"","title":"aws_vpn_gateway_route_propagation (Resource)"},{"location":"resources/vpn_gateway_route_propagation/#schema","text":"","title":"Schema"},{"location":"resources/vpn_gateway_route_propagation/#required","text":"route_table_id (String) vpn_gateway_id (String)","title":"Required"},{"location":"resources/vpn_gateway_route_propagation/#optional","text":"timeouts (Block, Optional) (see below for nested schema )","title":"Optional"},{"location":"resources/vpn_gateway_route_propagation/#read-only","text":"id (String) The ID of this resource.","title":"Read-Only"},{"location":"resources/vpn_gateway_route_propagation/#nested-schema-for-timeouts","text":"Optional: create (String) delete (String)","title":"Nested Schema for timeouts"},{"location":"roadmaps/","text":"Terraform AWS Provider Road Maps # What is a road map? # Every few months, the team will highlight areas of focus for our work and upcoming research. We select items for inclusion in the road map from the Top 10 Community Issues, Core Services , and internal priorities. Where community sourced contributions exist we will work with the authors to review and merge their work. Where this does not exist or the original contributors are not available, we will create the resources and implementation ourselves. Road Maps # Latest Road Map May-July 2021 February-April 2021 November 2020-January 2021 May-July 2020 August-October 2020","title":"Terraform AWS Provider Road Maps"},{"location":"roadmaps/#terraform-aws-provider-road-maps","text":"","title":"Terraform AWS Provider Road Maps"},{"location":"roadmaps/#what-is-a-road-map","text":"Every few months, the team will highlight areas of focus for our work and upcoming research. We select items for inclusion in the road map from the Top 10 Community Issues, Core Services , and internal priorities. Where community sourced contributions exist we will work with the authors to review and merge their work. Where this does not exist or the original contributors are not available, we will create the resources and implementation ourselves.","title":"What is a road map?"},{"location":"roadmaps/#road-maps","text":"Latest Road Map May-July 2021 February-April 2021 November 2020-January 2021 May-July 2020 August-October 2020","title":"Road Maps"},{"location":"roadmaps/2020_August_to_October/","text":"Roadmap: August - October 2020 # Every few months, the team will highlight areas of focus for our work and upcoming research. We select items for inclusion in the roadmap from the Top 10 Community Issues, core services , and internal priorities. When community pull requests exist for a given item, we will prioritize working with the original authors to include their contributions. If the author can no longer take on the implementation, HashiCorp will complete any additional work needed. Each weekly release will include necessary tasks that lead to the completion of the stated goals as well as community pull requests, enhancements, and features that are not highlighted in the roadmap. To view all the items we've prioritized for this quarter, please see the Roadmap milestone . Where community sourced contributions exist we will work with the authors to review and merge their work. Where this does not exist we will create the resources and implementation ourselves. From May through July , we committed to adding support for WAFv2 and Lex. We are happy to report that WAFv2 support is now complete and we will be finishing support for Lex immediately following the release of v3.0.0. Additionally, we planned to refactor ACM and will include the redesigned resource as part of the 3.0.0 package. Lastly, we spent some time researching Default Tags and want to extend a thank you to all the folks that volunteered to assist. We\u2019ve written a proposal for the feature that is being reviewed internally and we hope to include the functionality in the product in the future. From August-October \u201820, we will be prioritizing the following areas of work: New Services # EventBridge # Issue: #9330 Amazon EventBridge is a serverless event bus that makes it easy to connect applications together using data from your own applications, integrated Software-as-a-Service (SaaS) applications, and AWS services. EventBridge delivers a stream of real-time data from event sources, such as Zendesk, Datadog, or Pagerduty, and routes that data to targets like AWS Lambda. You can set up routing rules to determine where to send your data to build application architectures that react in real time to all of your data sources. As EventBridge exists as an addition to existing CloudWatch APIs we will perform a research phase to determine whether Terraform support should exist as separate resources, additions to existing ones, or a combination of the two. EC2 Image Builder # Issue: #11084 EC2 Image Builder simplifies the creation, maintenance, validation, sharing, and deployment of Linux or Windows Server images for use with Amazon EC2 and on-premises. Support for EC2 Image Builder will include: New Resource(s): aws_imagebuilder_component aws_imagebuilder_distribution_configuration aws_imagebuilder_image aws_imagebuilder_image_pipeline aws_imagebuilder_image_recipe aws_imagebuilder_infrastructure_configuration New Data Source(s): aws_imagebuilder_image AWS Lake Formation # Issue: #9700 AWS Lake Formation is a service that makes it easy to set up a secure data lake in days. A data lake is a centralized, curated, and secured repository that stores all your data, both in its original form and prepared for analysis. A data lake enables you to break down data silos and combine different types of analytics to gain insights and guide better business decisions. Support for AWS Lake Formation will include: New Resource(s): aws_lakeformation_resource aws_lakeformation_data_lake_settings aws_lakeformation_permissions AWS Serverless Application Repository # Issue: #3981 The AWS Serverless Application Repository is a managed repository for serverless applications. It enables teams, organizations, and individual developers to store and share reusable applications, and easily assemble and deploy serverless architectures in powerful new ways. Using the Serverless Application Repository, you don't need to clone, build, package, or publish source code to AWS before deploying it. Instead, you can use pre-built applications from the Serverless Application Repository in your serverless architectures, helping you and your teams reduce duplicated work, ensure organizational best practices, and get to market faster. Integration with AWS Identity and Access Management (IAM) provides resource-level control of each application, enabling you to publicly share applications with everyone or privately share them with specific AWS accounts. Support for AWS Serverless Application Repository will include: New Resource(s): aws_serverlessapplicationrepository_cloudformation_stack New Data Source(s): aws_serverlessapplicationrepository_application Issues and Enhancements # The issues below have gained substantial support via our community. As a result, we want to highlight our commitment to addressing them. #12690 RDS Proxy Support #11281 Home Directory Mappings Support for AWS Transfer User #384 Add support for CreateVPCAssociationAuthorization AWS API #6562 Auto Scaling Plans (Dynamic/Predictive Auto Scaling Groups) #5549 Terraform constantly updates resource policy on API Gateway #11569 aws_transfer_server: support Elastic IPs #5286 Point in time restore support for AWS RDS instances United States Federal Focus # We have added extra engineering and product capacity to enable us to provide the same compatibility and coverage assurances in the GovCloud, C2S, and SC2S regions as we currently do for Commercial AWS regions. Our attention on C2S/SC2S environments should result in better outcomes in other similar air gapped environments. Initially, we will be focusing on GovCloud and users should expect improved experiences within that region in the coming months. Technical Debt Theme # Each quarter we identify a technical debt theme for the team to focus on alongside new service additions, issue resolutions and enhancements. This quarter we are looking at spending time improving the reliability of our acceptance test framework. We have a number of flaky tests which add friction to the development cycle. Making these more consistent should improve the development experience for both contributors and maintainers. Research Topics # Research topics include features, architectural changes, and ideas that we are pursuing in the longer term that may significantly impact the core user experience of the AWS provider. Research topics are discovery only and are not guaranteed to be included in a future release. We are interested in your thoughts and feedback about the proposals below and encourage you to comment on the linked issues or schedule time with @maryelizbeth via the link on her GitHub profile to discuss. API Calls/IAM Actions Per Terraform Resource (Minimum IAM) # Issue: #9154 To address security concerns and best practices we are considering how Terraform could surface minimally viable IAM policies for taking actions on resources or executing a TF plan. This is in the early stages of research and we are particularly interested in whether or not this would be useful and the resources or services areas for which it is most valuable. Lifecycle: Retain [Add 'retain' attribute to the Terraform lifecycle meta-parameter] # Issue: #902 Some resources (e.g. log groups) are intended to be created but never destroyed. Terraform currently does not have a lifecycle attribute for retaining such resources. We are curious as to whether or not retaining resources is a workflow that meets the needs of our community and if so, how and where we might make use of that in the AWS Provider. Disclosures # The product-development initiatives in this document reflect HashiCorp's current plans and are subject to change and/or cancellation in HashiCorp's sole discretion.","title":"Roadmap: August - October 2020"},{"location":"roadmaps/2020_August_to_October/#roadmap-august-october-2020","text":"Every few months, the team will highlight areas of focus for our work and upcoming research. We select items for inclusion in the roadmap from the Top 10 Community Issues, core services , and internal priorities. When community pull requests exist for a given item, we will prioritize working with the original authors to include their contributions. If the author can no longer take on the implementation, HashiCorp will complete any additional work needed. Each weekly release will include necessary tasks that lead to the completion of the stated goals as well as community pull requests, enhancements, and features that are not highlighted in the roadmap. To view all the items we've prioritized for this quarter, please see the Roadmap milestone . Where community sourced contributions exist we will work with the authors to review and merge their work. Where this does not exist we will create the resources and implementation ourselves. From May through July , we committed to adding support for WAFv2 and Lex. We are happy to report that WAFv2 support is now complete and we will be finishing support for Lex immediately following the release of v3.0.0. Additionally, we planned to refactor ACM and will include the redesigned resource as part of the 3.0.0 package. Lastly, we spent some time researching Default Tags and want to extend a thank you to all the folks that volunteered to assist. We\u2019ve written a proposal for the feature that is being reviewed internally and we hope to include the functionality in the product in the future. From August-October \u201820, we will be prioritizing the following areas of work:","title":"Roadmap: August - October 2020"},{"location":"roadmaps/2020_August_to_October/#new-services","text":"","title":"New Services"},{"location":"roadmaps/2020_August_to_October/#eventbridge","text":"Issue: #9330 Amazon EventBridge is a serverless event bus that makes it easy to connect applications together using data from your own applications, integrated Software-as-a-Service (SaaS) applications, and AWS services. EventBridge delivers a stream of real-time data from event sources, such as Zendesk, Datadog, or Pagerduty, and routes that data to targets like AWS Lambda. You can set up routing rules to determine where to send your data to build application architectures that react in real time to all of your data sources. As EventBridge exists as an addition to existing CloudWatch APIs we will perform a research phase to determine whether Terraform support should exist as separate resources, additions to existing ones, or a combination of the two.","title":"EventBridge"},{"location":"roadmaps/2020_August_to_October/#ec2-image-builder","text":"Issue: #11084 EC2 Image Builder simplifies the creation, maintenance, validation, sharing, and deployment of Linux or Windows Server images for use with Amazon EC2 and on-premises. Support for EC2 Image Builder will include: New Resource(s): aws_imagebuilder_component aws_imagebuilder_distribution_configuration aws_imagebuilder_image aws_imagebuilder_image_pipeline aws_imagebuilder_image_recipe aws_imagebuilder_infrastructure_configuration New Data Source(s): aws_imagebuilder_image","title":"EC2 Image Builder"},{"location":"roadmaps/2020_August_to_October/#aws-lake-formation","text":"Issue: #9700 AWS Lake Formation is a service that makes it easy to set up a secure data lake in days. A data lake is a centralized, curated, and secured repository that stores all your data, both in its original form and prepared for analysis. A data lake enables you to break down data silos and combine different types of analytics to gain insights and guide better business decisions. Support for AWS Lake Formation will include: New Resource(s): aws_lakeformation_resource aws_lakeformation_data_lake_settings aws_lakeformation_permissions","title":"AWS Lake Formation"},{"location":"roadmaps/2020_August_to_October/#aws-serverless-application-repository","text":"Issue: #3981 The AWS Serverless Application Repository is a managed repository for serverless applications. It enables teams, organizations, and individual developers to store and share reusable applications, and easily assemble and deploy serverless architectures in powerful new ways. Using the Serverless Application Repository, you don't need to clone, build, package, or publish source code to AWS before deploying it. Instead, you can use pre-built applications from the Serverless Application Repository in your serverless architectures, helping you and your teams reduce duplicated work, ensure organizational best practices, and get to market faster. Integration with AWS Identity and Access Management (IAM) provides resource-level control of each application, enabling you to publicly share applications with everyone or privately share them with specific AWS accounts. Support for AWS Serverless Application Repository will include: New Resource(s): aws_serverlessapplicationrepository_cloudformation_stack New Data Source(s): aws_serverlessapplicationrepository_application","title":"AWS Serverless Application Repository"},{"location":"roadmaps/2020_August_to_October/#issues-and-enhancements","text":"The issues below have gained substantial support via our community. As a result, we want to highlight our commitment to addressing them. #12690 RDS Proxy Support #11281 Home Directory Mappings Support for AWS Transfer User #384 Add support for CreateVPCAssociationAuthorization AWS API #6562 Auto Scaling Plans (Dynamic/Predictive Auto Scaling Groups) #5549 Terraform constantly updates resource policy on API Gateway #11569 aws_transfer_server: support Elastic IPs #5286 Point in time restore support for AWS RDS instances","title":"Issues and Enhancements"},{"location":"roadmaps/2020_August_to_October/#united-states-federal-focus","text":"We have added extra engineering and product capacity to enable us to provide the same compatibility and coverage assurances in the GovCloud, C2S, and SC2S regions as we currently do for Commercial AWS regions. Our attention on C2S/SC2S environments should result in better outcomes in other similar air gapped environments. Initially, we will be focusing on GovCloud and users should expect improved experiences within that region in the coming months.","title":"United States Federal Focus"},{"location":"roadmaps/2020_August_to_October/#technical-debt-theme","text":"Each quarter we identify a technical debt theme for the team to focus on alongside new service additions, issue resolutions and enhancements. This quarter we are looking at spending time improving the reliability of our acceptance test framework. We have a number of flaky tests which add friction to the development cycle. Making these more consistent should improve the development experience for both contributors and maintainers.","title":"Technical Debt Theme"},{"location":"roadmaps/2020_August_to_October/#research-topics","text":"Research topics include features, architectural changes, and ideas that we are pursuing in the longer term that may significantly impact the core user experience of the AWS provider. Research topics are discovery only and are not guaranteed to be included in a future release. We are interested in your thoughts and feedback about the proposals below and encourage you to comment on the linked issues or schedule time with @maryelizbeth via the link on her GitHub profile to discuss.","title":"Research Topics"},{"location":"roadmaps/2020_August_to_October/#api-callsiam-actions-per-terraform-resource-minimum-iam","text":"Issue: #9154 To address security concerns and best practices we are considering how Terraform could surface minimally viable IAM policies for taking actions on resources or executing a TF plan. This is in the early stages of research and we are particularly interested in whether or not this would be useful and the resources or services areas for which it is most valuable.","title":"API Calls/IAM Actions Per Terraform Resource (Minimum IAM)"},{"location":"roadmaps/2020_August_to_October/#lifecycle-retain-add-retain-attribute-to-the-terraform-lifecycle-meta-parameter","text":"Issue: #902 Some resources (e.g. log groups) are intended to be created but never destroyed. Terraform currently does not have a lifecycle attribute for retaining such resources. We are curious as to whether or not retaining resources is a workflow that meets the needs of our community and if so, how and where we might make use of that in the AWS Provider.","title":"Lifecycle: Retain [Add 'retain' attribute to the Terraform lifecycle meta-parameter]"},{"location":"roadmaps/2020_August_to_October/#disclosures","text":"The product-development initiatives in this document reflect HashiCorp's current plans and are subject to change and/or cancellation in HashiCorp's sole discretion.","title":"Disclosures"},{"location":"roadmaps/2020_May_to_July/","text":"Roadmap: May - July 2020 # Each quarter the team will highlight areas of focus for our work and upcoming research. We select items for inclusion in the roadmap from the Top 10 Community Issues, core services , and internal priorities. When community pull requests exist for a given item, we will prioritize working with the original authors to include their contributions. If the author can no longer take on the implementation, HashiCorp will complete any additional work needed. Each weekly release will include necessary tasks that lead to the completion of the stated goals as well as community pull requests, enhancements, and features that are not highlighted in the roadmap. To make contribution easier, we\u2019ll be using the Help Wanted tag to point to issues we\u2019d like to include in this quarter\u2019s series of releases. This quarter (May-July \u201820) we will be prioritizing the following areas of work: 3.0.0 # Milestone: v3.0.0 Each year the TF AWS Provider team releases a major version. Major releases include code removals, deprecations, and breaking changes. A corresponding \u201cupgrade guide\u201d will be published alongside the release. We'll be updating the linked milestone as we work to finalize and complete v3.0.0. WAFv2 # Issue: #11046 AWS WAFv2 is a web application firewall that lets you monitor the HTTP and HTTPS requests that are forwarded to Amazon CloudFront, an Amazon API Gateway API, or an Application Load Balancer. Support for WAFv2 functionality will be wholly separate from WAF \u201cClassic\u201d. We\u2019ll focus on enabling community contributions to WAFv2 first. If there is not a community contribution, HashiCorp will work to add the missing resource or data source. Support for WAFv2 will include: Resources # aws_wafv2_ip_set aws_wafv2_regex_pattern_set aws_wafv2_rule_group aws_wafv2_web_acl aws_wafv2_web_acl_association Data Sources # aws_wafv2_ip_set aws_wafv2_regex_pattern_set aws_wafv2_rule_group aws_wafv2_web_acl Amazon Lex # Issue: #905 Amazon Lex is a service for building conversational interfaces into any application using voice and text. Amazon Lex provides the advanced deep learning functionalities of automatic speech recognition (ASR) for converting speech to text, and natural language understanding (NLU) to recognize the intent of the text, to enable you to build applications with highly engaging user experiences and lifelike conversational interactions. We\u2019ll focus on enabling community contributions to Lex first. If there is not a community contribution, HashiCorp will work to add the missing resource or data source. Support for Amazon Lex will include: Resources # aws_lex_slot_type aws_lex_intent aws_lex_bot aws_lex_bot_alias Data Sources # aws_lex_slot_type aws_lex_intent aws_lex_bot aws_lex_bot_alias AWS Certificate Manager # Issue: #8531 AWS Certificate Manager is a service that allows you to easily provision, manage, and deploy public and private Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificates for use with AWS services and your internal connected resources. After evaluating the issue linked above, we concluded that the ACM resource was in need of a redesign. We\u2019ll be prioritizing redesigning and updating the resource while we tackle the open bug reports and enhancements. Our research and redesign work will be tracked here . Research Topics # Research topics include features, architectural changes, and ideas that we are pursuing in the longer term that may significantly impact the core user experience of the AWS provider. Research topics are discovery only and are not guaranteed to be included in a future release. Global Default Tags # Issue: #7926 We\u2019ve been evaluating how users approach tagging their infrastructure in Terraform and the systems and practices that may interact with TF when it comes to tagging. The initial discussions led us to prioritize functionality that allows users to ignore specific tags globally in the AWS provider. As a complement to that feature, we are exploring the ability to supply global default tags to resources defined by the AWS Provider. We are interested in your thoughts and feedback about this proposal and encourage you to comment on the issue linked above or schedule time with @maryelizbeth via the link on her GitHub profile to discuss. Disclosures # The product-development initiatives in this document reflect HashiCorp's current plans and are subject to change and/or cancellation in HashiCorp's sole discretion.","title":"Roadmap: May - July 2020"},{"location":"roadmaps/2020_May_to_July/#roadmap-may-july-2020","text":"Each quarter the team will highlight areas of focus for our work and upcoming research. We select items for inclusion in the roadmap from the Top 10 Community Issues, core services , and internal priorities. When community pull requests exist for a given item, we will prioritize working with the original authors to include their contributions. If the author can no longer take on the implementation, HashiCorp will complete any additional work needed. Each weekly release will include necessary tasks that lead to the completion of the stated goals as well as community pull requests, enhancements, and features that are not highlighted in the roadmap. To make contribution easier, we\u2019ll be using the Help Wanted tag to point to issues we\u2019d like to include in this quarter\u2019s series of releases. This quarter (May-July \u201820) we will be prioritizing the following areas of work:","title":"Roadmap: May - July 2020"},{"location":"roadmaps/2020_May_to_July/#300","text":"Milestone: v3.0.0 Each year the TF AWS Provider team releases a major version. Major releases include code removals, deprecations, and breaking changes. A corresponding \u201cupgrade guide\u201d will be published alongside the release. We'll be updating the linked milestone as we work to finalize and complete v3.0.0.","title":"3.0.0"},{"location":"roadmaps/2020_May_to_July/#wafv2","text":"Issue: #11046 AWS WAFv2 is a web application firewall that lets you monitor the HTTP and HTTPS requests that are forwarded to Amazon CloudFront, an Amazon API Gateway API, or an Application Load Balancer. Support for WAFv2 functionality will be wholly separate from WAF \u201cClassic\u201d. We\u2019ll focus on enabling community contributions to WAFv2 first. If there is not a community contribution, HashiCorp will work to add the missing resource or data source. Support for WAFv2 will include:","title":"WAFv2"},{"location":"roadmaps/2020_May_to_July/#resources","text":"aws_wafv2_ip_set aws_wafv2_regex_pattern_set aws_wafv2_rule_group aws_wafv2_web_acl aws_wafv2_web_acl_association","title":"Resources"},{"location":"roadmaps/2020_May_to_July/#data-sources","text":"aws_wafv2_ip_set aws_wafv2_regex_pattern_set aws_wafv2_rule_group aws_wafv2_web_acl","title":"Data Sources"},{"location":"roadmaps/2020_May_to_July/#amazon-lex","text":"Issue: #905 Amazon Lex is a service for building conversational interfaces into any application using voice and text. Amazon Lex provides the advanced deep learning functionalities of automatic speech recognition (ASR) for converting speech to text, and natural language understanding (NLU) to recognize the intent of the text, to enable you to build applications with highly engaging user experiences and lifelike conversational interactions. We\u2019ll focus on enabling community contributions to Lex first. If there is not a community contribution, HashiCorp will work to add the missing resource or data source. Support for Amazon Lex will include:","title":"Amazon Lex"},{"location":"roadmaps/2020_May_to_July/#resources_1","text":"aws_lex_slot_type aws_lex_intent aws_lex_bot aws_lex_bot_alias","title":"Resources"},{"location":"roadmaps/2020_May_to_July/#data-sources_1","text":"aws_lex_slot_type aws_lex_intent aws_lex_bot aws_lex_bot_alias","title":"Data Sources"},{"location":"roadmaps/2020_May_to_July/#aws-certificate-manager","text":"Issue: #8531 AWS Certificate Manager is a service that allows you to easily provision, manage, and deploy public and private Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificates for use with AWS services and your internal connected resources. After evaluating the issue linked above, we concluded that the ACM resource was in need of a redesign. We\u2019ll be prioritizing redesigning and updating the resource while we tackle the open bug reports and enhancements. Our research and redesign work will be tracked here .","title":"AWS Certificate Manager"},{"location":"roadmaps/2020_May_to_July/#research-topics","text":"Research topics include features, architectural changes, and ideas that we are pursuing in the longer term that may significantly impact the core user experience of the AWS provider. Research topics are discovery only and are not guaranteed to be included in a future release.","title":"Research Topics"},{"location":"roadmaps/2020_May_to_July/#global-default-tags","text":"Issue: #7926 We\u2019ve been evaluating how users approach tagging their infrastructure in Terraform and the systems and practices that may interact with TF when it comes to tagging. The initial discussions led us to prioritize functionality that allows users to ignore specific tags globally in the AWS provider. As a complement to that feature, we are exploring the ability to supply global default tags to resources defined by the AWS Provider. We are interested in your thoughts and feedback about this proposal and encourage you to comment on the issue linked above or schedule time with @maryelizbeth via the link on her GitHub profile to discuss.","title":"Global Default Tags"},{"location":"roadmaps/2020_May_to_July/#disclosures","text":"The product-development initiatives in this document reflect HashiCorp's current plans and are subject to change and/or cancellation in HashiCorp's sole discretion.","title":"Disclosures"},{"location":"roadmaps/2020_November_to_January/","text":"Roadmap: November 2020 - January 2021 # Every few months, the team will highlight areas of focus for our work and upcoming research. We select items for inclusion in the roadmap from the Top 10 Community Issues, Core Services , and internal priorities. Where community sourced contributions exist we will work with the authors to review and merge their work. Where this does not exist or the original contributors, are not available we will create the resources and implementation ourselves. Each weekly release will include necessary tasks that lead to the completion of the stated goals as well as community pull requests, enhancements, and features that are not highlighted in the roadmap. To view all the items we've prioritized for this quarter, please see the Roadmap milestone . This roadmap does not describe all the work that will be included within this timeframe, but it does describe our focus. We will include other work as events occur . From August through October , we committed to adding support for EventBridge, ImageBuilder , LakeFormation and Serverless Application Repository as new service offerings. We were able to deliver EventBridge within that time frame. Unfortunately for a number of reasons we weren\u2019t able to release ImageBuilder, LakeFormation and Serverless Application Repository. That said, they are in progress and on track for release in early November. From October-January \u201821, we will be prioritizing the following areas of work: New Services # AWS SSO Permission Sets # Issue: #15108 AWS SSO account assignment APIs enable you to build automation to create and update permissions that align with your company's common job functions. You can then assign the permissions to users and groups to entitle them for access in their required accounts. For example, you can give your developers broad control over resources in developer accounts, and limit that control to authorized operations personnel in production accounts. The new AWS CloudFormation support enables you to automate account assignments as you build new accounts. You can also use the APIs to decode user and group names from the unique identifiers that appear in AWS CloudTrail logs. Support for AWS SSO Permission Sets will include: New Resource(s): aws_sso_permission_set aws_sso_permission_set_policy aws_sso_permission_set_policy_attachment aws_sso_account_assignment Issues & Enhancements # Core Service Reliability # Core Services are areas of high usage or strategic importance for our users. We strive to offer rock solid reliability in these areas. This quarter we will have a focus on RDS and Elasticache (which we are also promoting to Core Service status) to address some common pain points in their usage and ensure they continue to meet our standards. RDS # #15177 : Subsequent plan/apply forces global cluster recreation when source cluster's storage_encrypted=true #15583 : aws db parameter group ... converts keys and values to lowercase and fails 'apply' due to aws_db_parameter_group changes #1198 : Unable to ignore changes to RDS minor engine version #9401 : Destroy/recreate DB instance on minor version update rather than updating #2635 : RDS - storage_encrypted = true does not work #467 : With aws_db_instance when you remove the snapshot_identifier it wants to force a new resource #10197 : AWS aurora unexpected state 'configuring-iam-database-auth' when modifying the iam_database_authentication_enabled flag #13891 : RDS Cluster is not reattached to Global Cluster after failing deletion Elasticache # The Elasticache work will begin with a research spike to ensure that the we can solve the following issues without introducing breaking changes into the provider: #14959 : Research Spike: Elasticache Service Fixes and Improvements #12708 : resource/aws_elasticache_replication_group: Add MultiAZ support ~ #13517 : Feature Request: aws_elasticache_cluster allow auto-minor-version-upgrade to be set~ This parameter is not enabled in the AWS API. #5118 : support setting primary/replica AZ attributes inside NodeGroupConfiguration for RedisClusterModelEnabled Workflow Improvements # We\u2019ll also be tackling some of the top reported issues in the provider that are causing disruptions to high priority workflows: #14373 : cloudfront: support for cache and origin request policies #11584 : Add ability to manage VPN tunnel options #13986 : Feature request: Managed prefix lists #8009 : S3 settings on aws_dms_endpoint conflict with \"extra_connection_attributes\" #11220 : Set account recovery preference #12272 : CloudWatch composite alarms #4058 : Support Firewall Manager Policies #10931 : Resource aws_sns_topic_subscription, new argument redrive_policy #11098 : Support for AWS Config Conformance Packs #6674 : Feature Request: Security Hub #3891 : Adding custom cognito user pool attribute forces new resource #2245 : AWS security groups not being destroyed #8114 : Cognito User Pool UI Customization #11348 : Add Type to AWS SFN State Machine #11586 : Faulty Read of Client VPN Network associations break state Technical Debt Theme # Last quarter we made considerable progress in improving the stability of our Acceptance Test suite. We were able to reduce our consistent test failures by 50% in Commercial, and fixed hundreds of tests in GovCloud. We believe that keeping our focus in this area in the next quarter is the way forward that provides the most value. With another quarter of focus we are looking to have a test suite free of problematic tests, along with optimizations which should improve the speeds of the suite. Research Topics # Research topics include features, architectural changes, and ideas that we are pursuing in the longer term that may significantly impact the core user experience of the AWS provider. Research topics are discovery only and are not guaranteed to be included in a future release. We are interested in your thoughts and feedback about the proposals below and encourage you to comment on the linked issues or schedule time with @maryelizbeth via the link on her GitHub profile to discuss. Default Tags Implementation Design # Issue: #7926 After completing user research and an internal review of our research conclusions, we will begin conducting engineering research and publish an RFC to address the implementation of this feature. Once the RFC has been approved, we will update the community with our plans for Default Tags. API Calls/IAM Actions Per Terraform Resource (Minimum IAM) # Issue: #9154 To address security concerns and best practices we are considering how Terraform could surface minimally viable IAM policies for taking actions on resources or executing a TF plan. This is in the early stages of research and we are particularly interested in whether or not this would be useful and the resources or services areas for which it is most valuable. Lifecycle: Retain [Add 'retain' attribute to the Terraform lifecycle meta-parameter] # Issue: #902 Some resources (e.g. log groups) are intended to be created but never destroyed. Terraform currently does not have a lifecycle attribute for retaining such resources. We are curious as to whether or not retaining resources is a workflow that meets the needs of our community and if so, how and where we might make use of that in the AWS Provider. Disclosures # The product-development initiatives in this document reflect HashiCorp's current plans and are subject to change and/or cancellation in HashiCorp's sole discretion.","title":"Roadmap: November 2020 - January 2021"},{"location":"roadmaps/2020_November_to_January/#roadmap-november-2020-january-2021","text":"Every few months, the team will highlight areas of focus for our work and upcoming research. We select items for inclusion in the roadmap from the Top 10 Community Issues, Core Services , and internal priorities. Where community sourced contributions exist we will work with the authors to review and merge their work. Where this does not exist or the original contributors, are not available we will create the resources and implementation ourselves. Each weekly release will include necessary tasks that lead to the completion of the stated goals as well as community pull requests, enhancements, and features that are not highlighted in the roadmap. To view all the items we've prioritized for this quarter, please see the Roadmap milestone . This roadmap does not describe all the work that will be included within this timeframe, but it does describe our focus. We will include other work as events occur . From August through October , we committed to adding support for EventBridge, ImageBuilder , LakeFormation and Serverless Application Repository as new service offerings. We were able to deliver EventBridge within that time frame. Unfortunately for a number of reasons we weren\u2019t able to release ImageBuilder, LakeFormation and Serverless Application Repository. That said, they are in progress and on track for release in early November. From October-January \u201821, we will be prioritizing the following areas of work:","title":"Roadmap: November 2020 - January 2021"},{"location":"roadmaps/2020_November_to_January/#new-services","text":"","title":"New Services"},{"location":"roadmaps/2020_November_to_January/#aws-sso-permission-sets","text":"Issue: #15108 AWS SSO account assignment APIs enable you to build automation to create and update permissions that align with your company's common job functions. You can then assign the permissions to users and groups to entitle them for access in their required accounts. For example, you can give your developers broad control over resources in developer accounts, and limit that control to authorized operations personnel in production accounts. The new AWS CloudFormation support enables you to automate account assignments as you build new accounts. You can also use the APIs to decode user and group names from the unique identifiers that appear in AWS CloudTrail logs. Support for AWS SSO Permission Sets will include: New Resource(s): aws_sso_permission_set aws_sso_permission_set_policy aws_sso_permission_set_policy_attachment aws_sso_account_assignment","title":"AWS SSO Permission Sets"},{"location":"roadmaps/2020_November_to_January/#issues-enhancements","text":"","title":"Issues &amp; Enhancements"},{"location":"roadmaps/2020_November_to_January/#core-service-reliability","text":"Core Services are areas of high usage or strategic importance for our users. We strive to offer rock solid reliability in these areas. This quarter we will have a focus on RDS and Elasticache (which we are also promoting to Core Service status) to address some common pain points in their usage and ensure they continue to meet our standards.","title":"Core Service Reliability"},{"location":"roadmaps/2020_November_to_January/#rds","text":"#15177 : Subsequent plan/apply forces global cluster recreation when source cluster's storage_encrypted=true #15583 : aws db parameter group ... converts keys and values to lowercase and fails 'apply' due to aws_db_parameter_group changes #1198 : Unable to ignore changes to RDS minor engine version #9401 : Destroy/recreate DB instance on minor version update rather than updating #2635 : RDS - storage_encrypted = true does not work #467 : With aws_db_instance when you remove the snapshot_identifier it wants to force a new resource #10197 : AWS aurora unexpected state 'configuring-iam-database-auth' when modifying the iam_database_authentication_enabled flag #13891 : RDS Cluster is not reattached to Global Cluster after failing deletion","title":"RDS"},{"location":"roadmaps/2020_November_to_January/#elasticache","text":"The Elasticache work will begin with a research spike to ensure that the we can solve the following issues without introducing breaking changes into the provider: #14959 : Research Spike: Elasticache Service Fixes and Improvements #12708 : resource/aws_elasticache_replication_group: Add MultiAZ support ~ #13517 : Feature Request: aws_elasticache_cluster allow auto-minor-version-upgrade to be set~ This parameter is not enabled in the AWS API. #5118 : support setting primary/replica AZ attributes inside NodeGroupConfiguration for RedisClusterModelEnabled","title":"Elasticache"},{"location":"roadmaps/2020_November_to_January/#workflow-improvements","text":"We\u2019ll also be tackling some of the top reported issues in the provider that are causing disruptions to high priority workflows: #14373 : cloudfront: support for cache and origin request policies #11584 : Add ability to manage VPN tunnel options #13986 : Feature request: Managed prefix lists #8009 : S3 settings on aws_dms_endpoint conflict with \"extra_connection_attributes\" #11220 : Set account recovery preference #12272 : CloudWatch composite alarms #4058 : Support Firewall Manager Policies #10931 : Resource aws_sns_topic_subscription, new argument redrive_policy #11098 : Support for AWS Config Conformance Packs #6674 : Feature Request: Security Hub #3891 : Adding custom cognito user pool attribute forces new resource #2245 : AWS security groups not being destroyed #8114 : Cognito User Pool UI Customization #11348 : Add Type to AWS SFN State Machine #11586 : Faulty Read of Client VPN Network associations break state","title":"Workflow Improvements"},{"location":"roadmaps/2020_November_to_January/#technical-debt-theme","text":"Last quarter we made considerable progress in improving the stability of our Acceptance Test suite. We were able to reduce our consistent test failures by 50% in Commercial, and fixed hundreds of tests in GovCloud. We believe that keeping our focus in this area in the next quarter is the way forward that provides the most value. With another quarter of focus we are looking to have a test suite free of problematic tests, along with optimizations which should improve the speeds of the suite.","title":"Technical Debt Theme"},{"location":"roadmaps/2020_November_to_January/#research-topics","text":"Research topics include features, architectural changes, and ideas that we are pursuing in the longer term that may significantly impact the core user experience of the AWS provider. Research topics are discovery only and are not guaranteed to be included in a future release. We are interested in your thoughts and feedback about the proposals below and encourage you to comment on the linked issues or schedule time with @maryelizbeth via the link on her GitHub profile to discuss.","title":"Research Topics"},{"location":"roadmaps/2020_November_to_January/#default-tags-implementation-design","text":"Issue: #7926 After completing user research and an internal review of our research conclusions, we will begin conducting engineering research and publish an RFC to address the implementation of this feature. Once the RFC has been approved, we will update the community with our plans for Default Tags.","title":"Default Tags Implementation Design"},{"location":"roadmaps/2020_November_to_January/#api-callsiam-actions-per-terraform-resource-minimum-iam","text":"Issue: #9154 To address security concerns and best practices we are considering how Terraform could surface minimally viable IAM policies for taking actions on resources or executing a TF plan. This is in the early stages of research and we are particularly interested in whether or not this would be useful and the resources or services areas for which it is most valuable.","title":"API Calls/IAM Actions Per Terraform Resource (Minimum IAM)"},{"location":"roadmaps/2020_November_to_January/#lifecycle-retain-add-retain-attribute-to-the-terraform-lifecycle-meta-parameter","text":"Issue: #902 Some resources (e.g. log groups) are intended to be created but never destroyed. Terraform currently does not have a lifecycle attribute for retaining such resources. We are curious as to whether or not retaining resources is a workflow that meets the needs of our community and if so, how and where we might make use of that in the AWS Provider.","title":"Lifecycle: Retain [Add 'retain' attribute to the Terraform lifecycle meta-parameter]"},{"location":"roadmaps/2020_November_to_January/#disclosures","text":"The product-development initiatives in this document reflect HashiCorp's current plans and are subject to change and/or cancellation in HashiCorp's sole discretion.","title":"Disclosures"},{"location":"roadmaps/2021_August_to_October/","text":"Roadmap: August 2021 - October 2021 # Every few months, the team will highlight areas of focus for our work and upcoming research. We select items for inclusion in the roadmap from the Top 10 Community Issues, Core Services , and internal priorities. Where community sourced contributions exist we will work with the authors to review and merge their work. Where this does not exist or the original contributors are not available we will create the resources and implementation ourselves. Each weekly release will include necessary tasks that lead to the completion of the stated goals as well as community pull requests, enhancements, and features that are not highlighted in the roadmap. To view all the items we've prioritized for this quarter, please see the Roadmap milestone . This roadmap does not describe all the work that will be included within this timeframe, but it does describe our focus. We will include other work as events occur . In the period spanning May to July 2021 539 Pull Requests were opened in the provider and 449 were merged, adding support for: Amazon Timestream AWS AppConfig AWS Amplify AWS Service Catalog AWS Elasticsearch Native SAML for Kibana Amazon Macie 2 Delegated Administrators for Organisations Predictive Autoscaling Amazon EKS OIDC AWS Transfer Family support for Amazon Elastic File System Amazon Kinesis Data Streams for Amazon DynamoDB Among many other enhancements, bug fixes and resolutions to technical debt items. From August-October \u201821, we will be prioritizing the following areas of work: Provider Version v4.0.0 # Issue: #20433 The next major release of the provider will include the adoption of the AWS Go SDK v2.0 as well as a refactor of one of our oldest and most used resources: S3. There will also be the usual deprecations and sometimes breaking changes to existing resources which are necessary to maintain consistency of behavior across resources. Our goal is to focus on standardization to reduce technical debt and lay a strong foundation for future enhancement initiatives within the provider. For details of the changes in full please refer to #20433 . We would love to hear your feedback. New Services # Amazon Quicksight # Issue: #10990 Amazon QuickSight is a scalable, serverless, embeddable, machine learning-powered business intelligence (BI) service built for the cloud. QuickSight lets you easily create and publish interactive BI dashboards that include Machine Learning-powered insights. QuickSight dashboards can be accessed from any device, and seamlessly embedded into your applications, portals, and websites. Support for Amazon Quicksight will include: New Resource(s): aws_quicksight_data_source aws_quicksight_group_membership aws_quicksight_iam_policy_assignment aws_quicksight_data_set aws_quicksight_ingestion aws_quicksight_template aws_quicksight_dashboard aws_quicksight_template_alias Amazon AppStream # Issue: #6058 Amazon AppStream 2.0 is a fully managed non-persistent desktop and application virtualization service that allows your users to securely access the data, applications, and resources they need, anywhere, anytime, from any supported device. With AppStream 2.0, you can easily scale your applications and desktops to any number of users across the globe without acquiring, provisioning, and operating hardware or infrastructure. AppStream 2.0 is built on AWS, so you benefit from a data center and network architecture designed for the most security-sensitive organizations. Each end user has a fluid and responsive experience because your applications run on virtual machines optimized for specific use cases and each streaming sessions automatically adjusts to network conditions. Support for Amazon AppStream will include: New Resource(s): aws_appstream_stack aws_appstream_fleet aws_appstream_imagebuilder Amazon Connect # Issue: #16392 Amazon Connect is an easy to use omnichannel cloud contact center that helps you provide superior customer service at a lower cost. Designed from the ground up to be omnichannel, Amazon Connect provides a seamless experience across voice and chat for your customers and agents. This includes one set of tools for skills-based routing, task management, powerful real-time and historical analytics, and intuitive management tools \u2013 all with pay-as-you-go pricing, which means Amazon Connect simplifies contact center operations, improves agent efficiency, and lowers costs. You can set up a contact center in minutes that can scale to support millions of customers from the office or as a virtual contact center. Support for Amazon Connect will include: New Resource(s): aws_connect_instance aws_connect_contact_flow aws_connect_bot_association aws_connect_lex_bot_association aws_connect_lambda_function_association New Data Source(s): aws_connect_instance aws_connect_contact_flow aws_connect_bot_association aws_connect_lex_bot_association aws_connect_lambda_function_association Enhancements to Existing Services # Support for KMS Multi-Region Keys S3 Replication Time Control New Data Source: aws_iam_roles Project Restructure: Service Level Packages # The scale of the provider (now 1000 resources/datasources) has led to its existing package structure being difficult to work with and maintain. This quarter we are going to perform a large refactor of the codebase, to align on a single go package per AWS service. More details can be found in the encompassing issue #20431 Research Topics # Research topics include features, architectural changes, and ideas that we are pursuing in the longer term that may significantly impact the core user experience of the AWS provider. Research topics are discovery only and are not guaranteed to be included in a future release. Scaffolding for new resources, datasources and associated tests # Adding resources, datasources and test files to the provider is a repetitive task which should be automated to ensure consistency and speed up contributor and maintainer workflow. A simple cli tool should be able to generate these files in place, and ensure that any code reference additions required (ie adding to provider.go ) are performed as part of the process. Disclosures # The product-development initiatives in this document reflect HashiCorp's current plans and are subject to change and/or cancellation in HashiCorp's sole discretion.","title":"Roadmap: August 2021 - October 2021"},{"location":"roadmaps/2021_August_to_October/#roadmap-august-2021-october-2021","text":"Every few months, the team will highlight areas of focus for our work and upcoming research. We select items for inclusion in the roadmap from the Top 10 Community Issues, Core Services , and internal priorities. Where community sourced contributions exist we will work with the authors to review and merge their work. Where this does not exist or the original contributors are not available we will create the resources and implementation ourselves. Each weekly release will include necessary tasks that lead to the completion of the stated goals as well as community pull requests, enhancements, and features that are not highlighted in the roadmap. To view all the items we've prioritized for this quarter, please see the Roadmap milestone . This roadmap does not describe all the work that will be included within this timeframe, but it does describe our focus. We will include other work as events occur . In the period spanning May to July 2021 539 Pull Requests were opened in the provider and 449 were merged, adding support for: Amazon Timestream AWS AppConfig AWS Amplify AWS Service Catalog AWS Elasticsearch Native SAML for Kibana Amazon Macie 2 Delegated Administrators for Organisations Predictive Autoscaling Amazon EKS OIDC AWS Transfer Family support for Amazon Elastic File System Amazon Kinesis Data Streams for Amazon DynamoDB Among many other enhancements, bug fixes and resolutions to technical debt items. From August-October \u201821, we will be prioritizing the following areas of work:","title":"Roadmap: August 2021 - October 2021"},{"location":"roadmaps/2021_August_to_October/#provider-version-v400","text":"Issue: #20433 The next major release of the provider will include the adoption of the AWS Go SDK v2.0 as well as a refactor of one of our oldest and most used resources: S3. There will also be the usual deprecations and sometimes breaking changes to existing resources which are necessary to maintain consistency of behavior across resources. Our goal is to focus on standardization to reduce technical debt and lay a strong foundation for future enhancement initiatives within the provider. For details of the changes in full please refer to #20433 . We would love to hear your feedback.","title":"Provider Version v4.0.0"},{"location":"roadmaps/2021_August_to_October/#new-services","text":"","title":"New Services"},{"location":"roadmaps/2021_August_to_October/#amazon-quicksight","text":"Issue: #10990 Amazon QuickSight is a scalable, serverless, embeddable, machine learning-powered business intelligence (BI) service built for the cloud. QuickSight lets you easily create and publish interactive BI dashboards that include Machine Learning-powered insights. QuickSight dashboards can be accessed from any device, and seamlessly embedded into your applications, portals, and websites. Support for Amazon Quicksight will include: New Resource(s): aws_quicksight_data_source aws_quicksight_group_membership aws_quicksight_iam_policy_assignment aws_quicksight_data_set aws_quicksight_ingestion aws_quicksight_template aws_quicksight_dashboard aws_quicksight_template_alias","title":"Amazon Quicksight"},{"location":"roadmaps/2021_August_to_October/#amazon-appstream","text":"Issue: #6058 Amazon AppStream 2.0 is a fully managed non-persistent desktop and application virtualization service that allows your users to securely access the data, applications, and resources they need, anywhere, anytime, from any supported device. With AppStream 2.0, you can easily scale your applications and desktops to any number of users across the globe without acquiring, provisioning, and operating hardware or infrastructure. AppStream 2.0 is built on AWS, so you benefit from a data center and network architecture designed for the most security-sensitive organizations. Each end user has a fluid and responsive experience because your applications run on virtual machines optimized for specific use cases and each streaming sessions automatically adjusts to network conditions. Support for Amazon AppStream will include: New Resource(s): aws_appstream_stack aws_appstream_fleet aws_appstream_imagebuilder","title":"Amazon AppStream"},{"location":"roadmaps/2021_August_to_October/#amazon-connect","text":"Issue: #16392 Amazon Connect is an easy to use omnichannel cloud contact center that helps you provide superior customer service at a lower cost. Designed from the ground up to be omnichannel, Amazon Connect provides a seamless experience across voice and chat for your customers and agents. This includes one set of tools for skills-based routing, task management, powerful real-time and historical analytics, and intuitive management tools \u2013 all with pay-as-you-go pricing, which means Amazon Connect simplifies contact center operations, improves agent efficiency, and lowers costs. You can set up a contact center in minutes that can scale to support millions of customers from the office or as a virtual contact center. Support for Amazon Connect will include: New Resource(s): aws_connect_instance aws_connect_contact_flow aws_connect_bot_association aws_connect_lex_bot_association aws_connect_lambda_function_association New Data Source(s): aws_connect_instance aws_connect_contact_flow aws_connect_bot_association aws_connect_lex_bot_association aws_connect_lambda_function_association","title":"Amazon Connect"},{"location":"roadmaps/2021_August_to_October/#enhancements-to-existing-services","text":"Support for KMS Multi-Region Keys S3 Replication Time Control New Data Source: aws_iam_roles","title":"Enhancements to Existing Services"},{"location":"roadmaps/2021_August_to_October/#project-restructure-service-level-packages","text":"The scale of the provider (now 1000 resources/datasources) has led to its existing package structure being difficult to work with and maintain. This quarter we are going to perform a large refactor of the codebase, to align on a single go package per AWS service. More details can be found in the encompassing issue #20431","title":"Project Restructure: Service Level Packages"},{"location":"roadmaps/2021_August_to_October/#research-topics","text":"Research topics include features, architectural changes, and ideas that we are pursuing in the longer term that may significantly impact the core user experience of the AWS provider. Research topics are discovery only and are not guaranteed to be included in a future release.","title":"Research Topics"},{"location":"roadmaps/2021_August_to_October/#scaffolding-for-new-resources-datasources-and-associated-tests","text":"Adding resources, datasources and test files to the provider is a repetitive task which should be automated to ensure consistency and speed up contributor and maintainer workflow. A simple cli tool should be able to generate these files in place, and ensure that any code reference additions required (ie adding to provider.go ) are performed as part of the process.","title":"Scaffolding for new resources, datasources and associated tests"},{"location":"roadmaps/2021_August_to_October/#disclosures","text":"The product-development initiatives in this document reflect HashiCorp's current plans and are subject to change and/or cancellation in HashiCorp's sole discretion.","title":"Disclosures"},{"location":"roadmaps/2021_February_to_April/","text":"Roadmap: February 2021 - April 2021 # Every few months, the team will highlight areas of focus for our work and upcoming research. We select items for inclusion in the roadmap from the Top 10 Community Issues, Core Services , and internal priorities. Where community sourced contributions exist we will work with the authors to review and merge their work. Where this does not exist or the original contributors, are not available we will create the resources and implementation ourselves. Each weekly release will include necessary tasks that lead to the completion of the stated goals as well as community pull requests, enhancements, and features that are not highlighted in the roadmap. To view all the items we've prioritized for this quarter, please see the Roadmap milestone . This roadmap does not describe all the work that will be included within this timeframe, but it does describe our focus. We will include other work as events occur . From November through January , we added support for (among other things): SSO Permission Sets EC2 Managed Prefix Lists Firewall Manager Policies SASL/SCRAM Authentication for MSK ImageBuilder LakeFormation Serverless Application Repository Cloudwatch Composite Alarms As well as partnering with AWS to provide launch day support for: Network Firewall Code Signing for Lambda Container Images for Lambda Gateway Load Balancer Spot Launch for EKS Managed Node Groups From February-April \u201821, we will be prioritizing the following areas of work: Provider Functionality: Default Tags # Issue: #7926 Default Tags builds on the workflows in Ignore Tags to provide additional control over the ways Terraform manages tagging capabilities. Users will be able to specify lists of tags to apply to all resources in a configuration at the provider level. Our goal in offering this use case is to assist in tidying up configuration files, decreasing development efforts, and streamlining cost allocation and resource attribution within organizations of all sizes. New Services # CloudWatch Synthetics # Issue: #11145 CloudWatch Synthetics You can use Amazon CloudWatch Synthetics to create canaries, configurable scripts that run on a schedule, to monitor your endpoints and APIs. Canaries follow the same routes and perform the same actions as a customer, which makes it possible for you to continually verify your customer experience even when you don't have any customer traffic on your applications. By using canaries, you can discover issues before your customers do. Support for CloudWatch Synthetics will include: New Resource(s): aws_synthetics_canary New Datasource(s): aws_synthetics_canary_runs Managed Workflows for Apache Airflow # Issue: #16432 Managed Workflows for Apache Airflow Amazon Managed Workflows for Apache Airflow (MWAA) is a managed orchestration service for Apache Airflow1 that makes it easier to set up and operate end-to-end data pipelines in the cloud at scale. Apache Airflow is an open-source tool used to programmatically author, schedule, and monitor sequences of processes and tasks referred to as \u201cworkflows.\u201d With Managed Workflows, you can use Airflow and Python to create workflows without having to manage the underlying infrastructure for scalability, availability, and security. Managed Workflows automatically scales its workflow execution capacity to meet your needs, and is integrated with AWS security services to help provide you with fast and secure access to data. Support for Amazon Managed Workflows for Apache Airflow will include: New Resource(s): aws_mwaa_environment Core Service Reliability # Core Services are areas of high usage or strategic importance for our users. We strive to offer rock solid reliability in these areas. This quarter we will have a focus on RDS and Elasticache (which we are also promoting to Core Service status) to address some common pain points in their usage and ensure they continue to meet our standards. RDS # #15177 : Subsequent plan/apply forces global cluster recreation when source cluster's storage_encrypted=true #15583 : aws db parameter group ... converts keys and values to lowercase and fails 'apply' due to aws_db_parameter_group changes #1198 : Unable to ignore changes to RDS minor engine version #9401 : Destroy/recreate DB instance on minor version update rather than updating #2635 : RDS - storage_encrypted = true does not work #467 : With aws_db_instance when you remove the snapshot_identifier it wants to force a new resource #10197 : AWS aurora unexpected state 'configuring-iam-database-auth' when modifying the iam_database_authentication_enabled flag #13891 : RDS Cluster is not reattached to Global Cluster after failing deletion Technical Debt Theme # Last quarter we continued to improve the stability of our Acceptance Test suite. Following on from that work we will begin to integrate our Pull Request workflow with our Acceptance testing suite with a goal of being able to determine which tests to run, trigger, and view results of Acceptance Test runs on GitHub. This will improve our time to merge incoming PR's and further protect against regressions. We also spent time last quarter improving our documentation to give contributors more explicit guidance on best practice patterns for data conversion and error handling . Research Topics # Research topics include features, architectural changes, and ideas that we are pursuing in the longer term that may significantly impact the core user experience of the AWS provider. Research topics are discovery only and are not guaranteed to be included in a future release. We are interested in your thoughts and feedback about the proposals below and encourage you to comment on the linked issues or schedule time with @maryelizbeth via the link on her GitHub profile to discuss. API Calls/IAM Actions Per Terraform Resource (Minimum IAM) # Issue: #9154 To address security concerns and best practices we are considering how Terraform could surface minimally viable IAM policies for taking actions on resources or executing a TF plan. This is in the early stages of research and we are particularly interested in whether or not this would be useful and the resources or services areas for which it is most valuable. Lifecycle: Retain [Add 'retain' attribute to the Terraform lifecycle meta-parameter] # Issue: #902 Some resources (e.g. log groups) are intended to be created but never destroyed. Terraform currently does not have a lifecycle attribute for retaining such resources. We are curious as to whether or not retaining resources is a workflow that meets the needs of our community and if so, how and where we might make use of that in the AWS Provider. Disclosures # The product-development initiatives in this document reflect HashiCorp's current plans and are subject to change and/or cancellation in HashiCorp's sole discretion.","title":"Roadmap: February 2021 - April 2021"},{"location":"roadmaps/2021_February_to_April/#roadmap-february-2021-april-2021","text":"Every few months, the team will highlight areas of focus for our work and upcoming research. We select items for inclusion in the roadmap from the Top 10 Community Issues, Core Services , and internal priorities. Where community sourced contributions exist we will work with the authors to review and merge their work. Where this does not exist or the original contributors, are not available we will create the resources and implementation ourselves. Each weekly release will include necessary tasks that lead to the completion of the stated goals as well as community pull requests, enhancements, and features that are not highlighted in the roadmap. To view all the items we've prioritized for this quarter, please see the Roadmap milestone . This roadmap does not describe all the work that will be included within this timeframe, but it does describe our focus. We will include other work as events occur . From November through January , we added support for (among other things): SSO Permission Sets EC2 Managed Prefix Lists Firewall Manager Policies SASL/SCRAM Authentication for MSK ImageBuilder LakeFormation Serverless Application Repository Cloudwatch Composite Alarms As well as partnering with AWS to provide launch day support for: Network Firewall Code Signing for Lambda Container Images for Lambda Gateway Load Balancer Spot Launch for EKS Managed Node Groups From February-April \u201821, we will be prioritizing the following areas of work:","title":"Roadmap: February 2021 - April 2021"},{"location":"roadmaps/2021_February_to_April/#provider-functionality-default-tags","text":"Issue: #7926 Default Tags builds on the workflows in Ignore Tags to provide additional control over the ways Terraform manages tagging capabilities. Users will be able to specify lists of tags to apply to all resources in a configuration at the provider level. Our goal in offering this use case is to assist in tidying up configuration files, decreasing development efforts, and streamlining cost allocation and resource attribution within organizations of all sizes.","title":"Provider Functionality: Default Tags"},{"location":"roadmaps/2021_February_to_April/#new-services","text":"","title":"New Services"},{"location":"roadmaps/2021_February_to_April/#cloudwatch-synthetics","text":"Issue: #11145 CloudWatch Synthetics You can use Amazon CloudWatch Synthetics to create canaries, configurable scripts that run on a schedule, to monitor your endpoints and APIs. Canaries follow the same routes and perform the same actions as a customer, which makes it possible for you to continually verify your customer experience even when you don't have any customer traffic on your applications. By using canaries, you can discover issues before your customers do. Support for CloudWatch Synthetics will include: New Resource(s): aws_synthetics_canary New Datasource(s): aws_synthetics_canary_runs","title":"CloudWatch Synthetics"},{"location":"roadmaps/2021_February_to_April/#managed-workflows-for-apache-airflow","text":"Issue: #16432 Managed Workflows for Apache Airflow Amazon Managed Workflows for Apache Airflow (MWAA) is a managed orchestration service for Apache Airflow1 that makes it easier to set up and operate end-to-end data pipelines in the cloud at scale. Apache Airflow is an open-source tool used to programmatically author, schedule, and monitor sequences of processes and tasks referred to as \u201cworkflows.\u201d With Managed Workflows, you can use Airflow and Python to create workflows without having to manage the underlying infrastructure for scalability, availability, and security. Managed Workflows automatically scales its workflow execution capacity to meet your needs, and is integrated with AWS security services to help provide you with fast and secure access to data. Support for Amazon Managed Workflows for Apache Airflow will include: New Resource(s): aws_mwaa_environment","title":"Managed Workflows for Apache Airflow"},{"location":"roadmaps/2021_February_to_April/#core-service-reliability","text":"Core Services are areas of high usage or strategic importance for our users. We strive to offer rock solid reliability in these areas. This quarter we will have a focus on RDS and Elasticache (which we are also promoting to Core Service status) to address some common pain points in their usage and ensure they continue to meet our standards.","title":"Core Service Reliability"},{"location":"roadmaps/2021_February_to_April/#rds","text":"#15177 : Subsequent plan/apply forces global cluster recreation when source cluster's storage_encrypted=true #15583 : aws db parameter group ... converts keys and values to lowercase and fails 'apply' due to aws_db_parameter_group changes #1198 : Unable to ignore changes to RDS minor engine version #9401 : Destroy/recreate DB instance on minor version update rather than updating #2635 : RDS - storage_encrypted = true does not work #467 : With aws_db_instance when you remove the snapshot_identifier it wants to force a new resource #10197 : AWS aurora unexpected state 'configuring-iam-database-auth' when modifying the iam_database_authentication_enabled flag #13891 : RDS Cluster is not reattached to Global Cluster after failing deletion","title":"RDS"},{"location":"roadmaps/2021_February_to_April/#technical-debt-theme","text":"Last quarter we continued to improve the stability of our Acceptance Test suite. Following on from that work we will begin to integrate our Pull Request workflow with our Acceptance testing suite with a goal of being able to determine which tests to run, trigger, and view results of Acceptance Test runs on GitHub. This will improve our time to merge incoming PR's and further protect against regressions. We also spent time last quarter improving our documentation to give contributors more explicit guidance on best practice patterns for data conversion and error handling .","title":"Technical Debt Theme"},{"location":"roadmaps/2021_February_to_April/#research-topics","text":"Research topics include features, architectural changes, and ideas that we are pursuing in the longer term that may significantly impact the core user experience of the AWS provider. Research topics are discovery only and are not guaranteed to be included in a future release. We are interested in your thoughts and feedback about the proposals below and encourage you to comment on the linked issues or schedule time with @maryelizbeth via the link on her GitHub profile to discuss.","title":"Research Topics"},{"location":"roadmaps/2021_February_to_April/#api-callsiam-actions-per-terraform-resource-minimum-iam","text":"Issue: #9154 To address security concerns and best practices we are considering how Terraform could surface minimally viable IAM policies for taking actions on resources or executing a TF plan. This is in the early stages of research and we are particularly interested in whether or not this would be useful and the resources or services areas for which it is most valuable.","title":"API Calls/IAM Actions Per Terraform Resource (Minimum IAM)"},{"location":"roadmaps/2021_February_to_April/#lifecycle-retain-add-retain-attribute-to-the-terraform-lifecycle-meta-parameter","text":"Issue: #902 Some resources (e.g. log groups) are intended to be created but never destroyed. Terraform currently does not have a lifecycle attribute for retaining such resources. We are curious as to whether or not retaining resources is a workflow that meets the needs of our community and if so, how and where we might make use of that in the AWS Provider.","title":"Lifecycle: Retain [Add 'retain' attribute to the Terraform lifecycle meta-parameter]"},{"location":"roadmaps/2021_February_to_April/#disclosures","text":"The product-development initiatives in this document reflect HashiCorp's current plans and are subject to change and/or cancellation in HashiCorp's sole discretion.","title":"Disclosures"},{"location":"roadmaps/2021_May_to_July/","text":"Roadmap: May 2021 - July 2021 # Every few months, the team will highlight areas of focus for our work and upcoming research. We select items for inclusion in the roadmap from the Top 10 Community Issues, Core Services , and internal priorities. Where community sourced contributions exist we will work with the authors to review and merge their work. Where this does not exist or the original contributors are not available we will create the resources and implementation ourselves. Each weekly release will include necessary tasks that lead to the completion of the stated goals as well as community pull requests, enhancements, and features that are not highlighted in the roadmap. To view all the items we've prioritized for this quarter, please see the Roadmap milestone . This roadmap does not describe all the work that will be included within this timeframe, but it does describe our focus. We will include other work as events occur . In the period spanning February to April 2021 846 Pull Requests were opened in the provider and 947 were merged, adding support for: Default Tags CloudFront Origin Request and Cache Policies Cloudwatch Synthetics SecurityHub Elasticache Global Replication Group ACM Private Certificate Authorities Managed Workflows for Apache Airflow Managed Add Ons for EKS ECR Cross Region Replication SNS FIFO Topics EC2 Autoscaling Warm Pools Among many other enhancements, bug fixes and resolutions to technical debt items. From May-July \u201821, we will be prioritizing the following areas of work: New Services # AWS Amplify # Issue: #6917 AWS Amplify is a set of tools and services that can be used together or on their own, to help front-end web and mobile developers build scalable full stack applications, powered by AWS. With Amplify, you can configure app backends and connect your app in minutes, deploy static web apps in a few clicks, and easily manage app content outside the AWS console. Support for AWS Amplify will include: New Resource(s): aws_amplify_app aws_amplify_backend_environment aws_amplify_branch aws_amplify_domain_association aws_amplify_webhook Amazon Timestream # Issue: #15421 Amazon Timestream is a fast, scalable, and serverless time series database service for IoT and operational applications that makes it easy to store and analyze trillions of events per day up to 1,000 times faster and at as little as 1/10th the cost of relational databases. Amazon Timestream saves you time and cost in managing the lifecycle of time series data, and its purpose-built query engine lets you access and analyze recent and historical data together with a single query. Amazon Timestream has built-in time series analytics functions, helping you identify trends and patterns in near real-time. Amazon Timestream is serverless and automatically scales up or down to adjust capacity and performance, so you don\u2019t need to manage the underlying infrastructure, freeing you to focus on building your applications. Support for Amazon Timestream will include: New Resource(s): aws_timestreamwrite_database AWS AppConfig # Issue: #11973 Use AWS AppConfig, a capability of AWS Systems Manager, to create, manage, and quickly deploy application configurations. You can use AWS AppConfig with applications hosted on Amazon Elastic Compute Cloud (Amazon EC2) instances, AWS Lambda, containers, mobile applications, or IoT devices. Support for AWS AppConfig will include: New Resource(s) aws_appconfig_application aws_appconfig_configuration_profile aws_appconfig_deployment_strategy aws_appconfig_environment aws_appconfig_deployment Enhancements to Existing Services # AWS Transfer Server: Attach VPC security groups at creation EC2 Launch Templates AWS Elasticsearch Native SAML for Kibana Core Service Reliability # Core Services are areas of high usage or strategic importance for our users. We strive to offer rock solid reliability in these areas. This quarter we will have a focus on S3. We will be preparing a wholesale re-design of the aws_s3_bucket resource that we are planning to introduce in our major version release (v4.0) this year. Our focus will be on understanding how we can better break up the currently monolithic S3 bucket resource. Research Topics # Research topics include features, architectural changes, and ideas that we are pursuing in the longer term that may significantly impact the core user experience of the AWS provider. Research topics are discovery only and are not guaranteed to be included in a future release. We are interested in your thoughts and feedback about the proposals below and encourage you to comment on the linked issues or schedule time with @maryelizbeth via the link on her GitHub profile to discuss. Major Version Planning (v4.0) including wholesale redesign of the aws_s3_bucket resource to break it up into more manageable resources. AWS Go SDK v2 Adoption Test Discovery - Enable the automation of running the correct subset of acceptance tests for a given PR. Disclosures # The product-development initiatives in this document reflect HashiCorp's current plans and are subject to change and/or cancellation in HashiCorp's sole discretion.","title":"Roadmap: May 2021 - July 2021"},{"location":"roadmaps/2021_May_to_July/#roadmap-may-2021-july-2021","text":"Every few months, the team will highlight areas of focus for our work and upcoming research. We select items for inclusion in the roadmap from the Top 10 Community Issues, Core Services , and internal priorities. Where community sourced contributions exist we will work with the authors to review and merge their work. Where this does not exist or the original contributors are not available we will create the resources and implementation ourselves. Each weekly release will include necessary tasks that lead to the completion of the stated goals as well as community pull requests, enhancements, and features that are not highlighted in the roadmap. To view all the items we've prioritized for this quarter, please see the Roadmap milestone . This roadmap does not describe all the work that will be included within this timeframe, but it does describe our focus. We will include other work as events occur . In the period spanning February to April 2021 846 Pull Requests were opened in the provider and 947 were merged, adding support for: Default Tags CloudFront Origin Request and Cache Policies Cloudwatch Synthetics SecurityHub Elasticache Global Replication Group ACM Private Certificate Authorities Managed Workflows for Apache Airflow Managed Add Ons for EKS ECR Cross Region Replication SNS FIFO Topics EC2 Autoscaling Warm Pools Among many other enhancements, bug fixes and resolutions to technical debt items. From May-July \u201821, we will be prioritizing the following areas of work:","title":"Roadmap: May 2021 - July 2021"},{"location":"roadmaps/2021_May_to_July/#new-services","text":"","title":"New Services"},{"location":"roadmaps/2021_May_to_July/#aws-amplify","text":"Issue: #6917 AWS Amplify is a set of tools and services that can be used together or on their own, to help front-end web and mobile developers build scalable full stack applications, powered by AWS. With Amplify, you can configure app backends and connect your app in minutes, deploy static web apps in a few clicks, and easily manage app content outside the AWS console. Support for AWS Amplify will include: New Resource(s): aws_amplify_app aws_amplify_backend_environment aws_amplify_branch aws_amplify_domain_association aws_amplify_webhook","title":"AWS Amplify"},{"location":"roadmaps/2021_May_to_July/#amazon-timestream","text":"Issue: #15421 Amazon Timestream is a fast, scalable, and serverless time series database service for IoT and operational applications that makes it easy to store and analyze trillions of events per day up to 1,000 times faster and at as little as 1/10th the cost of relational databases. Amazon Timestream saves you time and cost in managing the lifecycle of time series data, and its purpose-built query engine lets you access and analyze recent and historical data together with a single query. Amazon Timestream has built-in time series analytics functions, helping you identify trends and patterns in near real-time. Amazon Timestream is serverless and automatically scales up or down to adjust capacity and performance, so you don\u2019t need to manage the underlying infrastructure, freeing you to focus on building your applications. Support for Amazon Timestream will include: New Resource(s): aws_timestreamwrite_database","title":"Amazon Timestream"},{"location":"roadmaps/2021_May_to_July/#aws-appconfig","text":"Issue: #11973 Use AWS AppConfig, a capability of AWS Systems Manager, to create, manage, and quickly deploy application configurations. You can use AWS AppConfig with applications hosted on Amazon Elastic Compute Cloud (Amazon EC2) instances, AWS Lambda, containers, mobile applications, or IoT devices. Support for AWS AppConfig will include: New Resource(s) aws_appconfig_application aws_appconfig_configuration_profile aws_appconfig_deployment_strategy aws_appconfig_environment aws_appconfig_deployment","title":"AWS AppConfig"},{"location":"roadmaps/2021_May_to_July/#enhancements-to-existing-services","text":"AWS Transfer Server: Attach VPC security groups at creation EC2 Launch Templates AWS Elasticsearch Native SAML for Kibana","title":"Enhancements to Existing Services"},{"location":"roadmaps/2021_May_to_July/#core-service-reliability","text":"Core Services are areas of high usage or strategic importance for our users. We strive to offer rock solid reliability in these areas. This quarter we will have a focus on S3. We will be preparing a wholesale re-design of the aws_s3_bucket resource that we are planning to introduce in our major version release (v4.0) this year. Our focus will be on understanding how we can better break up the currently monolithic S3 bucket resource.","title":"Core Service Reliability"},{"location":"roadmaps/2021_May_to_July/#research-topics","text":"Research topics include features, architectural changes, and ideas that we are pursuing in the longer term that may significantly impact the core user experience of the AWS provider. Research topics are discovery only and are not guaranteed to be included in a future release. We are interested in your thoughts and feedback about the proposals below and encourage you to comment on the linked issues or schedule time with @maryelizbeth via the link on her GitHub profile to discuss. Major Version Planning (v4.0) including wholesale redesign of the aws_s3_bucket resource to break it up into more manageable resources. AWS Go SDK v2 Adoption Test Discovery - Enable the automation of running the correct subset of acceptance tests for a given PR.","title":"Research Topics"},{"location":"roadmaps/2021_May_to_July/#disclosures","text":"The product-development initiatives in this document reflect HashiCorp's current plans and are subject to change and/or cancellation in HashiCorp's sole discretion.","title":"Disclosures"},{"location":"roadmaps/2021_November_to_January/","text":"Roadmap: November 2021 - January 2022 # Every few months, the team will highlight areas of focus for our work and upcoming research. We select items for inclusion in the roadmap from the Top Community Issues, Core Services , and internal priorities. Where community sourced contributions exist we will work with the authors to review and merge their work. Where this does not exist or the original contributors are not available we will create the resources and implementation ourselves. Each weekly release will include necessary tasks that lead to the completion of the stated goals as well as community pull requests, enhancements, and features that are not highlighted in the roadmap. To view all the items we've prioritized for this quarter, please see the Roadmap milestone . This roadmap does not describe all the work that will be included within this timeframe, but it does describe our focus. We will include other work as events occur . In the period spanning August to October 2021, 573 Pull Requests were opened in the provider and 465 were merged, adding support for: Amazon Chime Amazon Connect Amazon AppStream 2.0 Route 53 Recovery Control Graviton2 support for Lambda S3 Replication Time Control We also launched a fully generated provider, the AWS Cloud Control (AWSCC) provider for Terraform. The AWSCC provider is currently in Technical Preview. Please check it out and let us know what you think. HashiCorp Blog Announcement GitHub Repository AWS Cloud Control on the Terraform Registry From November \u201821- January \u201822, we will be prioritizing the following areas of work: Provider Version v4.0.0 # Issue: #20433 The next major release of the provider will include the adoption of the AWS Go SDK v2.0 as well as a refactor of one of our oldest and most used resources: S3. There will also be the usual deprecations and sometimes breaking changes to existing resources which are necessary to maintain consistency of behavior across resources. Our goal is to focus on standardization to reduce technical debt and lay a strong foundation for future enhancement initiatives within the provider. For details of the changes in full please refer to #20433. We would love to hear your feedback. Enhancements to Existing Services # Support for Managing Amazon CloudSearch Domains aws_config_remediation_configuration: No support for \"automatic\" remediation S3 Intelligent-Tiering Archive configuration IoT Thing Group Add resource for CodeCommit approval rule templates aws_dlm_lifecycle_policy - Implement support for \"Cross Region copy\" Add a data source for aws_key_pair Support ECS TaskSet Support for AthenaEngineVersion option in Athena work groups ECS Service can't update desired replicas when Blue Green deployment is enabled Add connection termination control to AWS LB target group WAFv2: Added support for custom response bodies New Resource aws_route53domains_domain Add aws_cognito_user resource AWS dynamodb table: restore from point in time Added retain parameter to aws_lambda_layer_version resource New Resource: aws_lambda_layer_version_permission resoure/aws_lb: Support WAF fial open aws_elb & aws_lb: Add desync_mitigation_mode Implement object lambda access points for S3 WAFv2: Added support for label_match_statement and rule_label Cloudtrail: Exclude Management Event Sources Retry S3 OperationAborted errors aws_dms_endpoint: support for secrets id for oracle and postgres Add support for private_ip_list aws_emr_cluster: Fix aws_emr_security_configuration destroy issues New Resource: aws_ecrpublic_repository_policy aws_ecs_task_definition overwrites previous revision Order is lost for data aws_iam_policy_document when applied to S3 buckets, iam roles, kms keys aws_ecs_cluster with capacity_providers cannot be destroyed Support for Account Settings Flags Execute AWS Lambda Only Once Research Topics # Research topics include features, architectural changes, and ideas that we are pursuing in the longer term that may significantly impact the core user experience of the AWS provider. Research topics are discovery only and are not guaranteed to be included in a future release. Scaffolding for new resources, datasources and associated tests # Adding resources, datasources and test files to the provider is a repetitive task which should be automated to ensure consistency and speed up contributor and maintainer workflow. A simple cli tool should be able to generate these files in place, and ensure that any code reference additions required (ie adding to provider.go ) are performed as part of the process. Disclosures # The product-development initiatives in this document reflect HashiCorp's current plans and are subject to change and/or cancellation in HashiCorp's sole discretion.","title":"Roadmap: November 2021 - January 2022"},{"location":"roadmaps/2021_November_to_January/#roadmap-november-2021-january-2022","text":"Every few months, the team will highlight areas of focus for our work and upcoming research. We select items for inclusion in the roadmap from the Top Community Issues, Core Services , and internal priorities. Where community sourced contributions exist we will work with the authors to review and merge their work. Where this does not exist or the original contributors are not available we will create the resources and implementation ourselves. Each weekly release will include necessary tasks that lead to the completion of the stated goals as well as community pull requests, enhancements, and features that are not highlighted in the roadmap. To view all the items we've prioritized for this quarter, please see the Roadmap milestone . This roadmap does not describe all the work that will be included within this timeframe, but it does describe our focus. We will include other work as events occur . In the period spanning August to October 2021, 573 Pull Requests were opened in the provider and 465 were merged, adding support for: Amazon Chime Amazon Connect Amazon AppStream 2.0 Route 53 Recovery Control Graviton2 support for Lambda S3 Replication Time Control We also launched a fully generated provider, the AWS Cloud Control (AWSCC) provider for Terraform. The AWSCC provider is currently in Technical Preview. Please check it out and let us know what you think. HashiCorp Blog Announcement GitHub Repository AWS Cloud Control on the Terraform Registry From November \u201821- January \u201822, we will be prioritizing the following areas of work:","title":"Roadmap: November 2021 - January 2022"},{"location":"roadmaps/2021_November_to_January/#provider-version-v400","text":"Issue: #20433 The next major release of the provider will include the adoption of the AWS Go SDK v2.0 as well as a refactor of one of our oldest and most used resources: S3. There will also be the usual deprecations and sometimes breaking changes to existing resources which are necessary to maintain consistency of behavior across resources. Our goal is to focus on standardization to reduce technical debt and lay a strong foundation for future enhancement initiatives within the provider. For details of the changes in full please refer to #20433. We would love to hear your feedback.","title":"Provider Version v4.0.0"},{"location":"roadmaps/2021_November_to_January/#enhancements-to-existing-services","text":"Support for Managing Amazon CloudSearch Domains aws_config_remediation_configuration: No support for \"automatic\" remediation S3 Intelligent-Tiering Archive configuration IoT Thing Group Add resource for CodeCommit approval rule templates aws_dlm_lifecycle_policy - Implement support for \"Cross Region copy\" Add a data source for aws_key_pair Support ECS TaskSet Support for AthenaEngineVersion option in Athena work groups ECS Service can't update desired replicas when Blue Green deployment is enabled Add connection termination control to AWS LB target group WAFv2: Added support for custom response bodies New Resource aws_route53domains_domain Add aws_cognito_user resource AWS dynamodb table: restore from point in time Added retain parameter to aws_lambda_layer_version resource New Resource: aws_lambda_layer_version_permission resoure/aws_lb: Support WAF fial open aws_elb & aws_lb: Add desync_mitigation_mode Implement object lambda access points for S3 WAFv2: Added support for label_match_statement and rule_label Cloudtrail: Exclude Management Event Sources Retry S3 OperationAborted errors aws_dms_endpoint: support for secrets id for oracle and postgres Add support for private_ip_list aws_emr_cluster: Fix aws_emr_security_configuration destroy issues New Resource: aws_ecrpublic_repository_policy aws_ecs_task_definition overwrites previous revision Order is lost for data aws_iam_policy_document when applied to S3 buckets, iam roles, kms keys aws_ecs_cluster with capacity_providers cannot be destroyed Support for Account Settings Flags Execute AWS Lambda Only Once","title":"Enhancements to Existing Services"},{"location":"roadmaps/2021_November_to_January/#research-topics","text":"Research topics include features, architectural changes, and ideas that we are pursuing in the longer term that may significantly impact the core user experience of the AWS provider. Research topics are discovery only and are not guaranteed to be included in a future release.","title":"Research Topics"},{"location":"roadmaps/2021_November_to_January/#scaffolding-for-new-resources-datasources-and-associated-tests","text":"Adding resources, datasources and test files to the provider is a repetitive task which should be automated to ensure consistency and speed up contributor and maintainer workflow. A simple cli tool should be able to generate these files in place, and ensure that any code reference additions required (ie adding to provider.go ) are performed as part of the process.","title":"Scaffolding for new resources, datasources and associated tests"},{"location":"roadmaps/2021_November_to_January/#disclosures","text":"The product-development initiatives in this document reflect HashiCorp's current plans and are subject to change and/or cancellation in HashiCorp's sole discretion.","title":"Disclosures"},{"location":"roadmaps/2022_February_to_April/","text":"Roadmap: February 2022 - April 2022 # Every few months, the team will highlight areas of focus for our work and upcoming research. We select items for inclusion in the roadmap from the Top Community Issues, Core Services , and internal priorities. Where community sourced contributions exist we will work with the authors to review and merge their work. Where this does not exist or the original contributors are not available we will create the resources and implementation ourselves. Each weekly release will include necessary tasks that lead to the completion of the stated goals as well as community pull requests, enhancements, and features that are not highlighted in the roadmap. To view all the items we've prioritized for this quarter, please see the Roadmap milestone . This roadmap does not describe all the work that will be included within this timeframe, but it does describe our focus. We will include other work as events occur. In the period spanning November 2021 to Janury 2022, 668 Pull Requests were opened in the provider and 730 were closed/merged, adding support for: Managing Amazon CloudSearch Domains ECS Task Sets S3 Intelligent Tiering Archive Configuration IoT Thing Group Lambda Access Points for S3 ECR Public Repositories From February \u201822 - April \u201822, we will be prioritizing the following areas of work: New Services # AWS AppFlow # Issue: #16253 Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between Software-as-a-Service (SaaS) applications Support for Amazon AppFlow will include: New Resource(s): aws_appflow_flow aws_appflow_connector_profile Amazon Global Networks # Issue: #11132 A Global Network is a container for your network objects. After you create it, you can register your transit gateways and define your on-premises networks in the global network. Support for Global Networks will include: New Resource(s): aws_networkmanager_global_network aws_networkmanager_site aws_networkmanager_link aws_networkmanager_device aws_networkmanager_transit_gateway_registration Amazon OpenSearch Service # Issue: #20853 Amazon OpenSearch Service is a distributed, open-source search and analytics suite used for a broad set of use cases like real-time application monitoring, log analytics, and website search Affected Resource(s): aws_elasticsearch_domain Amazon Managed Grafana # Issue: #16789 Amazon Managed Grafana is a fully managed service for open source Grafana that enables you to query, visualize, alert on and understand your metrics. Support for Amazon Managed Grafana will include: New Resource(s): aws_grafana_workspace aws_grafana_license_association Enhancements to Existing Services # changing identifier in RDS (aws_db_instance) will destroy/create the db Terraform fails to destroy autoscaling group if scale in protection is enabled Implement support for time based retention policies in DLM Cannot destroy attached security groups default_tags always shows an update AWS Synthetics Canary Missing support for Environment Variables Add retry handling when a request's connection is reset by peer resource/aws_db_instance: Should support enabling cross-region automated backups Feature Request: Support Route53 Domains import aws_s3_bucket does not store important attributes like acl Add user_group argument to aws_elasticache_replication_group aws_lb_listener_certificate not destroyed upon \"force new resource\" AWS ACM Expected certificate to be issued but was in state PENDING_VALIDATION Feature Request: Dynamic Security Group Association for VPC Endpoint Interface Inconsistency in AWS Terraform provider with aws_lambda_function aws_wafv2_web_acl: managed-rule-group-statement is missing Version option Transit Gateway multicast support S3 bucket slow to delete when destroyed during an apply aws_elasticsearch_domain cognito_options cause Cycle Error data source for aws_iam_saml_provider Amazon MSK multiple authentication modes and updates to TLS encryption settings Support cold storage option for aws_elasticsearch_domain config aws_sns_topic_subscription doesn't support unconfirmed endpoints Add Radius support for aws_directory_service_directory New resource aws_kafkaconnect_connector aws_rds_cluster_activity_stream Amazon EMR on Amazon EKS Add destination metrics for Replication rule add domain validation options parameter to aws_acm_certificate Support Starting AWS Database Migration Service Replication Task Feature Request: DynamoDB CloudWatch Contributor Insights Feature request: Support Api Gateway Canary release DMS task modification lifecycle Research Topics # Research topics include features, architectural changes, and ideas that we are pursuing in the longer term that may significantly impact the core user experience of the AWS provider. Research topics are discovery only and are not guaranteed to be included in a future release. Scaffolding for new resources, datasources and associated tests # Adding resources, datasources and test files to the provider is a repetitive task which should be automated to ensure consistency and speed up contributor and maintainer workflow. A simple cli tool should be able to generate these files in place, and ensure that any code reference additions required (ie adding to provider.go ) are performed as part of the process. Disclosures # The product-development initiatives in this document reflect HashiCorp's current plans and are subject to change and/or cancellation in HashiCorp's sole discretion.","title":"Roadmap: February 2022 - April 2022"},{"location":"roadmaps/2022_February_to_April/#roadmap-february-2022-april-2022","text":"Every few months, the team will highlight areas of focus for our work and upcoming research. We select items for inclusion in the roadmap from the Top Community Issues, Core Services , and internal priorities. Where community sourced contributions exist we will work with the authors to review and merge their work. Where this does not exist or the original contributors are not available we will create the resources and implementation ourselves. Each weekly release will include necessary tasks that lead to the completion of the stated goals as well as community pull requests, enhancements, and features that are not highlighted in the roadmap. To view all the items we've prioritized for this quarter, please see the Roadmap milestone . This roadmap does not describe all the work that will be included within this timeframe, but it does describe our focus. We will include other work as events occur. In the period spanning November 2021 to Janury 2022, 668 Pull Requests were opened in the provider and 730 were closed/merged, adding support for: Managing Amazon CloudSearch Domains ECS Task Sets S3 Intelligent Tiering Archive Configuration IoT Thing Group Lambda Access Points for S3 ECR Public Repositories From February \u201822 - April \u201822, we will be prioritizing the following areas of work:","title":"Roadmap: February 2022 - April 2022"},{"location":"roadmaps/2022_February_to_April/#new-services","text":"","title":"New Services"},{"location":"roadmaps/2022_February_to_April/#aws-appflow","text":"Issue: #16253 Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between Software-as-a-Service (SaaS) applications Support for Amazon AppFlow will include: New Resource(s): aws_appflow_flow aws_appflow_connector_profile","title":"AWS AppFlow"},{"location":"roadmaps/2022_February_to_April/#amazon-global-networks","text":"Issue: #11132 A Global Network is a container for your network objects. After you create it, you can register your transit gateways and define your on-premises networks in the global network. Support for Global Networks will include: New Resource(s): aws_networkmanager_global_network aws_networkmanager_site aws_networkmanager_link aws_networkmanager_device aws_networkmanager_transit_gateway_registration","title":"Amazon Global Networks"},{"location":"roadmaps/2022_February_to_April/#amazon-opensearch-service","text":"Issue: #20853 Amazon OpenSearch Service is a distributed, open-source search and analytics suite used for a broad set of use cases like real-time application monitoring, log analytics, and website search Affected Resource(s): aws_elasticsearch_domain","title":"Amazon OpenSearch Service"},{"location":"roadmaps/2022_February_to_April/#amazon-managed-grafana","text":"Issue: #16789 Amazon Managed Grafana is a fully managed service for open source Grafana that enables you to query, visualize, alert on and understand your metrics. Support for Amazon Managed Grafana will include: New Resource(s): aws_grafana_workspace aws_grafana_license_association","title":"Amazon Managed Grafana"},{"location":"roadmaps/2022_February_to_April/#enhancements-to-existing-services","text":"changing identifier in RDS (aws_db_instance) will destroy/create the db Terraform fails to destroy autoscaling group if scale in protection is enabled Implement support for time based retention policies in DLM Cannot destroy attached security groups default_tags always shows an update AWS Synthetics Canary Missing support for Environment Variables Add retry handling when a request's connection is reset by peer resource/aws_db_instance: Should support enabling cross-region automated backups Feature Request: Support Route53 Domains import aws_s3_bucket does not store important attributes like acl Add user_group argument to aws_elasticache_replication_group aws_lb_listener_certificate not destroyed upon \"force new resource\" AWS ACM Expected certificate to be issued but was in state PENDING_VALIDATION Feature Request: Dynamic Security Group Association for VPC Endpoint Interface Inconsistency in AWS Terraform provider with aws_lambda_function aws_wafv2_web_acl: managed-rule-group-statement is missing Version option Transit Gateway multicast support S3 bucket slow to delete when destroyed during an apply aws_elasticsearch_domain cognito_options cause Cycle Error data source for aws_iam_saml_provider Amazon MSK multiple authentication modes and updates to TLS encryption settings Support cold storage option for aws_elasticsearch_domain config aws_sns_topic_subscription doesn't support unconfirmed endpoints Add Radius support for aws_directory_service_directory New resource aws_kafkaconnect_connector aws_rds_cluster_activity_stream Amazon EMR on Amazon EKS Add destination metrics for Replication rule add domain validation options parameter to aws_acm_certificate Support Starting AWS Database Migration Service Replication Task Feature Request: DynamoDB CloudWatch Contributor Insights Feature request: Support Api Gateway Canary release DMS task modification lifecycle","title":"Enhancements to Existing Services"},{"location":"roadmaps/2022_February_to_April/#research-topics","text":"Research topics include features, architectural changes, and ideas that we are pursuing in the longer term that may significantly impact the core user experience of the AWS provider. Research topics are discovery only and are not guaranteed to be included in a future release.","title":"Research Topics"},{"location":"roadmaps/2022_February_to_April/#scaffolding-for-new-resources-datasources-and-associated-tests","text":"Adding resources, datasources and test files to the provider is a repetitive task which should be automated to ensure consistency and speed up contributor and maintainer workflow. A simple cli tool should be able to generate these files in place, and ensure that any code reference additions required (ie adding to provider.go ) are performed as part of the process.","title":"Scaffolding for new resources, datasources and associated tests"},{"location":"roadmaps/2022_February_to_April/#disclosures","text":"The product-development initiatives in this document reflect HashiCorp's current plans and are subject to change and/or cancellation in HashiCorp's sole discretion.","title":"Disclosures"}]}